
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000503c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  0000503c  000050d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080017c  0080017c  000051ec  2**0
                  ALLOC
  3 .stab         00003f3c  00000000  00000000  000051ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001848  00000000  00000000  00009128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000aab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ac20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c869  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e504  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f0bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__vector_13>
      38:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__vector_14>
      3c:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <main>
      8a:	0c 94 1c 28 	jmp	0x5038	; 0x5038 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 26 	jmp	0x4dc0	; 0x4dc0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e5       	ldi	r26, 0x50	; 80
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 27 	jmp	0x4e10	; 0x4e10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 27 	jmp	0x4e10	; 0x4e10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 26 	jmp	0x4dc0	; 0x4dc0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e5       	ldi	r24, 0x50	; 80
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 08 27 	jmp	0x4e10	; 0x4e10 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 08 27 	jmp	0x4e10	; 0x4e10 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 08 27 	jmp	0x4e10	; 0x4e10 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0c 27 	jmp	0x4e18	; 0x4e18 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_voidSetPinDirection>:
#include "../Include/MCAL/DIO/DIO_Cfg.h"

#define F_CPU 8000000UL

void MDIO_voidSetPinDirection (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_DIRECTION_e A_PINDirection)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINDirection <= DIO_OUTPUT))
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	08 f0       	brcs	.+2      	; 0xb68 <MDIO_voidSetPinDirection+0x22>
     b66:	09 c1       	rjmp	.+530    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	88 30       	cpi	r24, 0x08	; 8
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <MDIO_voidSetPinDirection+0x2a>
     b6e:	05 c1       	rjmp	.+522    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	08 f0       	brcs	.+2      	; 0xb78 <MDIO_voidSetPinDirection+0x32>
     b76:	01 c1       	rjmp	.+514    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_DIOPort)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3d 87       	std	Y+13, r19	; 0x0d
     b80:	2c 87       	std	Y+12, r18	; 0x0c
     b82:	8c 85       	ldd	r24, Y+12	; 0x0c
     b84:	9d 85       	ldd	r25, Y+13	; 0x0d
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <MDIO_voidSetPinDirection+0x48>
     b8c:	4f c0       	rjmp	.+158    	; 0xc2c <MDIO_voidSetPinDirection+0xe6>
     b8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     b90:	3d 85       	ldd	r19, Y+13	; 0x0d
     b92:	22 30       	cpi	r18, 0x02	; 2
     b94:	31 05       	cpc	r19, r1
     b96:	2c f4       	brge	.+10     	; 0xba2 <MDIO_voidSetPinDirection+0x5c>
     b98:	8c 85       	ldd	r24, Y+12	; 0x0c
     b9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	71 f0       	breq	.+28     	; 0xbbc <MDIO_voidSetPinDirection+0x76>
     ba0:	ec c0       	rjmp	.+472    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
     ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ba4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <MDIO_voidSetPinDirection+0x68>
     bac:	77 c0       	rjmp	.+238    	; 0xc9c <MDIO_voidSetPinDirection+0x156>
     bae:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <MDIO_voidSetPinDirection+0x74>
     bb8:	a9 c0       	rjmp	.+338    	; 0xd0c <MDIO_voidSetPinDirection+0x1c6>
     bba:	df c0       	rjmp	.+446    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_PINDirection)
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3b 87       	std	Y+11, r19	; 0x0b
     bc4:	2a 87       	std	Y+10, r18	; 0x0a
     bc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	31 f0       	breq	.+12     	; 0xbda <MDIO_voidSetPinDirection+0x94>
     bce:	2a 85       	ldd	r18, Y+10	; 0x0a
     bd0:	3b 85       	ldd	r19, Y+11	; 0x0b
     bd2:	21 30       	cpi	r18, 0x01	; 1
     bd4:	31 05       	cpc	r19, r1
     bd6:	b1 f0       	breq	.+44     	; 0xc04 <MDIO_voidSetPinDirection+0xbe>
     bd8:	d0 c0       	rjmp	.+416    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_PINID);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <MDIO_voidSetPinDirection+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <MDIO_voidSetPinDirection+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	bb c0       	rjmp	.+374    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_PINID);
     c04:	aa e3       	ldi	r26, 0x3A	; 58
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e3       	ldi	r30, 0x3A	; 58
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <MDIO_voidSetPinDirection+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <MDIO_voidSetPinDirection+0xd8>
     c26:	84 2b       	or	r24, r20
     c28:	8c 93       	st	X, r24
     c2a:	a7 c0       	rjmp	.+334    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			}
		break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINDirection)
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	39 87       	std	Y+9, r19	; 0x09
     c34:	28 87       	std	Y+8, r18	; 0x08
     c36:	88 85       	ldd	r24, Y+8	; 0x08
     c38:	99 85       	ldd	r25, Y+9	; 0x09
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	31 f0       	breq	.+12     	; 0xc4a <MDIO_voidSetPinDirection+0x104>
     c3e:	28 85       	ldd	r18, Y+8	; 0x08
     c40:	39 85       	ldd	r19, Y+9	; 0x09
     c42:	21 30       	cpi	r18, 0x01	; 1
     c44:	31 05       	cpc	r19, r1
     c46:	b1 f0       	breq	.+44     	; 0xc74 <MDIO_voidSetPinDirection+0x12e>
     c48:	98 c0       	rjmp	.+304    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_PINID);
     c4a:	a7 e3       	ldi	r26, 0x37	; 55
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e7 e3       	ldi	r30, 0x37	; 55
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <MDIO_voidSetPinDirection+0x122>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <MDIO_voidSetPinDirection+0x11e>
     c6c:	80 95       	com	r24
     c6e:	84 23       	and	r24, r20
     c70:	8c 93       	st	X, r24
     c72:	83 c0       	rjmp	.+262    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_PINID);
     c74:	a7 e3       	ldi	r26, 0x37	; 55
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e7 e3       	ldi	r30, 0x37	; 55
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <MDIO_voidSetPinDirection+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <MDIO_voidSetPinDirection+0x148>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	6f c0       	rjmp	.+222    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINDirection)
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3f 83       	std	Y+7, r19	; 0x07
     ca4:	2e 83       	std	Y+6, r18	; 0x06
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	31 f0       	breq	.+12     	; 0xcba <MDIO_voidSetPinDirection+0x174>
     cae:	2e 81       	ldd	r18, Y+6	; 0x06
     cb0:	3f 81       	ldd	r19, Y+7	; 0x07
     cb2:	21 30       	cpi	r18, 0x01	; 1
     cb4:	31 05       	cpc	r19, r1
     cb6:	b1 f0       	breq	.+44     	; 0xce4 <MDIO_voidSetPinDirection+0x19e>
     cb8:	60 c0       	rjmp	.+192    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_PINID);
     cba:	a4 e3       	ldi	r26, 0x34	; 52
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e4 e3       	ldi	r30, 0x34	; 52
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <MDIO_voidSetPinDirection+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <MDIO_voidSetPinDirection+0x18e>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	4b c0       	rjmp	.+150    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_PINID);
     ce4:	a4 e3       	ldi	r26, 0x34	; 52
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e4 e3       	ldi	r30, 0x34	; 52
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <MDIO_voidSetPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <MDIO_voidSetPinDirection+0x1b8>
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	37 c0       	rjmp	.+110    	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINDirection)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3d 83       	std	Y+5, r19	; 0x05
     d14:	2c 83       	std	Y+4, r18	; 0x04
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	31 f0       	breq	.+12     	; 0xd2a <MDIO_voidSetPinDirection+0x1e4>
     d1e:	2c 81       	ldd	r18, Y+4	; 0x04
     d20:	3d 81       	ldd	r19, Y+5	; 0x05
     d22:	21 30       	cpi	r18, 0x01	; 1
     d24:	31 05       	cpc	r19, r1
     d26:	b1 f0       	breq	.+44     	; 0xd54 <MDIO_voidSetPinDirection+0x20e>
     d28:	28 c0       	rjmp	.+80     	; 0xd7a <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_PINID);
     d2a:	a1 e3       	ldi	r26, 0x31	; 49
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e1 e3       	ldi	r30, 0x31	; 49
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <MDIO_voidSetPinDirection+0x202>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <MDIO_voidSetPinDirection+0x1fe>
     d4c:	80 95       	com	r24
     d4e:	84 23       	and	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_PINID);
     d54:	a1 e3       	ldi	r26, 0x31	; 49
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e1 e3       	ldi	r30, 0x31	; 49
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <MDIO_voidSetPinDirection+0x22c>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <MDIO_voidSetPinDirection+0x228>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     d7a:	2d 96       	adiw	r28, 0x0d	; 13
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_VALUE_e A_PINValue)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	2d 97       	sbiw	r28, 0x0d	; 13
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	6a 83       	std	Y+2, r22	; 0x02
     da4:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINValue <= DIO_SET))
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	08 f0       	brcs	.+2      	; 0xdae <MDIO_voidSetPinValue+0x22>
     dac:	09 c1       	rjmp	.+530    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	88 30       	cpi	r24, 0x08	; 8
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <MDIO_voidSetPinValue+0x2a>
     db4:	05 c1       	rjmp	.+522    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	08 f0       	brcs	.+2      	; 0xdbe <MDIO_voidSetPinValue+0x32>
     dbc:	01 c1       	rjmp	.+514    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
	{
		switch (A_DIOPort)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3d 87       	std	Y+13, r19	; 0x0d
     dc6:	2c 87       	std	Y+12, r18	; 0x0c
     dc8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dca:	9d 85       	ldd	r25, Y+13	; 0x0d
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <MDIO_voidSetPinValue+0x48>
     dd2:	4f c0       	rjmp	.+158    	; 0xe72 <MDIO_voidSetPinValue+0xe6>
     dd4:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd6:	3d 85       	ldd	r19, Y+13	; 0x0d
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	2c f4       	brge	.+10     	; 0xde8 <MDIO_voidSetPinValue+0x5c>
     dde:	8c 85       	ldd	r24, Y+12	; 0x0c
     de0:	9d 85       	ldd	r25, Y+13	; 0x0d
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	71 f0       	breq	.+28     	; 0xe02 <MDIO_voidSetPinValue+0x76>
     de6:	ec c0       	rjmp	.+472    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
     de8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dea:	3d 85       	ldd	r19, Y+13	; 0x0d
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <MDIO_voidSetPinValue+0x68>
     df2:	77 c0       	rjmp	.+238    	; 0xee2 <MDIO_voidSetPinValue+0x156>
     df4:	8c 85       	ldd	r24, Y+12	; 0x0c
     df6:	9d 85       	ldd	r25, Y+13	; 0x0d
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <MDIO_voidSetPinValue+0x74>
     dfe:	a9 c0       	rjmp	.+338    	; 0xf52 <MDIO_voidSetPinValue+0x1c6>
     e00:	df c0       	rjmp	.+446    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_PINValue)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3b 87       	std	Y+11, r19	; 0x0b
     e0a:	2a 87       	std	Y+10, r18	; 0x0a
     e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	31 f0       	breq	.+12     	; 0xe20 <MDIO_voidSetPinValue+0x94>
     e14:	2a 85       	ldd	r18, Y+10	; 0x0a
     e16:	3b 85       	ldd	r19, Y+11	; 0x0b
     e18:	21 30       	cpi	r18, 0x01	; 1
     e1a:	31 05       	cpc	r19, r1
     e1c:	b1 f0       	breq	.+44     	; 0xe4a <MDIO_voidSetPinValue+0xbe>
     e1e:	d0 c0       	rjmp	.+416    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_PINID);
     e20:	ab e3       	ldi	r26, 0x3B	; 59
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	eb e3       	ldi	r30, 0x3B	; 59
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <MDIO_voidSetPinValue+0xb2>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <MDIO_voidSetPinValue+0xae>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	bb c0       	rjmp	.+374    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_PINID);
     e4a:	ab e3       	ldi	r26, 0x3B	; 59
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e3       	ldi	r30, 0x3B	; 59
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <MDIO_voidSetPinValue+0xdc>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <MDIO_voidSetPinValue+0xd8>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	a7 c0       	rjmp	.+334    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINValue)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	39 87       	std	Y+9, r19	; 0x09
     e7a:	28 87       	std	Y+8, r18	; 0x08
     e7c:	88 85       	ldd	r24, Y+8	; 0x08
     e7e:	99 85       	ldd	r25, Y+9	; 0x09
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	31 f0       	breq	.+12     	; 0xe90 <MDIO_voidSetPinValue+0x104>
     e84:	28 85       	ldd	r18, Y+8	; 0x08
     e86:	39 85       	ldd	r19, Y+9	; 0x09
     e88:	21 30       	cpi	r18, 0x01	; 1
     e8a:	31 05       	cpc	r19, r1
     e8c:	b1 f0       	breq	.+44     	; 0xeba <MDIO_voidSetPinValue+0x12e>
     e8e:	98 c0       	rjmp	.+304    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_PINID);
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MDIO_voidSetPinValue+0x122>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <MDIO_voidSetPinValue+0x11e>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	83 c0       	rjmp	.+262    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_PINID);
     eba:	a8 e3       	ldi	r26, 0x38	; 56
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e8 e3       	ldi	r30, 0x38	; 56
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <MDIO_voidSetPinValue+0x14c>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <MDIO_voidSetPinValue+0x148>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	6f c0       	rjmp	.+222    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINValue)
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	3f 83       	std	Y+7, r19	; 0x07
     eea:	2e 83       	std	Y+6, r18	; 0x06
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
     eee:	9f 81       	ldd	r25, Y+7	; 0x07
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	31 f0       	breq	.+12     	; 0xf00 <MDIO_voidSetPinValue+0x174>
     ef4:	2e 81       	ldd	r18, Y+6	; 0x06
     ef6:	3f 81       	ldd	r19, Y+7	; 0x07
     ef8:	21 30       	cpi	r18, 0x01	; 1
     efa:	31 05       	cpc	r19, r1
     efc:	b1 f0       	breq	.+44     	; 0xf2a <MDIO_voidSetPinValue+0x19e>
     efe:	60 c0       	rjmp	.+192    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_PINID);
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <MDIO_voidSetPinValue+0x192>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <MDIO_voidSetPinValue+0x18e>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	4b c0       	rjmp	.+150    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_PINID);
     f2a:	a5 e3       	ldi	r26, 0x35	; 53
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e5 e3       	ldi	r30, 0x35	; 53
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <MDIO_voidSetPinValue+0x1bc>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <MDIO_voidSetPinValue+0x1b8>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	37 c0       	rjmp	.+110    	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINValue)
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3d 83       	std	Y+5, r19	; 0x05
     f5a:	2c 83       	std	Y+4, r18	; 0x04
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	31 f0       	breq	.+12     	; 0xf70 <MDIO_voidSetPinValue+0x1e4>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	21 30       	cpi	r18, 0x01	; 1
     f6a:	31 05       	cpc	r19, r1
     f6c:	b1 f0       	breq	.+44     	; 0xf9a <MDIO_voidSetPinValue+0x20e>
     f6e:	28 c0       	rjmp	.+80     	; 0xfc0 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_PINID);
     f70:	a2 e3       	ldi	r26, 0x32	; 50
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e2 e3       	ldi	r30, 0x32	; 50
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <MDIO_voidSetPinValue+0x202>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <MDIO_voidSetPinValue+0x1fe>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	13 c0       	rjmp	.+38     	; 0xfc0 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_PINID);
     f9a:	a2 e3       	ldi	r26, 0x32	; 50
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e2 e3       	ldi	r30, 0x32	; 50
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <MDIO_voidSetPinValue+0x22c>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <MDIO_voidSetPinValue+0x228>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     fc0:	2d 96       	adiw	r28, 0x0d	; 13
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <MDIO_GetPinValue>:


DIO_VALUE_e MDIO_GetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <MDIO_GetPinValue+0x6>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <MDIO_GetPinValue+0x8>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PINValue;
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	84 30       	cpi	r24, 0x04	; 4
     fe8:	08 f0       	brcs	.+2      	; 0xfec <MDIO_GetPinValue+0x1a>
     fea:	6b c0       	rjmp	.+214    	; 0x10c2 <MDIO_GetPinValue+0xf0>
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 30       	cpi	r24, 0x08	; 8
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <MDIO_GetPinValue+0x22>
     ff2:	67 c0       	rjmp	.+206    	; 0x10c2 <MDIO_GetPinValue+0xf0>
	{
		switch (A_DIOPort)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3d 83       	std	Y+5, r19	; 0x05
     ffc:	2c 83       	std	Y+4, r18	; 0x04
     ffe:	4c 81       	ldd	r20, Y+4	; 0x04
    1000:	5d 81       	ldd	r21, Y+5	; 0x05
    1002:	41 30       	cpi	r20, 0x01	; 1
    1004:	51 05       	cpc	r21, r1
    1006:	41 f1       	breq	.+80     	; 0x1058 <MDIO_GetPinValue+0x86>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	91 05       	cpc	r25, r1
    1010:	34 f4       	brge	.+12     	; 0x101e <MDIO_GetPinValue+0x4c>
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	61 f0       	breq	.+24     	; 0x1034 <MDIO_GetPinValue+0x62>
    101c:	52 c0       	rjmp	.+164    	; 0x10c2 <MDIO_GetPinValue+0xf0>
    101e:	4c 81       	ldd	r20, Y+4	; 0x04
    1020:	5d 81       	ldd	r21, Y+5	; 0x05
    1022:	42 30       	cpi	r20, 0x02	; 2
    1024:	51 05       	cpc	r21, r1
    1026:	51 f1       	breq	.+84     	; 0x107c <MDIO_GetPinValue+0xaa>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	91 05       	cpc	r25, r1
    1030:	b9 f1       	breq	.+110    	; 0x10a0 <MDIO_GetPinValue+0xce>
    1032:	47 c0       	rjmp	.+142    	; 0x10c2 <MDIO_GetPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PINValue = GET_BIT(PINA_REG,A_PINID);
    1034:	e9 e3       	ldi	r30, 0x39	; 57
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <MDIO_GetPinValue+0x7a>
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <MDIO_GetPinValue+0x76>
    1050:	ca 01       	movw	r24, r20
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	35 c0       	rjmp	.+106    	; 0x10c2 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PINValue = GET_BIT(PINB_REG,A_PINID);
    1058:	e6 e3       	ldi	r30, 0x36	; 54
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <MDIO_GetPinValue+0x9e>
    106c:	55 95       	asr	r21
    106e:	47 95       	ror	r20
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <MDIO_GetPinValue+0x9a>
    1074:	ca 01       	movw	r24, r20
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	23 c0       	rjmp	.+70     	; 0x10c2 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PINValue = GET_BIT(PINC_REG,A_PINID);
    107c:	e3 e3       	ldi	r30, 0x33	; 51
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a9 01       	movw	r20, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <MDIO_GetPinValue+0xc2>
    1090:	55 95       	asr	r21
    1092:	47 95       	ror	r20
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <MDIO_GetPinValue+0xbe>
    1098:	ca 01       	movw	r24, r20
    109a:	81 70       	andi	r24, 0x01	; 1
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PINValue = GET_BIT(PIND_REG,A_PINID);
    10a0:	e0 e3       	ldi	r30, 0x30	; 48
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <MDIO_GetPinValue+0xe6>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <MDIO_GetPinValue+0xe2>
    10bc:	ca 01       	movw	r24, r20
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
		}
	}
	return local_PINValue;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <MDIO_voidTogglePinValue+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <MDIO_voidTogglePinValue+0x8>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <MDIO_voidTogglePinValue+0x18>
    10ea:	72 c0       	rjmp	.+228    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <MDIO_voidTogglePinValue+0x20>
    10f2:	6e c0       	rjmp	.+220    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_DIOPort)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3c 83       	std	Y+4, r19	; 0x04
    10fc:	2b 83       	std	Y+3, r18	; 0x03
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	49 f1       	breq	.+82     	; 0x115a <MDIO_voidTogglePinValue+0x86>
    1108:	2b 81       	ldd	r18, Y+3	; 0x03
    110a:	3c 81       	ldd	r19, Y+4	; 0x04
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	2c f4       	brge	.+10     	; 0x111c <MDIO_voidTogglePinValue+0x48>
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	61 f0       	breq	.+24     	; 0x1132 <MDIO_voidTogglePinValue+0x5e>
    111a:	5a c0       	rjmp	.+180    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	3c 81       	ldd	r19, Y+4	; 0x04
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	71 f1       	breq	.+92     	; 0x1182 <MDIO_voidTogglePinValue+0xae>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	e9 f1       	breq	.+122    	; 0x11aa <MDIO_voidTogglePinValue+0xd6>
    1130:	4f c0       	rjmp	.+158    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_PINID);
    1132:	ab e3       	ldi	r26, 0x3B	; 59
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <MDIO_voidTogglePinValue+0x7c>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <MDIO_voidTogglePinValue+0x78>
    1154:	84 27       	eor	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	3b c0       	rjmp	.+118    	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_PINID);
    115a:	a8 e3       	ldi	r26, 0x38	; 56
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e8 e3       	ldi	r30, 0x38	; 56
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <MDIO_voidTogglePinValue+0xa4>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <MDIO_voidTogglePinValue+0xa0>
    117c:	84 27       	eor	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	27 c0       	rjmp	.+78     	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_PINID);
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <MDIO_voidTogglePinValue+0xcc>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <MDIO_voidTogglePinValue+0xc8>
    11a4:	84 27       	eor	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	13 c0       	rjmp	.+38     	; 0x11d0 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_PINID);
    11aa:	a2 e3       	ldi	r26, 0x32	; 50
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e2 e3       	ldi	r30, 0x32	; 50
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <MDIO_voidTogglePinValue+0xf4>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <MDIO_voidTogglePinValue+0xf0>
    11cc:	84 27       	eor	r24, r20
    11ce:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection (DIO_PORT_e A_DIOPort, u8 A_u8Direction)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <MDIO_voidSetPortDirection+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <MDIO_voidSetPortDirection+0x8>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	90 f5       	brcc	.+100    	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_DIOPort)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3c 83       	std	Y+4, r19	; 0x04
    11fc:	2b 83       	std	Y+3, r18	; 0x03
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	d1 f0       	breq	.+52     	; 0x123c <MDIO_voidSetPortDirection+0x5e>
    1208:	2b 81       	ldd	r18, Y+3	; 0x03
    120a:	3c 81       	ldd	r19, Y+4	; 0x04
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	2c f4       	brge	.+10     	; 0x121c <MDIO_voidSetPortDirection+0x3e>
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	61 f0       	breq	.+24     	; 0x1232 <MDIO_voidSetPortDirection+0x54>
    121a:	1e c0       	rjmp	.+60     	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	81 f0       	breq	.+32     	; 0x1246 <MDIO_voidSetPortDirection+0x68>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	81 f0       	breq	.+32     	; 0x1250 <MDIO_voidSetPortDirection+0x72>
    1230:	13 c0       	rjmp	.+38     	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8Direction;
    1232:	ea e3       	ldi	r30, 0x3A	; 58
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 83       	st	Z, r24
    123a:	0e c0       	rjmp	.+28     	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8Direction;
    123c:	e7 e3       	ldi	r30, 0x37	; 55
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	80 83       	st	Z, r24
    1244:	09 c0       	rjmp	.+18     	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8Direction;
    1246:	e4 e3       	ldi	r30, 0x34	; 52
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 83       	st	Z, r24
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8Direction;
    1250:	e1 e3       	ldi	r30, 0x31	; 49
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_DIOPort, u8 A_u8Value)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <MDIO_voidSetPortValue+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <MDIO_voidSetPortValue+0x8>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	90 f5       	brcc	.+100    	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_DIOPort)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3c 83       	std	Y+4, r19	; 0x04
    1284:	2b 83       	std	Y+3, r18	; 0x03
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	d1 f0       	breq	.+52     	; 0x12c4 <MDIO_voidSetPortValue+0x5e>
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <MDIO_voidSetPortValue+0x3e>
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	61 f0       	breq	.+24     	; 0x12ba <MDIO_voidSetPortValue+0x54>
    12a2:	1e c0       	rjmp	.+60     	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	81 f0       	breq	.+32     	; 0x12ce <MDIO_voidSetPortValue+0x68>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <MDIO_voidSetPortValue+0x72>
    12b8:	13 c0       	rjmp	.+38     	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8Value;
    12ba:	eb e3       	ldi	r30, 0x3B	; 59
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	80 83       	st	Z, r24
    12c2:	0e c0       	rjmp	.+28     	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8Value;
    12c4:	e8 e3       	ldi	r30, 0x38	; 56
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 83       	st	Z, r24
    12cc:	09 c0       	rjmp	.+18     	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8Value;
    12ce:	e5 e3       	ldi	r30, 0x35	; 53
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8Value;
    12d8:	e2 e3       	ldi	r30, 0x32	; 50
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <MDIO_voidInit>:



void MDIO_voidInit()
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG=CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION
    12f6:	ea e3       	ldi	r30, 0x3A	; 58
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8c ef       	ldi	r24, 0xFC	; 252
    12fc:	80 83       	st	Z, r24
					 ,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG=CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION
    12fe:	e7 e3       	ldi	r30, 0x37	; 55
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	89 e7       	ldi	r24, 0x79	; 121
    1304:	80 83       	st	Z, r24
					 ,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG=CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION
    1306:	e4 e3       	ldi	r30, 0x34	; 52
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	80 83       	st	Z, r24
					 ,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG=CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION
    130e:	e1 e3       	ldi	r30, 0x31	; 49
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	82 ed       	ldi	r24, 0xD2	; 210
    1314:	80 83       	st	Z, r24
					 ,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);


	PORTA_REG=CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	80 83       	st	Z, r24
					 ,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG=CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	10 82       	st	Z, r1
					 ,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG=CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE
    1324:	e5 e3       	ldi	r30, 0x35	; 53
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	10 82       	st	Z, r1
					 ,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG=CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE
    132a:	e2 e3       	ldi	r30, 0x32	; 50
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8c e0       	ldi	r24, 0x0C	; 12
    1330:	80 83       	st	Z, r24
					 ,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <HLCD_voidSendCommand>:

#define F_CPU 8000000UL


void HLCD_voidSendCommand (u8 A_u8Command)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	2f 97       	sbiw	r28, 0x0f	; 15
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	8f 87       	std	Y+15, r24	; 0x0f
	// Send Command --> (RS --> RESET), (RW --> RESET)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_RESET);
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	67 e0       	ldi	r22, 0x07	; 7
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	66 e0       	ldi	r22, 0x06	; 6
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>

	// Send Data
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Command);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	6f 85       	ldd	r22, Y+15	; 0x0f
    1366:	0e 94 33 09 	call	0x1266	; 0x1266 <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_SET);
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	65 e0       	ldi	r22, 0x05	; 5
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a0 e0       	ldi	r26, 0x00	; 0
    137a:	b0 e4       	ldi	r27, 0x40	; 64
    137c:	8b 87       	std	Y+11, r24	; 0x0b
    137e:	9c 87       	std	Y+12, r25	; 0x0c
    1380:	ad 87       	std	Y+13, r26	; 0x0d
    1382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1384:	6b 85       	ldd	r22, Y+11	; 0x0b
    1386:	7c 85       	ldd	r23, Y+12	; 0x0c
    1388:	8d 85       	ldd	r24, Y+13	; 0x0d
    138a:	9e 85       	ldd	r25, Y+14	; 0x0e
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	4a ef       	ldi	r20, 0xFA	; 250
    1392:	54 e4       	ldi	r21, 0x44	; 68
    1394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	8f 83       	std	Y+7, r24	; 0x07
    139e:	98 87       	std	Y+8, r25	; 0x08
    13a0:	a9 87       	std	Y+9, r26	; 0x09
    13a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e8       	ldi	r20, 0x80	; 128
    13b2:	5f e3       	ldi	r21, 0x3F	; 63
    13b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	3f c0       	rjmp	.+126    	; 0x1444 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
    13c8:	78 85       	ldd	r23, Y+8	; 0x08
    13ca:	89 85       	ldd	r24, Y+9	; 0x09
    13cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	3f ef       	ldi	r19, 0xFF	; 255
    13d2:	4f e7       	ldi	r20, 0x7F	; 127
    13d4:	57 e4       	ldi	r21, 0x47	; 71
    13d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13da:	18 16       	cp	r1, r24
    13dc:	4c f5       	brge	.+82     	; 0x1430 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13de:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e2       	ldi	r20, 0x20	; 32
    13ec:	51 e4       	ldi	r21, 0x41	; 65
    13ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	0f c0       	rjmp	.+30     	; 0x1426 <HLCD_voidSendCommand+0xee>
    1408:	88 ec       	ldi	r24, 0xC8	; 200
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <HLCD_voidSendCommand+0xdc>
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	69 f7       	brne	.-38     	; 0x1408 <HLCD_voidSendCommand+0xd0>
    142e:	14 c0       	rjmp	.+40     	; 0x1458 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <HLCD_voidSendCommand+0x118>
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_RESET);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	65 e0       	ldi	r22, 0x05	; 5
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
}
    1462:	2f 96       	adiw	r28, 0x0f	; 15
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <HLCD_voidSendData>:

void HLCD_voidSendData (u8 A_u8Data)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	2f 97       	sbiw	r28, 0x0f	; 15
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	8f 87       	std	Y+15, r24	; 0x0f
	// Send Command --> (RS --> SET), (RW --> RESET)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_SET);
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	67 e0       	ldi	r22, 0x07	; 7
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	66 e0       	ldi	r22, 0x06	; 6
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>

	// Send Data
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Data);
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    14a2:	0e 94 33 09 	call	0x1266	; 0x1266 <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_SET);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	65 e0       	ldi	r22, 0x05	; 5
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e4       	ldi	r27, 0x40	; 64
    14b8:	8b 87       	std	Y+11, r24	; 0x0b
    14ba:	9c 87       	std	Y+12, r25	; 0x0c
    14bc:	ad 87       	std	Y+13, r26	; 0x0d
    14be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a ef       	ldi	r20, 0xFA	; 250
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8f 83       	std	Y+7, r24	; 0x07
    14da:	98 87       	std	Y+8, r25	; 0x08
    14dc:	a9 87       	std	Y+9, r26	; 0x09
    14de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1502:	6f 81       	ldd	r22, Y+7	; 0x07
    1504:	78 85       	ldd	r23, Y+8	; 0x08
    1506:	89 85       	ldd	r24, Y+9	; 0x09
    1508:	9a 85       	ldd	r25, Y+10	; 0x0a
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	6b 85       	ldd	r22, Y+11	; 0x0b
    151c:	7c 85       	ldd	r23, Y+12	; 0x0c
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <HLCD_voidSendData+0xee>
    1544:	88 ec       	ldi	r24, 0xC8	; 200
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <HLCD_voidSendData+0xdc>
    1554:	9c 83       	std	Y+4, r25	; 0x04
    1556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <HLCD_voidSendData+0xd0>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	6f 81       	ldd	r22, Y+7	; 0x07
    156e:	78 85       	ldd	r23, Y+8	; 0x08
    1570:	89 85       	ldd	r24, Y+9	; 0x09
    1572:	9a 85       	ldd	r25, Y+10	; 0x0a
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <HLCD_voidSendData+0x118>
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_RESET);
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	65 e0       	ldi	r22, 0x05	; 5
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
}
    159e:	2f 96       	adiw	r28, 0x0f	; 15
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	c6 54       	subi	r28, 0x46	; 70
    15be:	d0 40       	sbci	r29, 0x00	; 0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	fe 01       	movw	r30, r28
    15cc:	ed 5b       	subi	r30, 0xBD	; 189
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e2       	ldi	r26, 0x20	; 32
    15d6:	b2 e4       	ldi	r27, 0x42	; 66
    15d8:	80 83       	st	Z, r24
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	a2 83       	std	Z+2, r26	; 0x02
    15de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e0:	8e 01       	movw	r16, r28
    15e2:	01 5c       	subi	r16, 0xC1	; 193
    15e4:	1f 4f       	sbci	r17, 0xFF	; 255
    15e6:	fe 01       	movw	r30, r28
    15e8:	ed 5b       	subi	r30, 0xBD	; 189
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	4a ef       	ldi	r20, 0xFA	; 250
    15fa:	54 e4       	ldi	r21, 0x44	; 68
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	f8 01       	movw	r30, r16
    1606:	80 83       	st	Z, r24
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	a2 83       	std	Z+2, r26	; 0x02
    160c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    160e:	fe 01       	movw	r30, r28
    1610:	ff 96       	adiw	r30, 0x3f	; 63
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	2c f4       	brge	.+10     	; 0x1634 <HLCD_voidInit+0x84>
		__ticks = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9e af       	std	Y+62, r25	; 0x3e
    1630:	8d af       	std	Y+61, r24	; 0x3d
    1632:	46 c0       	rjmp	.+140    	; 0x16c0 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    1634:	fe 01       	movw	r30, r28
    1636:	ff 96       	adiw	r30, 0x3f	; 63
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	64 f5       	brge	.+88     	; 0x16a8 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	fe 01       	movw	r30, r28
    1652:	ed 5b       	subi	r30, 0xBD	; 189
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e2       	ldi	r20, 0x20	; 32
    1664:	51 e4       	ldi	r21, 0x41	; 65
    1666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	9e af       	std	Y+62, r25	; 0x3e
    167c:	8d af       	std	Y+61, r24	; 0x3d
    167e:	0f c0       	rjmp	.+30     	; 0x169e <HLCD_voidInit+0xee>
    1680:	88 ec       	ldi	r24, 0xC8	; 200
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9c af       	std	Y+60, r25	; 0x3c
    1686:	8b af       	std	Y+59, r24	; 0x3b
    1688:	8b ad       	ldd	r24, Y+59	; 0x3b
    168a:	9c ad       	ldd	r25, Y+60	; 0x3c
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <HLCD_voidInit+0xdc>
    1690:	9c af       	std	Y+60, r25	; 0x3c
    1692:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1694:	8d ad       	ldd	r24, Y+61	; 0x3d
    1696:	9e ad       	ldd	r25, Y+62	; 0x3e
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	9e af       	std	Y+62, r25	; 0x3e
    169c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169e:	8d ad       	ldd	r24, Y+61	; 0x3d
    16a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	69 f7       	brne	.-38     	; 0x1680 <HLCD_voidInit+0xd0>
    16a6:	16 c0       	rjmp	.+44     	; 0x16d4 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a8:	fe 01       	movw	r30, r28
    16aa:	ff 96       	adiw	r30, 0x3f	; 63
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9e af       	std	Y+62, r25	; 0x3e
    16be:	8d af       	std	Y+61, r24	; 0x3d
    16c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16c4:	9a af       	std	Y+58, r25	; 0x3a
    16c6:	89 af       	std	Y+57, r24	; 0x39
    16c8:	89 ad       	ldd	r24, Y+57	; 0x39
    16ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <HLCD_voidInit+0x11c>
    16d0:	9a af       	std	Y+58, r25	; 0x3a
    16d2:	89 af       	std	Y+57, r24	; 0x39
	// Wait for more than 30 ms after VDD rises to 4.5V
	_delay_ms(40);

	// Function Set Command
	HLCD_voidSendCommand(FUNCTION_SET);
    16d4:	88 e3       	ldi	r24, 0x38	; 56
    16d6:	0e 94 9c 09 	call	0x1338	; 0x1338 <HLCD_voidSendCommand>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e8       	ldi	r26, 0x80	; 128
    16e0:	bf e3       	ldi	r27, 0x3F	; 63
    16e2:	8d ab       	std	Y+53, r24	; 0x35
    16e4:	9e ab       	std	Y+54, r25	; 0x36
    16e6:	af ab       	std	Y+55, r26	; 0x37
    16e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6d a9       	ldd	r22, Y+53	; 0x35
    16ec:	7e a9       	ldd	r23, Y+54	; 0x36
    16ee:	8f a9       	ldd	r24, Y+55	; 0x37
    16f0:	98 ad       	ldd	r25, Y+56	; 0x38
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	89 ab       	std	Y+49, r24	; 0x31
    1704:	9a ab       	std	Y+50, r25	; 0x32
    1706:	ab ab       	std	Y+51, r26	; 0x33
    1708:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    170a:	69 a9       	ldd	r22, Y+49	; 0x31
    170c:	7a a9       	ldd	r23, Y+50	; 0x32
    170e:	8b a9       	ldd	r24, Y+51	; 0x33
    1710:	9c a9       	ldd	r25, Y+52	; 0x34
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <HLCD_voidInit+0x17c>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	98 ab       	std	Y+48, r25	; 0x30
    1728:	8f a7       	std	Y+47, r24	; 0x2f
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    172c:	69 a9       	ldd	r22, Y+49	; 0x31
    172e:	7a a9       	ldd	r23, Y+50	; 0x32
    1730:	8b a9       	ldd	r24, Y+51	; 0x33
    1732:	9c a9       	ldd	r25, Y+52	; 0x34
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6d a9       	ldd	r22, Y+53	; 0x35
    1746:	7e a9       	ldd	r23, Y+54	; 0x36
    1748:	8f a9       	ldd	r24, Y+55	; 0x37
    174a:	98 ad       	ldd	r25, Y+56	; 0x38
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
    176c:	0f c0       	rjmp	.+30     	; 0x178c <HLCD_voidInit+0x1dc>
    176e:	88 ec       	ldi	r24, 0xC8	; 200
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9e a7       	std	Y+46, r25	; 0x2e
    1774:	8d a7       	std	Y+45, r24	; 0x2d
    1776:	8d a5       	ldd	r24, Y+45	; 0x2d
    1778:	9e a5       	ldd	r25, Y+46	; 0x2e
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <HLCD_voidInit+0x1ca>
    177e:	9e a7       	std	Y+46, r25	; 0x2e
    1780:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8f a5       	ldd	r24, Y+47	; 0x2f
    1784:	98 a9       	ldd	r25, Y+48	; 0x30
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	98 ab       	std	Y+48, r25	; 0x30
    178a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8f a5       	ldd	r24, Y+47	; 0x2f
    178e:	98 a9       	ldd	r25, Y+48	; 0x30
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <HLCD_voidInit+0x1be>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	69 a9       	ldd	r22, Y+49	; 0x31
    1798:	7a a9       	ldd	r23, Y+50	; 0x32
    179a:	8b a9       	ldd	r24, Y+51	; 0x33
    179c:	9c a9       	ldd	r25, Y+52	; 0x34
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	98 ab       	std	Y+48, r25	; 0x30
    17a8:	8f a7       	std	Y+47, r24	; 0x2f
    17aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ac:	98 a9       	ldd	r25, Y+48	; 0x30
    17ae:	9c a7       	std	Y+44, r25	; 0x2c
    17b0:	8b a7       	std	Y+43, r24	; 0x2b
    17b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <HLCD_voidInit+0x206>
    17ba:	9c a7       	std	Y+44, r25	; 0x2c
    17bc:	8b a7       	std	Y+43, r24	; 0x2b
	// Wait for more than 39 us
	_delay_ms(1);

	// Display ON/OFF Control Command
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    17be:	8e e0       	ldi	r24, 0x0E	; 14
    17c0:	0e 94 9c 09 	call	0x1338	; 0x1338 <HLCD_voidSendCommand>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e8       	ldi	r26, 0x80	; 128
    17ca:	bf e3       	ldi	r27, 0x3F	; 63
    17cc:	8f a3       	std	Y+39, r24	; 0x27
    17ce:	98 a7       	std	Y+40, r25	; 0x28
    17d0:	a9 a7       	std	Y+41, r26	; 0x29
    17d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	6f a1       	ldd	r22, Y+39	; 0x27
    17d6:	78 a5       	ldd	r23, Y+40	; 0x28
    17d8:	89 a5       	ldd	r24, Y+41	; 0x29
    17da:	9a a5       	ldd	r25, Y+42	; 0x2a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a ef       	ldi	r20, 0xFA	; 250
    17e2:	54 e4       	ldi	r21, 0x44	; 68
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8b a3       	std	Y+35, r24	; 0x23
    17ee:	9c a3       	std	Y+36, r25	; 0x24
    17f0:	ad a3       	std	Y+37, r26	; 0x25
    17f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17f4:	6b a1       	ldd	r22, Y+35	; 0x23
    17f6:	7c a1       	ldd	r23, Y+36	; 0x24
    17f8:	8d a1       	ldd	r24, Y+37	; 0x25
    17fa:	9e a1       	ldd	r25, Y+38	; 0x26
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <HLCD_voidInit+0x266>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9a a3       	std	Y+34, r25	; 0x22
    1812:	89 a3       	std	Y+33, r24	; 0x21
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1816:	6b a1       	ldd	r22, Y+35	; 0x23
    1818:	7c a1       	ldd	r23, Y+36	; 0x24
    181a:	8d a1       	ldd	r24, Y+37	; 0x25
    181c:	9e a1       	ldd	r25, Y+38	; 0x26
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	6f a1       	ldd	r22, Y+39	; 0x27
    1830:	78 a5       	ldd	r23, Y+40	; 0x28
    1832:	89 a5       	ldd	r24, Y+41	; 0x29
    1834:	9a a5       	ldd	r25, Y+42	; 0x2a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9a a3       	std	Y+34, r25	; 0x22
    1854:	89 a3       	std	Y+33, r24	; 0x21
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <HLCD_voidInit+0x2c6>
    1858:	88 ec       	ldi	r24, 0xC8	; 200
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	98 a3       	std	Y+32, r25	; 0x20
    185e:	8f 8f       	std	Y+31, r24	; 0x1f
    1860:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1862:	98 a1       	ldd	r25, Y+32	; 0x20
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <HLCD_voidInit+0x2b4>
    1868:	98 a3       	std	Y+32, r25	; 0x20
    186a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	89 a1       	ldd	r24, Y+33	; 0x21
    186e:	9a a1       	ldd	r25, Y+34	; 0x22
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9a a3       	std	Y+34, r25	; 0x22
    1874:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	89 a1       	ldd	r24, Y+33	; 0x21
    1878:	9a a1       	ldd	r25, Y+34	; 0x22
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f7       	brne	.-38     	; 0x1858 <HLCD_voidInit+0x2a8>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	6b a1       	ldd	r22, Y+35	; 0x23
    1882:	7c a1       	ldd	r23, Y+36	; 0x24
    1884:	8d a1       	ldd	r24, Y+37	; 0x25
    1886:	9e a1       	ldd	r25, Y+38	; 0x26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9a a3       	std	Y+34, r25	; 0x22
    1892:	89 a3       	std	Y+33, r24	; 0x21
    1894:	89 a1       	ldd	r24, Y+33	; 0x21
    1896:	9a a1       	ldd	r25, Y+34	; 0x22
    1898:	9e 8f       	std	Y+30, r25	; 0x1e
    189a:	8d 8f       	std	Y+29, r24	; 0x1d
    189c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    189e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <HLCD_voidInit+0x2f0>
    18a4:	9e 8f       	std	Y+30, r25	; 0x1e
    18a6:	8d 8f       	std	Y+29, r24	; 0x1d
	// Wait for more than 39 us
	_delay_ms(1);

	// Display Clear Command
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 9c 09 	call	0x1338	; 0x1338 <HLCD_voidSendCommand>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
    18b4:	b0 e4       	ldi	r27, 0x40	; 64
    18b6:	89 8f       	std	Y+25, r24	; 0x19
    18b8:	9a 8f       	std	Y+26, r25	; 0x1a
    18ba:	ab 8f       	std	Y+27, r26	; 0x1b
    18bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	69 8d       	ldd	r22, Y+25	; 0x19
    18c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a ef       	ldi	r20, 0xFA	; 250
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8d 8b       	std	Y+21, r24	; 0x15
    18d8:	9e 8b       	std	Y+22, r25	; 0x16
    18da:	af 8b       	std	Y+23, r26	; 0x17
    18dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18de:	6d 89       	ldd	r22, Y+21	; 0x15
    18e0:	7e 89       	ldd	r23, Y+22	; 0x16
    18e2:	8f 89       	ldd	r24, Y+23	; 0x17
    18e4:	98 8d       	ldd	r25, Y+24	; 0x18
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <HLCD_voidInit+0x350>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9c 8b       	std	Y+20, r25	; 0x14
    18fc:	8b 8b       	std	Y+19, r24	; 0x13
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1900:	6d 89       	ldd	r22, Y+21	; 0x15
    1902:	7e 89       	ldd	r23, Y+22	; 0x16
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	69 8d       	ldd	r22, Y+25	; 0x19
    191a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    191c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9c 8b       	std	Y+20, r25	; 0x14
    193e:	8b 8b       	std	Y+19, r24	; 0x13
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <HLCD_voidInit+0x3b0>
    1942:	88 ec       	ldi	r24, 0xC8	; 200
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9a 8b       	std	Y+18, r25	; 0x12
    1948:	89 8b       	std	Y+17, r24	; 0x11
    194a:	89 89       	ldd	r24, Y+17	; 0x11
    194c:	9a 89       	ldd	r25, Y+18	; 0x12
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <HLCD_voidInit+0x39e>
    1952:	9a 8b       	std	Y+18, r25	; 0x12
    1954:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	9c 8b       	std	Y+20, r25	; 0x14
    195e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	8b 89       	ldd	r24, Y+19	; 0x13
    1962:	9c 89       	ldd	r25, Y+20	; 0x14
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f7       	brne	.-38     	; 0x1942 <HLCD_voidInit+0x392>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196a:	6d 89       	ldd	r22, Y+21	; 0x15
    196c:	7e 89       	ldd	r23, Y+22	; 0x16
    196e:	8f 89       	ldd	r24, Y+23	; 0x17
    1970:	98 8d       	ldd	r25, Y+24	; 0x18
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	9c 89       	ldd	r25, Y+20	; 0x14
    1982:	98 8b       	std	Y+16, r25	; 0x10
    1984:	8f 87       	std	Y+15, r24	; 0x0f
    1986:	8f 85       	ldd	r24, Y+15	; 0x0f
    1988:	98 89       	ldd	r25, Y+16	; 0x10
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <HLCD_voidInit+0x3da>
    198e:	98 8b       	std	Y+16, r25	; 0x10
    1990:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait for more than 1.53 ms
	_delay_ms(2);

	// Entry Mode Set Command
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1992:	86 e0       	ldi	r24, 0x06	; 6
    1994:	0e 94 9c 09 	call	0x1338	; 0x1338 <HLCD_voidSendCommand>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	a0 e8       	ldi	r26, 0x80	; 128
    199e:	bf e3       	ldi	r27, 0x3F	; 63
    19a0:	8b 87       	std	Y+11, r24	; 0x0b
    19a2:	9c 87       	std	Y+12, r25	; 0x0c
    19a4:	ad 87       	std	Y+13, r26	; 0x0d
    19a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4a ef       	ldi	r20, 0xFA	; 250
    19b6:	54 e4       	ldi	r21, 0x44	; 68
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	8f 83       	std	Y+7, r24	; 0x07
    19c2:	98 87       	std	Y+8, r25	; 0x08
    19c4:	a9 87       	std	Y+9, r26	; 0x09
    19c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e8       	ldi	r20, 0x80	; 128
    19d6:	5f e3       	ldi	r21, 0x3F	; 63
    19d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19dc:	88 23       	and	r24, r24
    19de:	2c f4       	brge	.+10     	; 0x19ea <HLCD_voidInit+0x43a>
		__ticks = 1;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	3f c0       	rjmp	.+126    	; 0x1a68 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	3f ef       	ldi	r19, 0xFF	; 255
    19f6:	4f e7       	ldi	r20, 0x7F	; 127
    19f8:	57 e4       	ldi	r21, 0x47	; 71
    19fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19fe:	18 16       	cp	r1, r24
    1a00:	4c f5       	brge	.+82     	; 0x1a54 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e2       	ldi	r20, 0x20	; 32
    1a10:	51 e4       	ldi	r21, 0x41	; 65
    1a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <HLCD_voidInit+0x49a>
    1a2c:	88 ec       	ldi	r24, 0xC8	; 200
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9c 83       	std	Y+4, r25	; 0x04
    1a32:	8b 83       	std	Y+3, r24	; 0x03
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <HLCD_voidInit+0x488>
    1a3c:	9c 83       	std	Y+4, r25	; 0x04
    1a3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	69 f7       	brne	.-38     	; 0x1a2c <HLCD_voidInit+0x47c>
    1a52:	14 c0       	rjmp	.+40     	; 0x1a7c <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a54:	6f 81       	ldd	r22, Y+7	; 0x07
    1a56:	78 85       	ldd	r23, Y+8	; 0x08
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <HLCD_voidInit+0x4c4>
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
	// Wait for more than 39 us
	_delay_ms(1);
}
    1a7c:	ca 5b       	subi	r28, 0xBA	; 186
    1a7e:	df 4f       	sbci	r29, 0xFF	; 255
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	08 95       	ret

00001a94 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
	// Display Clear Command
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	0e 94 9c 09 	call	0x1338	; 0x1338 <HLCD_voidSendCommand>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e0       	ldi	r26, 0x00	; 0
    1ab4:	b0 e4       	ldi	r27, 0x40	; 64
    1ab6:	8b 87       	std	Y+11, r24	; 0x0b
    1ab8:	9c 87       	std	Y+12, r25	; 0x0c
    1aba:	ad 87       	std	Y+13, r26	; 0x0d
    1abc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8f 83       	std	Y+7, r24	; 0x07
    1ad8:	98 87       	std	Y+8, r25	; 0x08
    1ada:	a9 87       	std	Y+9, r26	; 0x09
    1adc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1b00:	6f 81       	ldd	r22, Y+7	; 0x07
    1b02:	78 85       	ldd	r23, Y+8	; 0x08
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <HLCD_voidClearDisplay+0xcc>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	8b 83       	std	Y+3, r24	; 0x03
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <HLCD_voidClearDisplay+0xba>
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <HLCD_voidClearDisplay+0xae>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <HLCD_voidClearDisplay+0xf6>
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
	// Wait for more than 1.53 ms
	_delay_ms(2);
}
    1b92:	2e 96       	adiw	r28, 0x0e	; 14
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <HLCD_voidSendString>:


void HLCD_voidSendString (u8 *A_u8PtrToString)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <HLCD_voidSendString+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	0b c0       	rjmp	.+22     	; 0x1bca <HLCD_voidSendString+0x26>
	while (*A_u8PtrToString > 0)
	{
		HLCD_voidSendData(*A_u8PtrToString++);
    1bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb8:	20 81       	ld	r18, Z
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	82 2f       	mov	r24, r18
    1bc6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <HLCD_voidSendData>
}


void HLCD_voidSendString (u8 *A_u8PtrToString)
{
	while (*A_u8PtrToString > 0)
    1bca:	e9 81       	ldd	r30, Y+1	; 0x01
    1bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bce:	80 81       	ld	r24, Z
    1bd0:	88 23       	and	r24, r24
    1bd2:	81 f7       	brne	.-32     	; 0x1bb4 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*A_u8PtrToString++);
	}
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <HLCD_voidGoToPos>:



void HLCD_voidGoToPos (LCD_ROW_e A_LCDRow, LCD_COL_e A_LCDCol)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <HLCD_voidGoToPos+0x6>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <HLCD_voidGoToPos+0x8>
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_LCDRow)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	3c 83       	std	Y+4, r19	; 0x04
    1bf6:	2b 83       	std	Y+3, r18	; 0x03
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	91 05       	cpc	r25, r1
    1c00:	31 f0       	breq	.+12     	; 0x1c0e <HLCD_voidGoToPos+0x30>
    1c02:	2b 81       	ldd	r18, Y+3	; 0x03
    1c04:	3c 81       	ldd	r19, Y+4	; 0x04
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	31 f0       	breq	.+12     	; 0x1c18 <HLCD_voidGoToPos+0x3a>
    1c0c:	09 c0       	rjmp	.+18     	; 0x1c20 <HLCD_voidGoToPos+0x42>
	{
	case ROW1:
		HLCD_voidSendCommand(ROW1_ADDRESS + A_LCDCol);
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	81 58       	subi	r24, 0x81	; 129
    1c12:	0e 94 9c 09 	call	0x1338	; 0x1338 <HLCD_voidSendCommand>
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <HLCD_voidGoToPos+0x42>
		break;

	case ROW2:
		HLCD_voidSendCommand(ROW2_ADDRESS + A_LCDCol);
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	81 54       	subi	r24, 0x41	; 65
    1c1c:	0e 94 9c 09 	call	0x1338	; 0x1338 <HLCD_voidSendCommand>
		break;
	default: break;
	}
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <LCD_VOID_WRITE_MESSAGE>:

void LCD_VOID_WRITE_MESSAGE(u8 *message, u8 ROW, u8 COL)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <LCD_VOID_WRITE_MESSAGE+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <LCD_VOID_WRITE_MESSAGE+0x8>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	6b 83       	std	Y+3, r22	; 0x03
    1c40:	4c 83       	std	Y+4, r20	; 0x04
	HLCD_voidClearDisplay();
    1c42:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <HLCD_voidClearDisplay>
	HLCD_voidGoToPos(ROW, COL);
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	6c 81       	ldd	r22, Y+4	; 0x04
    1c4a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <HLCD_voidGoToPos>
	HLCD_voidSendString(message);
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <HLCD_voidSendString>
}
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <TURNON_LIGHTING_LEDS>:


//Lighting LEDS

void TURNON_LIGHTING_LEDS(void)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(LEDS_PORT, YELLOW_LEDS, DIO_SET);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
}
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <TURNOFF_LIGHTING_LEDS>:

void TURNOFF_LIGHTING_LEDS(void)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(LEDS_PORT, YELLOW_LEDS, DIO_RESET);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	64 e0       	ldi	r22, 0x04	; 4
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <TOGGLE_LIGHTING_LEDS>:



void TOGGLE_LIGHTING_LEDS(void)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidTogglePinValue(LEDS_PORT, YELLOW_LEDS);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	64 e0       	ldi	r22, 0x04	; 4
    1ca0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MDIO_voidTogglePinValue>
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <TURNON_FIRING_LEDS>:


//Firing leds

void TURNON_FIRING_LEDS(void)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(LEDS_PORT,RED_LEDS, DIO_SET);
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	62 e0       	ldi	r22, 0x02	; 2
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>

}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <TURNOFF_FIRING_LEDS>:

void TURNOFF_FIRING_LEDS(void)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(LEDS_PORT,RED_LEDS, DIO_RESET);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	62 e0       	ldi	r22, 0x02	; 2
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <TOGGLE_FIRING_LEDS>:

void TOGGLE_FIRING_LEDS(void)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidTogglePinValue(LEDS_PORT, RED_LEDS);
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	62 e0       	ldi	r22, 0x02	; 2
    1ce6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MDIO_voidTogglePinValue>
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <TURNON_LOCK_LEDS>:


//Lock leds

void TURNON_LOCK_LEDS(void)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(LEDS_PORT,GREEN_LEDS, DIO_SET);
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	63 e0       	ldi	r22, 0x03	; 3
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>

}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <TURNOFF_LOCK_LEDS>:

void TURNOFF_LOCK_LEDS(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(LEDS_PORT,GREEN_LEDS, DIO_RESET);
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	63 e0       	ldi	r22, 0x03	; 3
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <STEPPER_Rotate_CW_Full_Step>:
#include "../Include/HAL/LEDS/LEDS_CFG.h"
#include "../Include/HAL/LCD/LCD_interface.h"

/*CLOCKWISE*/
void STEPPER_Rotate_CW_Full_Step(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	e8 97       	sbiw	r28, 0x38	; 56
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_SET);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	63 e0       	ldi	r22, 0x03	; 3
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	64 e0       	ldi	r22, 0x04	; 4
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	65 e0       	ldi	r22, 0x05	; 5
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	66 e0       	ldi	r22, 0x06	; 6
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e4       	ldi	r27, 0x40	; 64
    1d64:	8d ab       	std	Y+53, r24	; 0x35
    1d66:	9e ab       	std	Y+54, r25	; 0x36
    1d68:	af ab       	std	Y+55, r26	; 0x37
    1d6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d70:	8f a9       	ldd	r24, Y+55	; 0x37
    1d72:	98 ad       	ldd	r25, Y+56	; 0x38
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a ef       	ldi	r20, 0xFA	; 250
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	89 ab       	std	Y+49, r24	; 0x31
    1d86:	9a ab       	std	Y+50, r25	; 0x32
    1d88:	ab ab       	std	Y+51, r26	; 0x33
    1d8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d90:	8b a9       	ldd	r24, Y+51	; 0x33
    1d92:	9c a9       	ldd	r25, Y+52	; 0x34
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <STEPPER_Rotate_CW_Full_Step+0x8e>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	98 ab       	std	Y+48, r25	; 0x30
    1daa:	8f a7       	std	Y+47, r24	; 0x2f
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <STEPPER_Rotate_CW_Full_Step+0x10c>
	else if (__tmp > 65535)
    1dae:	69 a9       	ldd	r22, Y+49	; 0x31
    1db0:	7a a9       	ldd	r23, Y+50	; 0x32
    1db2:	8b a9       	ldd	r24, Y+51	; 0x33
    1db4:	9c a9       	ldd	r25, Y+52	; 0x34
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <STEPPER_Rotate_CW_Full_Step+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dca:	8f a9       	ldd	r24, Y+55	; 0x37
    1dcc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	98 ab       	std	Y+48, r25	; 0x30
    1dec:	8f a7       	std	Y+47, r24	; 0x2f
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <STEPPER_Rotate_CW_Full_Step+0xee>
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9e a7       	std	Y+46, r25	; 0x2e
    1df6:	8d a7       	std	Y+45, r24	; 0x2d
    1df8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dfa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <STEPPER_Rotate_CW_Full_Step+0xdc>
    1e00:	9e a7       	std	Y+46, r25	; 0x2e
    1e02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e06:	98 a9       	ldd	r25, Y+48	; 0x30
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	98 ab       	std	Y+48, r25	; 0x30
    1e0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e10:	98 a9       	ldd	r25, Y+48	; 0x30
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <STEPPER_Rotate_CW_Full_Step+0xd0>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <STEPPER_Rotate_CW_Full_Step+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	98 ab       	std	Y+48, r25	; 0x30
    1e2a:	8f a7       	std	Y+47, r24	; 0x2f
    1e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e30:	9c a7       	std	Y+44, r25	; 0x2c
    1e32:	8b a7       	std	Y+43, r24	; 0x2b
    1e34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e36:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <STEPPER_Rotate_CW_Full_Step+0x118>
    1e3c:	9c a7       	std	Y+44, r25	; 0x2c
    1e3e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	63 e0       	ldi	r22, 0x03	; 3
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_SET);
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	64 e0       	ldi	r22, 0x04	; 4
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	65 e0       	ldi	r22, 0x05	; 5
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	66 e0       	ldi	r22, 0x06	; 6
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e4       	ldi	r27, 0x40	; 64
    1e70:	8f a3       	std	Y+39, r24	; 0x27
    1e72:	98 a7       	std	Y+40, r25	; 0x28
    1e74:	a9 a7       	std	Y+41, r26	; 0x29
    1e76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6f a1       	ldd	r22, Y+39	; 0x27
    1e7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8b a3       	std	Y+35, r24	; 0x23
    1e92:	9c a3       	std	Y+36, r25	; 0x24
    1e94:	ad a3       	std	Y+37, r26	; 0x25
    1e96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e98:	6b a1       	ldd	r22, Y+35	; 0x23
    1e9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <STEPPER_Rotate_CW_Full_Step+0x19a>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <STEPPER_Rotate_CW_Full_Step+0x218>
	else if (__tmp > 65535)
    1eba:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <STEPPER_Rotate_CW_Full_Step+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	89 a3       	std	Y+33, r24	; 0x21
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <STEPPER_Rotate_CW_Full_Step+0x1fa>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	98 a3       	std	Y+32, r25	; 0x20
    1f02:	8f 8f       	std	Y+31, r24	; 0x1f
    1f04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f06:	98 a1       	ldd	r25, Y+32	; 0x20
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <STEPPER_Rotate_CW_Full_Step+0x1e8>
    1f0c:	98 a3       	std	Y+32, r25	; 0x20
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	89 a1       	ldd	r24, Y+33	; 0x21
    1f12:	9a a1       	ldd	r25, Y+34	; 0x22
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9a a3       	std	Y+34, r25	; 0x22
    1f18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <STEPPER_Rotate_CW_Full_Step+0x1dc>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <STEPPER_Rotate_CW_Full_Step+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6b a1       	ldd	r22, Y+35	; 0x23
    1f26:	7c a1       	ldd	r23, Y+36	; 0x24
    1f28:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9a a3       	std	Y+34, r25	; 0x22
    1f36:	89 a3       	std	Y+33, r24	; 0x21
    1f38:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <STEPPER_Rotate_CW_Full_Step+0x224>
    1f48:	9e 8f       	std	Y+30, r25	; 0x1e
    1f4a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	63 e0       	ldi	r22, 0x03	; 3
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	64 e0       	ldi	r22, 0x04	; 4
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_SET);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	65 e0       	ldi	r22, 0x05	; 5
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	66 e0       	ldi	r22, 0x06	; 6
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e4       	ldi	r27, 0x40	; 64
    1f7c:	89 8f       	std	Y+25, r24	; 0x19
    1f7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f80:	ab 8f       	std	Y+27, r26	; 0x1b
    1f82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	69 8d       	ldd	r22, Y+25	; 0x19
    1f86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a ef       	ldi	r20, 0xFA	; 250
    1f92:	54 e4       	ldi	r21, 0x44	; 68
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8d 8b       	std	Y+21, r24	; 0x15
    1f9e:	9e 8b       	std	Y+22, r25	; 0x16
    1fa0:	af 8b       	std	Y+23, r26	; 0x17
    1fa2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <STEPPER_Rotate_CW_Full_Step+0x2a6>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
    1fc4:	3f c0       	rjmp	.+126    	; 0x2044 <STEPPER_Rotate_CW_Full_Step+0x324>
	else if (__tmp > 65535)
    1fc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fca:	8f 89       	ldd	r24, Y+23	; 0x17
    1fcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	4c f5       	brge	.+82     	; 0x2030 <STEPPER_Rotate_CW_Full_Step+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9c 8b       	std	Y+20, r25	; 0x14
    2004:	8b 8b       	std	Y+19, r24	; 0x13
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <STEPPER_Rotate_CW_Full_Step+0x306>
    2008:	88 ec       	ldi	r24, 0xC8	; 200
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9a 8b       	std	Y+18, r25	; 0x12
    200e:	89 8b       	std	Y+17, r24	; 0x11
    2010:	89 89       	ldd	r24, Y+17	; 0x11
    2012:	9a 89       	ldd	r25, Y+18	; 0x12
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <STEPPER_Rotate_CW_Full_Step+0x2f4>
    2018:	9a 8b       	std	Y+18, r25	; 0x12
    201a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	8b 89       	ldd	r24, Y+19	; 0x13
    201e:	9c 89       	ldd	r25, Y+20	; 0x14
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <STEPPER_Rotate_CW_Full_Step+0x2e8>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <STEPPER_Rotate_CW_Full_Step+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	6d 89       	ldd	r22, Y+21	; 0x15
    2032:	7e 89       	ldd	r23, Y+22	; 0x16
    2034:	8f 89       	ldd	r24, Y+23	; 0x17
    2036:	98 8d       	ldd	r25, Y+24	; 0x18
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9c 8b       	std	Y+20, r25	; 0x14
    2042:	8b 8b       	std	Y+19, r24	; 0x13
    2044:	8b 89       	ldd	r24, Y+19	; 0x13
    2046:	9c 89       	ldd	r25, Y+20	; 0x14
    2048:	98 8b       	std	Y+16, r25	; 0x10
    204a:	8f 87       	std	Y+15, r24	; 0x0f
    204c:	8f 85       	ldd	r24, Y+15	; 0x0f
    204e:	98 89       	ldd	r25, Y+16	; 0x10
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <STEPPER_Rotate_CW_Full_Step+0x330>
    2054:	98 8b       	std	Y+16, r25	; 0x10
    2056:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	63 e0       	ldi	r22, 0x03	; 3
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	64 e0       	ldi	r22, 0x04	; 4
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	65 e0       	ldi	r22, 0x05	; 5
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_SET);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	66 e0       	ldi	r22, 0x06	; 6
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e0       	ldi	r26, 0x00	; 0
    2086:	b0 e4       	ldi	r27, 0x40	; 64
    2088:	8b 87       	std	Y+11, r24	; 0x0b
    208a:	9c 87       	std	Y+12, r25	; 0x0c
    208c:	ad 87       	std	Y+13, r26	; 0x0d
    208e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	6b 85       	ldd	r22, Y+11	; 0x0b
    2092:	7c 85       	ldd	r23, Y+12	; 0x0c
    2094:	8d 85       	ldd	r24, Y+13	; 0x0d
    2096:	9e 85       	ldd	r25, Y+14	; 0x0e
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a ef       	ldi	r20, 0xFA	; 250
    209e:	54 e4       	ldi	r21, 0x44	; 68
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8f 83       	std	Y+7, r24	; 0x07
    20aa:	98 87       	std	Y+8, r25	; 0x08
    20ac:	a9 87       	std	Y+9, r26	; 0x09
    20ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <STEPPER_Rotate_CW_Full_Step+0x3b2>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <STEPPER_Rotate_CW_Full_Step+0x430>
	else if (__tmp > 65535)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <STEPPER_Rotate_CW_Full_Step+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <STEPPER_Rotate_CW_Full_Step+0x412>
    2114:	88 ec       	ldi	r24, 0xC8	; 200
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <STEPPER_Rotate_CW_Full_Step+0x400>
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <STEPPER_Rotate_CW_Full_Step+0x3f4>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <STEPPER_Rotate_CW_Full_Step+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	8d 81       	ldd	r24, Y+5	; 0x05
    2152:	9e 81       	ldd	r25, Y+6	; 0x06
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <STEPPER_Rotate_CW_Full_Step+0x43c>
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2164:	e8 96       	adiw	r28, 0x38	; 56
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <STEPPER_Rotate_ACW_Full_Step>:



/*COUNTER-CLOCKWISE*/
void STEPPER_Rotate_ACW_Full_Step(void)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	e8 97       	sbiw	r28, 0x38	; 56
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	63 e0       	ldi	r22, 0x03	; 3
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	64 e0       	ldi	r22, 0x04	; 4
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	65 e0       	ldi	r22, 0x05	; 5
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_SET);
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	66 e0       	ldi	r22, 0x06	; 6
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e0       	ldi	r26, 0x00	; 0
    21b8:	b0 e4       	ldi	r27, 0x40	; 64
    21ba:	8d ab       	std	Y+53, r24	; 0x35
    21bc:	9e ab       	std	Y+54, r25	; 0x36
    21be:	af ab       	std	Y+55, r26	; 0x37
    21c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	6d a9       	ldd	r22, Y+53	; 0x35
    21c4:	7e a9       	ldd	r23, Y+54	; 0x36
    21c6:	8f a9       	ldd	r24, Y+55	; 0x37
    21c8:	98 ad       	ldd	r25, Y+56	; 0x38
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a ef       	ldi	r20, 0xFA	; 250
    21d0:	54 e4       	ldi	r21, 0x44	; 68
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	89 ab       	std	Y+49, r24	; 0x31
    21dc:	9a ab       	std	Y+50, r25	; 0x32
    21de:	ab ab       	std	Y+51, r26	; 0x33
    21e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21e2:	69 a9       	ldd	r22, Y+49	; 0x31
    21e4:	7a a9       	ldd	r23, Y+50	; 0x32
    21e6:	8b a9       	ldd	r24, Y+51	; 0x33
    21e8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <STEPPER_Rotate_ACW_Full_Step+0x8e>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	98 ab       	std	Y+48, r25	; 0x30
    2200:	8f a7       	std	Y+47, r24	; 0x2f
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <STEPPER_Rotate_ACW_Full_Step+0x10c>
	else if (__tmp > 65535)
    2204:	69 a9       	ldd	r22, Y+49	; 0x31
    2206:	7a a9       	ldd	r23, Y+50	; 0x32
    2208:	8b a9       	ldd	r24, Y+51	; 0x33
    220a:	9c a9       	ldd	r25, Y+52	; 0x34
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <STEPPER_Rotate_ACW_Full_Step+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	6d a9       	ldd	r22, Y+53	; 0x35
    221e:	7e a9       	ldd	r23, Y+54	; 0x36
    2220:	8f a9       	ldd	r24, Y+55	; 0x37
    2222:	98 ad       	ldd	r25, Y+56	; 0x38
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	98 ab       	std	Y+48, r25	; 0x30
    2242:	8f a7       	std	Y+47, r24	; 0x2f
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <STEPPER_Rotate_ACW_Full_Step+0xee>
    2246:	88 ec       	ldi	r24, 0xC8	; 200
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9e a7       	std	Y+46, r25	; 0x2e
    224c:	8d a7       	std	Y+45, r24	; 0x2d
    224e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2250:	9e a5       	ldd	r25, Y+46	; 0x2e
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <STEPPER_Rotate_ACW_Full_Step+0xdc>
    2256:	9e a7       	std	Y+46, r25	; 0x2e
    2258:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	8f a5       	ldd	r24, Y+47	; 0x2f
    225c:	98 a9       	ldd	r25, Y+48	; 0x30
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	98 ab       	std	Y+48, r25	; 0x30
    2262:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	8f a5       	ldd	r24, Y+47	; 0x2f
    2266:	98 a9       	ldd	r25, Y+48	; 0x30
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <STEPPER_Rotate_ACW_Full_Step+0xd0>
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <STEPPER_Rotate_ACW_Full_Step+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	69 a9       	ldd	r22, Y+49	; 0x31
    2270:	7a a9       	ldd	r23, Y+50	; 0x32
    2272:	8b a9       	ldd	r24, Y+51	; 0x33
    2274:	9c a9       	ldd	r25, Y+52	; 0x34
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	98 ab       	std	Y+48, r25	; 0x30
    2280:	8f a7       	std	Y+47, r24	; 0x2f
    2282:	8f a5       	ldd	r24, Y+47	; 0x2f
    2284:	98 a9       	ldd	r25, Y+48	; 0x30
    2286:	9c a7       	std	Y+44, r25	; 0x2c
    2288:	8b a7       	std	Y+43, r24	; 0x2b
    228a:	8b a5       	ldd	r24, Y+43	; 0x2b
    228c:	9c a5       	ldd	r25, Y+44	; 0x2c
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <STEPPER_Rotate_ACW_Full_Step+0x118>
    2292:	9c a7       	std	Y+44, r25	; 0x2c
    2294:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	63 e0       	ldi	r22, 0x03	; 3
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	64 e0       	ldi	r22, 0x04	; 4
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_SET);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	65 e0       	ldi	r22, 0x05	; 5
    22ae:	41 e0       	ldi	r20, 0x01	; 1
    22b0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	66 e0       	ldi	r22, 0x06	; 6
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	a0 e0       	ldi	r26, 0x00	; 0
    22c4:	b0 e4       	ldi	r27, 0x40	; 64
    22c6:	8f a3       	std	Y+39, r24	; 0x27
    22c8:	98 a7       	std	Y+40, r25	; 0x28
    22ca:	a9 a7       	std	Y+41, r26	; 0x29
    22cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ce:	6f a1       	ldd	r22, Y+39	; 0x27
    22d0:	78 a5       	ldd	r23, Y+40	; 0x28
    22d2:	89 a5       	ldd	r24, Y+41	; 0x29
    22d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4a ef       	ldi	r20, 0xFA	; 250
    22dc:	54 e4       	ldi	r21, 0x44	; 68
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	8b a3       	std	Y+35, r24	; 0x23
    22e8:	9c a3       	std	Y+36, r25	; 0x24
    22ea:	ad a3       	std	Y+37, r26	; 0x25
    22ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ee:	6b a1       	ldd	r22, Y+35	; 0x23
    22f0:	7c a1       	ldd	r23, Y+36	; 0x24
    22f2:	8d a1       	ldd	r24, Y+37	; 0x25
    22f4:	9e a1       	ldd	r25, Y+38	; 0x26
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f e3       	ldi	r21, 0x3F	; 63
    22fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2302:	88 23       	and	r24, r24
    2304:	2c f4       	brge	.+10     	; 0x2310 <STEPPER_Rotate_ACW_Full_Step+0x19a>
		__ticks = 1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9a a3       	std	Y+34, r25	; 0x22
    230c:	89 a3       	std	Y+33, r24	; 0x21
    230e:	3f c0       	rjmp	.+126    	; 0x238e <STEPPER_Rotate_ACW_Full_Step+0x218>
	else if (__tmp > 65535)
    2310:	6b a1       	ldd	r22, Y+35	; 0x23
    2312:	7c a1       	ldd	r23, Y+36	; 0x24
    2314:	8d a1       	ldd	r24, Y+37	; 0x25
    2316:	9e a1       	ldd	r25, Y+38	; 0x26
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	3f ef       	ldi	r19, 0xFF	; 255
    231c:	4f e7       	ldi	r20, 0x7F	; 127
    231e:	57 e4       	ldi	r21, 0x47	; 71
    2320:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2324:	18 16       	cp	r1, r24
    2326:	4c f5       	brge	.+82     	; 0x237a <STEPPER_Rotate_ACW_Full_Step+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2328:	6f a1       	ldd	r22, Y+39	; 0x27
    232a:	78 a5       	ldd	r23, Y+40	; 0x28
    232c:	89 a5       	ldd	r24, Y+41	; 0x29
    232e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e2       	ldi	r20, 0x20	; 32
    2336:	51 e4       	ldi	r21, 0x41	; 65
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9a a3       	std	Y+34, r25	; 0x22
    234e:	89 a3       	std	Y+33, r24	; 0x21
    2350:	0f c0       	rjmp	.+30     	; 0x2370 <STEPPER_Rotate_ACW_Full_Step+0x1fa>
    2352:	88 ec       	ldi	r24, 0xC8	; 200
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	98 a3       	std	Y+32, r25	; 0x20
    2358:	8f 8f       	std	Y+31, r24	; 0x1f
    235a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    235c:	98 a1       	ldd	r25, Y+32	; 0x20
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <STEPPER_Rotate_ACW_Full_Step+0x1e8>
    2362:	98 a3       	std	Y+32, r25	; 0x20
    2364:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	89 a1       	ldd	r24, Y+33	; 0x21
    2368:	9a a1       	ldd	r25, Y+34	; 0x22
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	9a a3       	std	Y+34, r25	; 0x22
    236e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2370:	89 a1       	ldd	r24, Y+33	; 0x21
    2372:	9a a1       	ldd	r25, Y+34	; 0x22
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	69 f7       	brne	.-38     	; 0x2352 <STEPPER_Rotate_ACW_Full_Step+0x1dc>
    2378:	14 c0       	rjmp	.+40     	; 0x23a2 <STEPPER_Rotate_ACW_Full_Step+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237a:	6b a1       	ldd	r22, Y+35	; 0x23
    237c:	7c a1       	ldd	r23, Y+36	; 0x24
    237e:	8d a1       	ldd	r24, Y+37	; 0x25
    2380:	9e a1       	ldd	r25, Y+38	; 0x26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9a a3       	std	Y+34, r25	; 0x22
    238c:	89 a3       	std	Y+33, r24	; 0x21
    238e:	89 a1       	ldd	r24, Y+33	; 0x21
    2390:	9a a1       	ldd	r25, Y+34	; 0x22
    2392:	9e 8f       	std	Y+30, r25	; 0x1e
    2394:	8d 8f       	std	Y+29, r24	; 0x1d
    2396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2398:	9e 8d       	ldd	r25, Y+30	; 0x1e
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <STEPPER_Rotate_ACW_Full_Step+0x224>
    239e:	9e 8f       	std	Y+30, r25	; 0x1e
    23a0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	63 e0       	ldi	r22, 0x03	; 3
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_SET);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	64 e0       	ldi	r22, 0x04	; 4
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	65 e0       	ldi	r22, 0x05	; 5
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	66 e0       	ldi	r22, 0x06	; 6
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e4       	ldi	r27, 0x40	; 64
    23d2:	89 8f       	std	Y+25, r24	; 0x19
    23d4:	9a 8f       	std	Y+26, r25	; 0x1a
    23d6:	ab 8f       	std	Y+27, r26	; 0x1b
    23d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	69 8d       	ldd	r22, Y+25	; 0x19
    23dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8d 8b       	std	Y+21, r24	; 0x15
    23f4:	9e 8b       	std	Y+22, r25	; 0x16
    23f6:	af 8b       	std	Y+23, r26	; 0x17
    23f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23fa:	6d 89       	ldd	r22, Y+21	; 0x15
    23fc:	7e 89       	ldd	r23, Y+22	; 0x16
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	98 8d       	ldd	r25, Y+24	; 0x18
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <STEPPER_Rotate_ACW_Full_Step+0x2a6>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 8b       	std	Y+20, r25	; 0x14
    2418:	8b 8b       	std	Y+19, r24	; 0x13
    241a:	3f c0       	rjmp	.+126    	; 0x249a <STEPPER_Rotate_ACW_Full_Step+0x324>
	else if (__tmp > 65535)
    241c:	6d 89       	ldd	r22, Y+21	; 0x15
    241e:	7e 89       	ldd	r23, Y+22	; 0x16
    2420:	8f 89       	ldd	r24, Y+23	; 0x17
    2422:	98 8d       	ldd	r25, Y+24	; 0x18
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <STEPPER_Rotate_ACW_Full_Step+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	69 8d       	ldd	r22, Y+25	; 0x19
    2436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	8b 8b       	std	Y+19, r24	; 0x13
    245c:	0f c0       	rjmp	.+30     	; 0x247c <STEPPER_Rotate_ACW_Full_Step+0x306>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9a 8b       	std	Y+18, r25	; 0x12
    2464:	89 8b       	std	Y+17, r24	; 0x11
    2466:	89 89       	ldd	r24, Y+17	; 0x11
    2468:	9a 89       	ldd	r25, Y+18	; 0x12
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <STEPPER_Rotate_ACW_Full_Step+0x2f4>
    246e:	9a 8b       	std	Y+18, r25	; 0x12
    2470:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8b 89       	ldd	r24, Y+19	; 0x13
    2474:	9c 89       	ldd	r25, Y+20	; 0x14
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <STEPPER_Rotate_ACW_Full_Step+0x2e8>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <STEPPER_Rotate_ACW_Full_Step+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6d 89       	ldd	r22, Y+21	; 0x15
    2488:	7e 89       	ldd	r23, Y+22	; 0x16
    248a:	8f 89       	ldd	r24, Y+23	; 0x17
    248c:	98 8d       	ldd	r25, Y+24	; 0x18
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	98 8b       	std	Y+16, r25	; 0x10
    24a0:	8f 87       	std	Y+15, r24	; 0x0f
    24a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a4:	98 89       	ldd	r25, Y+16	; 0x10
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <STEPPER_Rotate_ACW_Full_Step+0x330>
    24aa:	98 8b       	std	Y+16, r25	; 0x10
    24ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_SET);
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	63 e0       	ldi	r22, 0x03	; 3
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	64 e0       	ldi	r22, 0x04	; 4
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	65 e0       	ldi	r22, 0x05	; 5
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	66 e0       	ldi	r22, 0x06	; 6
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 e0       	ldi	r26, 0x00	; 0
    24dc:	b0 e4       	ldi	r27, 0x40	; 64
    24de:	8b 87       	std	Y+11, r24	; 0x0b
    24e0:	9c 87       	std	Y+12, r25	; 0x0c
    24e2:	ad 87       	std	Y+13, r26	; 0x0d
    24e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a ef       	ldi	r20, 0xFA	; 250
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	8f 83       	std	Y+7, r24	; 0x07
    2500:	98 87       	std	Y+8, r25	; 0x08
    2502:	a9 87       	std	Y+9, r26	; 0x09
    2504:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2506:	6f 81       	ldd	r22, Y+7	; 0x07
    2508:	78 85       	ldd	r23, Y+8	; 0x08
    250a:	89 85       	ldd	r24, Y+9	; 0x09
    250c:	9a 85       	ldd	r25, Y+10	; 0x0a
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	2c f4       	brge	.+10     	; 0x2528 <STEPPER_Rotate_ACW_Full_Step+0x3b2>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <STEPPER_Rotate_ACW_Full_Step+0x430>
	else if (__tmp > 65535)
    2528:	6f 81       	ldd	r22, Y+7	; 0x07
    252a:	78 85       	ldd	r23, Y+8	; 0x08
    252c:	89 85       	ldd	r24, Y+9	; 0x09
    252e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	4f e7       	ldi	r20, 0x7F	; 127
    2536:	57 e4       	ldi	r21, 0x47	; 71
    2538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    253c:	18 16       	cp	r1, r24
    253e:	4c f5       	brge	.+82     	; 0x2592 <STEPPER_Rotate_ACW_Full_Step+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	6b 85       	ldd	r22, Y+11	; 0x0b
    2542:	7c 85       	ldd	r23, Y+12	; 0x0c
    2544:	8d 85       	ldd	r24, Y+13	; 0x0d
    2546:	9e 85       	ldd	r25, Y+14	; 0x0e
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <STEPPER_Rotate_ACW_Full_Step+0x412>
    256a:	88 ec       	ldi	r24, 0xC8	; 200
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9c 83       	std	Y+4, r25	; 0x04
    2570:	8b 83       	std	Y+3, r24	; 0x03
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <STEPPER_Rotate_ACW_Full_Step+0x400>
    257a:	9c 83       	std	Y+4, r25	; 0x04
    257c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	8d 81       	ldd	r24, Y+5	; 0x05
    2580:	9e 81       	ldd	r25, Y+6	; 0x06
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	69 f7       	brne	.-38     	; 0x256a <STEPPER_Rotate_ACW_Full_Step+0x3f4>
    2590:	14 c0       	rjmp	.+40     	; 0x25ba <STEPPER_Rotate_ACW_Full_Step+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	6f 81       	ldd	r22, Y+7	; 0x07
    2594:	78 85       	ldd	r23, Y+8	; 0x08
    2596:	89 85       	ldd	r24, Y+9	; 0x09
    2598:	9a 85       	ldd	r25, Y+10	; 0x0a
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9e 83       	std	Y+6, r25	; 0x06
    25a4:	8d 83       	std	Y+5, r24	; 0x05
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <STEPPER_Rotate_ACW_Full_Step+0x43c>
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    25ba:	e8 96       	adiw	r28, 0x38	; 56
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <STEPPER_Rotate_CW_Half_Step>:

void STEPPER_Rotate_CW_Half_Step(void)
{
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	c0 57       	subi	r28, 0x70	; 112
    25da:	d0 40       	sbci	r29, 0x00	; 0
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61

	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_SET);
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	63 e0       	ldi	r22, 0x03	; 3
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	64 e0       	ldi	r22, 0x04	; 4
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	65 e0       	ldi	r22, 0x05	; 5
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_SET);
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	66 e0       	ldi	r22, 0x06	; 6
    2608:	41 e0       	ldi	r20, 0x01	; 1
    260a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    260e:	fe 01       	movw	r30, r28
    2610:	e3 59       	subi	r30, 0x93	; 147
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a0 e0       	ldi	r26, 0x00	; 0
    261a:	b0 e4       	ldi	r27, 0x40	; 64
    261c:	80 83       	st	Z, r24
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	a2 83       	std	Z+2, r26	; 0x02
    2622:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2624:	8e 01       	movw	r16, r28
    2626:	07 59       	subi	r16, 0x97	; 151
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	fe 01       	movw	r30, r28
    262c:	e3 59       	subi	r30, 0x93	; 147
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a ef       	ldi	r20, 0xFA	; 250
    263e:	54 e4       	ldi	r21, 0x44	; 68
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	f8 01       	movw	r30, r16
    264a:	80 83       	st	Z, r24
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	a2 83       	std	Z+2, r26	; 0x02
    2650:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2652:	fe 01       	movw	r30, r28
    2654:	e7 59       	subi	r30, 0x97	; 151
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e8       	ldi	r20, 0x80	; 128
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266c:	88 23       	and	r24, r24
    266e:	44 f4       	brge	.+16     	; 0x2680 <STEPPER_Rotate_CW_Half_Step+0xb4>
		__ticks = 1;
    2670:	fe 01       	movw	r30, r28
    2672:	e9 59       	subi	r30, 0x99	; 153
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
    267e:	64 c0       	rjmp	.+200    	; 0x2748 <STEPPER_Rotate_CW_Half_Step+0x17c>
	else if (__tmp > 65535)
    2680:	fe 01       	movw	r30, r28
    2682:	e7 59       	subi	r30, 0x97	; 151
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	3f ef       	ldi	r19, 0xFF	; 255
    2692:	4f e7       	ldi	r20, 0x7F	; 127
    2694:	57 e4       	ldi	r21, 0x47	; 71
    2696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269a:	18 16       	cp	r1, r24
    269c:	0c f0       	brlt	.+2      	; 0x26a0 <STEPPER_Rotate_CW_Half_Step+0xd4>
    269e:	43 c0       	rjmp	.+134    	; 0x2726 <STEPPER_Rotate_CW_Half_Step+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	fe 01       	movw	r30, r28
    26a2:	e3 59       	subi	r30, 0x93	; 147
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	60 81       	ld	r22, Z
    26a8:	71 81       	ldd	r23, Z+1	; 0x01
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	8e 01       	movw	r16, r28
    26c0:	09 59       	subi	r16, 0x99	; 153
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	f8 01       	movw	r30, r16
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
    26d6:	1f c0       	rjmp	.+62     	; 0x2716 <STEPPER_Rotate_CW_Half_Step+0x14a>
    26d8:	fe 01       	movw	r30, r28
    26da:	eb 59       	subi	r30, 0x9B	; 155
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	88 ec       	ldi	r24, 0xC8	; 200
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	80 83       	st	Z, r24
    26e6:	fe 01       	movw	r30, r28
    26e8:	eb 59       	subi	r30, 0x9B	; 155
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <STEPPER_Rotate_CW_Half_Step+0x124>
    26f4:	fe 01       	movw	r30, r28
    26f6:	eb 59       	subi	r30, 0x9B	; 155
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fe:	de 01       	movw	r26, r28
    2700:	a9 59       	subi	r26, 0x99	; 153
    2702:	bf 4f       	sbci	r27, 0xFF	; 255
    2704:	fe 01       	movw	r30, r28
    2706:	e9 59       	subi	r30, 0x99	; 153
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	11 96       	adiw	r26, 0x01	; 1
    2712:	9c 93       	st	X, r25
    2714:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	fe 01       	movw	r30, r28
    2718:	e9 59       	subi	r30, 0x99	; 153
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	d1 f6       	brne	.-76     	; 0x26d8 <STEPPER_Rotate_CW_Half_Step+0x10c>
    2724:	27 c0       	rjmp	.+78     	; 0x2774 <STEPPER_Rotate_CW_Half_Step+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	8e 01       	movw	r16, r28
    2728:	09 59       	subi	r16, 0x99	; 153
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	fe 01       	movw	r30, r28
    272e:	e7 59       	subi	r30, 0x97	; 151
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	60 81       	ld	r22, Z
    2734:	71 81       	ldd	r23, Z+1	; 0x01
    2736:	82 81       	ldd	r24, Z+2	; 0x02
    2738:	93 81       	ldd	r25, Z+3	; 0x03
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	f8 01       	movw	r30, r16
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	80 83       	st	Z, r24
    2748:	de 01       	movw	r26, r28
    274a:	ad 59       	subi	r26, 0x9D	; 157
    274c:	bf 4f       	sbci	r27, 0xFF	; 255
    274e:	fe 01       	movw	r30, r28
    2750:	e9 59       	subi	r30, 0x99	; 153
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	80 81       	ld	r24, Z
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	8d 93       	st	X+, r24
    275a:	9c 93       	st	X, r25
    275c:	fe 01       	movw	r30, r28
    275e:	ed 59       	subi	r30, 0x9D	; 157
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <STEPPER_Rotate_CW_Half_Step+0x19a>
    276a:	fe 01       	movw	r30, r28
    276c:	ed 59       	subi	r30, 0x9D	; 157
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_SET);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	63 e0       	ldi	r22, 0x03	; 3
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	64 e0       	ldi	r22, 0x04	; 4
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	65 e0       	ldi	r22, 0x05	; 5
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	66 e0       	ldi	r22, 0x06	; 6
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    279c:	fe 01       	movw	r30, r28
    279e:	e1 5a       	subi	r30, 0xA1	; 161
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	a0 e0       	ldi	r26, 0x00	; 0
    27a8:	b0 e4       	ldi	r27, 0x40	; 64
    27aa:	80 83       	st	Z, r24
    27ac:	91 83       	std	Z+1, r25	; 0x01
    27ae:	a2 83       	std	Z+2, r26	; 0x02
    27b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b2:	8e 01       	movw	r16, r28
    27b4:	05 5a       	subi	r16, 0xA5	; 165
    27b6:	1f 4f       	sbci	r17, 0xFF	; 255
    27b8:	fe 01       	movw	r30, r28
    27ba:	e1 5a       	subi	r30, 0xA1	; 161
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	4a ef       	ldi	r20, 0xFA	; 250
    27cc:	54 e4       	ldi	r21, 0x44	; 68
    27ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	f8 01       	movw	r30, r16
    27d8:	80 83       	st	Z, r24
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	a2 83       	std	Z+2, r26	; 0x02
    27de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e0:	fe 01       	movw	r30, r28
    27e2:	e5 5a       	subi	r30, 0xA5	; 165
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27fa:	88 23       	and	r24, r24
    27fc:	44 f4       	brge	.+16     	; 0x280e <STEPPER_Rotate_CW_Half_Step+0x242>
		__ticks = 1;
    27fe:	fe 01       	movw	r30, r28
    2800:	e7 5a       	subi	r30, 0xA7	; 167
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
    280c:	64 c0       	rjmp	.+200    	; 0x28d6 <STEPPER_Rotate_CW_Half_Step+0x30a>
	else if (__tmp > 65535)
    280e:	fe 01       	movw	r30, r28
    2810:	e5 5a       	subi	r30, 0xA5	; 165
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	3f ef       	ldi	r19, 0xFF	; 255
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	57 e4       	ldi	r21, 0x47	; 71
    2824:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2828:	18 16       	cp	r1, r24
    282a:	0c f0       	brlt	.+2      	; 0x282e <STEPPER_Rotate_CW_Half_Step+0x262>
    282c:	43 c0       	rjmp	.+134    	; 0x28b4 <STEPPER_Rotate_CW_Half_Step+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	fe 01       	movw	r30, r28
    2830:	e1 5a       	subi	r30, 0xA1	; 161
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	8e 01       	movw	r16, r28
    284e:	07 5a       	subi	r16, 0xA7	; 167
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	bc 01       	movw	r22, r24
    2854:	cd 01       	movw	r24, r26
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	f8 01       	movw	r30, r16
    2860:	91 83       	std	Z+1, r25	; 0x01
    2862:	80 83       	st	Z, r24
    2864:	1f c0       	rjmp	.+62     	; 0x28a4 <STEPPER_Rotate_CW_Half_Step+0x2d8>
    2866:	fe 01       	movw	r30, r28
    2868:	e9 5a       	subi	r30, 0xA9	; 169
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	88 ec       	ldi	r24, 0xC8	; 200
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	80 83       	st	Z, r24
    2874:	fe 01       	movw	r30, r28
    2876:	e9 5a       	subi	r30, 0xA9	; 169
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 81       	ld	r24, Z
    287c:	91 81       	ldd	r25, Z+1	; 0x01
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <STEPPER_Rotate_CW_Half_Step+0x2b2>
    2882:	fe 01       	movw	r30, r28
    2884:	e9 5a       	subi	r30, 0xA9	; 169
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288c:	de 01       	movw	r26, r28
    288e:	a7 5a       	subi	r26, 0xA7	; 167
    2890:	bf 4f       	sbci	r27, 0xFF	; 255
    2892:	fe 01       	movw	r30, r28
    2894:	e7 5a       	subi	r30, 0xA7	; 167
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	80 81       	ld	r24, Z
    289a:	91 81       	ldd	r25, Z+1	; 0x01
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	11 96       	adiw	r26, 0x01	; 1
    28a0:	9c 93       	st	X, r25
    28a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	fe 01       	movw	r30, r28
    28a6:	e7 5a       	subi	r30, 0xA7	; 167
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	91 81       	ldd	r25, Z+1	; 0x01
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	d1 f6       	brne	.-76     	; 0x2866 <STEPPER_Rotate_CW_Half_Step+0x29a>
    28b2:	27 c0       	rjmp	.+78     	; 0x2902 <STEPPER_Rotate_CW_Half_Step+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	8e 01       	movw	r16, r28
    28b6:	07 5a       	subi	r16, 0xA7	; 167
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	fe 01       	movw	r30, r28
    28bc:	e5 5a       	subi	r30, 0xA5	; 165
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	f8 01       	movw	r30, r16
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	80 83       	st	Z, r24
    28d6:	de 01       	movw	r26, r28
    28d8:	ab 5a       	subi	r26, 0xAB	; 171
    28da:	bf 4f       	sbci	r27, 0xFF	; 255
    28dc:	fe 01       	movw	r30, r28
    28de:	e7 5a       	subi	r30, 0xA7	; 167
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	8d 93       	st	X+, r24
    28e8:	9c 93       	st	X, r25
    28ea:	fe 01       	movw	r30, r28
    28ec:	eb 5a       	subi	r30, 0xAB	; 171
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <STEPPER_Rotate_CW_Half_Step+0x328>
    28f8:	fe 01       	movw	r30, r28
    28fa:	eb 5a       	subi	r30, 0xAB	; 171
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	91 83       	std	Z+1, r25	; 0x01
    2900:	80 83       	st	Z, r24
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_SET);
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	63 e0       	ldi	r22, 0x03	; 3
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_SET);
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	64 e0       	ldi	r22, 0x04	; 4
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	65 e0       	ldi	r22, 0x05	; 5
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	66 e0       	ldi	r22, 0x06	; 6
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    292a:	fe 01       	movw	r30, r28
    292c:	ef 5a       	subi	r30, 0xAF	; 175
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 e0       	ldi	r26, 0x00	; 0
    2936:	b0 e4       	ldi	r27, 0x40	; 64
    2938:	80 83       	st	Z, r24
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	a2 83       	std	Z+2, r26	; 0x02
    293e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2940:	8e 01       	movw	r16, r28
    2942:	03 5b       	subi	r16, 0xB3	; 179
    2944:	1f 4f       	sbci	r17, 0xFF	; 255
    2946:	fe 01       	movw	r30, r28
    2948:	ef 5a       	subi	r30, 0xAF	; 175
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a ef       	ldi	r20, 0xFA	; 250
    295a:	54 e4       	ldi	r21, 0x44	; 68
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	f8 01       	movw	r30, r16
    2966:	80 83       	st	Z, r24
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	a2 83       	std	Z+2, r26	; 0x02
    296c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    296e:	fe 01       	movw	r30, r28
    2970:	e3 5b       	subi	r30, 0xB3	; 179
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	44 f4       	brge	.+16     	; 0x299c <STEPPER_Rotate_CW_Half_Step+0x3d0>
		__ticks = 1;
    298c:	fe 01       	movw	r30, r28
    298e:	e5 5b       	subi	r30, 0xB5	; 181
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	64 c0       	rjmp	.+200    	; 0x2a64 <STEPPER_Rotate_CW_Half_Step+0x498>
	else if (__tmp > 65535)
    299c:	fe 01       	movw	r30, r28
    299e:	e3 5b       	subi	r30, 0xB3	; 179
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <STEPPER_Rotate_CW_Half_Step+0x3f0>
    29ba:	43 c0       	rjmp	.+134    	; 0x2a42 <STEPPER_Rotate_CW_Half_Step+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	fe 01       	movw	r30, r28
    29be:	ef 5a       	subi	r30, 0xAF	; 175
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8e 01       	movw	r16, r28
    29dc:	05 5b       	subi	r16, 0xB5	; 181
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	f8 01       	movw	r30, r16
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	1f c0       	rjmp	.+62     	; 0x2a32 <STEPPER_Rotate_CW_Half_Step+0x466>
    29f4:	fe 01       	movw	r30, r28
    29f6:	e7 5b       	subi	r30, 0xB7	; 183
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	88 ec       	ldi	r24, 0xC8	; 200
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
    2a02:	fe 01       	movw	r30, r28
    2a04:	e7 5b       	subi	r30, 0xB7	; 183
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <STEPPER_Rotate_CW_Half_Step+0x440>
    2a10:	fe 01       	movw	r30, r28
    2a12:	e7 5b       	subi	r30, 0xB7	; 183
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1a:	de 01       	movw	r26, r28
    2a1c:	a5 5b       	subi	r26, 0xB5	; 181
    2a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a20:	fe 01       	movw	r30, r28
    2a22:	e5 5b       	subi	r30, 0xB5	; 181
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	11 96       	adiw	r26, 0x01	; 1
    2a2e:	9c 93       	st	X, r25
    2a30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	fe 01       	movw	r30, r28
    2a34:	e5 5b       	subi	r30, 0xB5	; 181
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	91 81       	ldd	r25, Z+1	; 0x01
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	d1 f6       	brne	.-76     	; 0x29f4 <STEPPER_Rotate_CW_Half_Step+0x428>
    2a40:	27 c0       	rjmp	.+78     	; 0x2a90 <STEPPER_Rotate_CW_Half_Step+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	8e 01       	movw	r16, r28
    2a44:	05 5b       	subi	r16, 0xB5	; 181
    2a46:	1f 4f       	sbci	r17, 0xFF	; 255
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e3 5b       	subi	r30, 0xB3	; 179
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	82 81       	ldd	r24, Z+2	; 0x02
    2a54:	93 81       	ldd	r25, Z+3	; 0x03
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	f8 01       	movw	r30, r16
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	80 83       	st	Z, r24
    2a64:	de 01       	movw	r26, r28
    2a66:	a9 5b       	subi	r26, 0xB9	; 185
    2a68:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e5 5b       	subi	r30, 0xB5	; 181
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	8d 93       	st	X+, r24
    2a76:	9c 93       	st	X, r25
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e9 5b       	subi	r30, 0xB9	; 185
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <STEPPER_Rotate_CW_Half_Step+0x4b6>
    2a86:	fe 01       	movw	r30, r28
    2a88:	e9 5b       	subi	r30, 0xB9	; 185
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	63 e0       	ldi	r22, 0x03	; 3
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_SET);
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	64 e0       	ldi	r22, 0x04	; 4
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	65 e0       	ldi	r22, 0x05	; 5
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	66 e0       	ldi	r22, 0x06	; 6
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ed 5b       	subi	r30, 0xBD	; 189
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 e0       	ldi	r26, 0x00	; 0
    2ac4:	b0 e4       	ldi	r27, 0x40	; 64
    2ac6:	80 83       	st	Z, r24
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	a2 83       	std	Z+2, r26	; 0x02
    2acc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ace:	8e 01       	movw	r16, r28
    2ad0:	01 5c       	subi	r16, 0xC1	; 193
    2ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ed 5b       	subi	r30, 0xBD	; 189
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	82 81       	ldd	r24, Z+2	; 0x02
    2ae0:	93 81       	ldd	r25, Z+3	; 0x03
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	4a ef       	ldi	r20, 0xFA	; 250
    2ae8:	54 e4       	ldi	r21, 0x44	; 68
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	f8 01       	movw	r30, r16
    2af4:	80 83       	st	Z, r24
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	a2 83       	std	Z+2, r26	; 0x02
    2afa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2afc:	fe 01       	movw	r30, r28
    2afe:	ff 96       	adiw	r30, 0x3f	; 63
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	2c f4       	brge	.+10     	; 0x2b22 <STEPPER_Rotate_CW_Half_Step+0x556>
		__ticks = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9e af       	std	Y+62, r25	; 0x3e
    2b1e:	8d af       	std	Y+61, r24	; 0x3d
    2b20:	46 c0       	rjmp	.+140    	; 0x2bae <STEPPER_Rotate_CW_Half_Step+0x5e2>
	else if (__tmp > 65535)
    2b22:	fe 01       	movw	r30, r28
    2b24:	ff 96       	adiw	r30, 0x3f	; 63
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	3f ef       	ldi	r19, 0xFF	; 255
    2b32:	4f e7       	ldi	r20, 0x7F	; 127
    2b34:	57 e4       	ldi	r21, 0x47	; 71
    2b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3a:	18 16       	cp	r1, r24
    2b3c:	64 f5       	brge	.+88     	; 0x2b96 <STEPPER_Rotate_CW_Half_Step+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ed 5b       	subi	r30, 0xBD	; 189
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e2       	ldi	r20, 0x20	; 32
    2b52:	51 e4       	ldi	r21, 0x41	; 65
    2b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	9e af       	std	Y+62, r25	; 0x3e
    2b6a:	8d af       	std	Y+61, r24	; 0x3d
    2b6c:	0f c0       	rjmp	.+30     	; 0x2b8c <STEPPER_Rotate_CW_Half_Step+0x5c0>
    2b6e:	88 ec       	ldi	r24, 0xC8	; 200
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9c af       	std	Y+60, r25	; 0x3c
    2b74:	8b af       	std	Y+59, r24	; 0x3b
    2b76:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b78:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <STEPPER_Rotate_CW_Half_Step+0x5ae>
    2b7e:	9c af       	std	Y+60, r25	; 0x3c
    2b80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b82:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b84:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	9e af       	std	Y+62, r25	; 0x3e
    2b8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	69 f7       	brne	.-38     	; 0x2b6e <STEPPER_Rotate_CW_Half_Step+0x5a2>
    2b94:	16 c0       	rjmp	.+44     	; 0x2bc2 <STEPPER_Rotate_CW_Half_Step+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b96:	fe 01       	movw	r30, r28
    2b98:	ff 96       	adiw	r30, 0x3f	; 63
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9e af       	std	Y+62, r25	; 0x3e
    2bac:	8d af       	std	Y+61, r24	; 0x3d
    2bae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bb2:	9a af       	std	Y+58, r25	; 0x3a
    2bb4:	89 af       	std	Y+57, r24	; 0x39
    2bb6:	89 ad       	ldd	r24, Y+57	; 0x39
    2bb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <STEPPER_Rotate_CW_Half_Step+0x5ee>
    2bbe:	9a af       	std	Y+58, r25	; 0x3a
    2bc0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);

	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	63 e0       	ldi	r22, 0x03	; 3
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_SET);
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	64 e0       	ldi	r22, 0x04	; 4
    2bd0:	41 e0       	ldi	r20, 0x01	; 1
    2bd2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_SET);
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	65 e0       	ldi	r22, 0x05	; 5
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	66 e0       	ldi	r22, 0x06	; 6
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	b0 e4       	ldi	r27, 0x40	; 64
    2bf2:	8d ab       	std	Y+53, r24	; 0x35
    2bf4:	9e ab       	std	Y+54, r25	; 0x36
    2bf6:	af ab       	std	Y+55, r26	; 0x37
    2bf8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6d a9       	ldd	r22, Y+53	; 0x35
    2bfc:	7e a9       	ldd	r23, Y+54	; 0x36
    2bfe:	8f a9       	ldd	r24, Y+55	; 0x37
    2c00:	98 ad       	ldd	r25, Y+56	; 0x38
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a ef       	ldi	r20, 0xFA	; 250
    2c08:	54 e4       	ldi	r21, 0x44	; 68
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	89 ab       	std	Y+49, r24	; 0x31
    2c14:	9a ab       	std	Y+50, r25	; 0x32
    2c16:	ab ab       	std	Y+51, r26	; 0x33
    2c18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c20:	9c a9       	ldd	r25, Y+52	; 0x34
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <STEPPER_Rotate_CW_Half_Step+0x670>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	98 ab       	std	Y+48, r25	; 0x30
    2c38:	8f a7       	std	Y+47, r24	; 0x2f
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <STEPPER_Rotate_CW_Half_Step+0x6ee>
	else if (__tmp > 65535)
    2c3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c40:	8b a9       	ldd	r24, Y+51	; 0x33
    2c42:	9c a9       	ldd	r25, Y+52	; 0x34
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <STEPPER_Rotate_CW_Half_Step+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6d a9       	ldd	r22, Y+53	; 0x35
    2c56:	7e a9       	ldd	r23, Y+54	; 0x36
    2c58:	8f a9       	ldd	r24, Y+55	; 0x37
    2c5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	98 ab       	std	Y+48, r25	; 0x30
    2c7a:	8f a7       	std	Y+47, r24	; 0x2f
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <STEPPER_Rotate_CW_Half_Step+0x6d0>
    2c7e:	88 ec       	ldi	r24, 0xC8	; 200
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9e a7       	std	Y+46, r25	; 0x2e
    2c84:	8d a7       	std	Y+45, r24	; 0x2d
    2c86:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c88:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <STEPPER_Rotate_CW_Half_Step+0x6be>
    2c8e:	9e a7       	std	Y+46, r25	; 0x2e
    2c90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c94:	98 a9       	ldd	r25, Y+48	; 0x30
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	98 ab       	std	Y+48, r25	; 0x30
    2c9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <STEPPER_Rotate_CW_Half_Step+0x6b2>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <STEPPER_Rotate_CW_Half_Step+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca8:	7a a9       	ldd	r23, Y+50	; 0x32
    2caa:	8b a9       	ldd	r24, Y+51	; 0x33
    2cac:	9c a9       	ldd	r25, Y+52	; 0x34
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	98 ab       	std	Y+48, r25	; 0x30
    2cb8:	8f a7       	std	Y+47, r24	; 0x2f
    2cba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cbc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cbe:	9c a7       	std	Y+44, r25	; 0x2c
    2cc0:	8b a7       	std	Y+43, r24	; 0x2b
    2cc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <STEPPER_Rotate_CW_Half_Step+0x6fa>
    2cca:	9c a7       	std	Y+44, r25	; 0x2c
    2ccc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	63 e0       	ldi	r22, 0x03	; 3
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	64 e0       	ldi	r22, 0x04	; 4
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_SET);
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	65 e0       	ldi	r22, 0x05	; 5
    2ce6:	41 e0       	ldi	r20, 0x01	; 1
    2ce8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	66 e0       	ldi	r22, 0x06	; 6
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 e0       	ldi	r26, 0x00	; 0
    2cfc:	b0 e4       	ldi	r27, 0x40	; 64
    2cfe:	8f a3       	std	Y+39, r24	; 0x27
    2d00:	98 a7       	std	Y+40, r25	; 0x28
    2d02:	a9 a7       	std	Y+41, r26	; 0x29
    2d04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d06:	6f a1       	ldd	r22, Y+39	; 0x27
    2d08:	78 a5       	ldd	r23, Y+40	; 0x28
    2d0a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4a ef       	ldi	r20, 0xFA	; 250
    2d14:	54 e4       	ldi	r21, 0x44	; 68
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8b a3       	std	Y+35, r24	; 0x23
    2d20:	9c a3       	std	Y+36, r25	; 0x24
    2d22:	ad a3       	std	Y+37, r26	; 0x25
    2d24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d26:	6b a1       	ldd	r22, Y+35	; 0x23
    2d28:	7c a1       	ldd	r23, Y+36	; 0x24
    2d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3a:	88 23       	and	r24, r24
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <STEPPER_Rotate_CW_Half_Step+0x77c>
		__ticks = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9a a3       	std	Y+34, r25	; 0x22
    2d44:	89 a3       	std	Y+33, r24	; 0x21
    2d46:	3f c0       	rjmp	.+126    	; 0x2dc6 <STEPPER_Rotate_CW_Half_Step+0x7fa>
	else if (__tmp > 65535)
    2d48:	6b a1       	ldd	r22, Y+35	; 0x23
    2d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	3f ef       	ldi	r19, 0xFF	; 255
    2d54:	4f e7       	ldi	r20, 0x7F	; 127
    2d56:	57 e4       	ldi	r21, 0x47	; 71
    2d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d5c:	18 16       	cp	r1, r24
    2d5e:	4c f5       	brge	.+82     	; 0x2db2 <STEPPER_Rotate_CW_Half_Step+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	6f a1       	ldd	r22, Y+39	; 0x27
    2d62:	78 a5       	ldd	r23, Y+40	; 0x28
    2d64:	89 a5       	ldd	r24, Y+41	; 0x29
    2d66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9a a3       	std	Y+34, r25	; 0x22
    2d86:	89 a3       	std	Y+33, r24	; 0x21
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <STEPPER_Rotate_CW_Half_Step+0x7dc>
    2d8a:	88 ec       	ldi	r24, 0xC8	; 200
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	98 a3       	std	Y+32, r25	; 0x20
    2d90:	8f 8f       	std	Y+31, r24	; 0x1f
    2d92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d94:	98 a1       	ldd	r25, Y+32	; 0x20
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <STEPPER_Rotate_CW_Half_Step+0x7ca>
    2d9a:	98 a3       	std	Y+32, r25	; 0x20
    2d9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2da0:	9a a1       	ldd	r25, Y+34	; 0x22
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	9a a3       	std	Y+34, r25	; 0x22
    2da6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da8:	89 a1       	ldd	r24, Y+33	; 0x21
    2daa:	9a a1       	ldd	r25, Y+34	; 0x22
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <STEPPER_Rotate_CW_Half_Step+0x7be>
    2db0:	14 c0       	rjmp	.+40     	; 0x2dda <STEPPER_Rotate_CW_Half_Step+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db2:	6b a1       	ldd	r22, Y+35	; 0x23
    2db4:	7c a1       	ldd	r23, Y+36	; 0x24
    2db6:	8d a1       	ldd	r24, Y+37	; 0x25
    2db8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	9a a3       	std	Y+34, r25	; 0x22
    2dc4:	89 a3       	std	Y+33, r24	; 0x21
    2dc6:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc8:	9a a1       	ldd	r25, Y+34	; 0x22
    2dca:	9e 8f       	std	Y+30, r25	; 0x1e
    2dcc:	8d 8f       	std	Y+29, r24	; 0x1d
    2dce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <STEPPER_Rotate_CW_Half_Step+0x806>
    2dd6:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	63 e0       	ldi	r22, 0x03	; 3
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	64 e0       	ldi	r22, 0x04	; 4
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_SET);
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	65 e0       	ldi	r22, 0x05	; 5
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_SET);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	66 e0       	ldi	r22, 0x06	; 6
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a0 e0       	ldi	r26, 0x00	; 0
    2e08:	b0 e4       	ldi	r27, 0x40	; 64
    2e0a:	89 8f       	std	Y+25, r24	; 0x19
    2e0c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e0e:	ab 8f       	std	Y+27, r26	; 0x1b
    2e10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	69 8d       	ldd	r22, Y+25	; 0x19
    2e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4a ef       	ldi	r20, 0xFA	; 250
    2e20:	54 e4       	ldi	r21, 0x44	; 68
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8d 8b       	std	Y+21, r24	; 0x15
    2e2c:	9e 8b       	std	Y+22, r25	; 0x16
    2e2e:	af 8b       	std	Y+23, r26	; 0x17
    2e30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e32:	6d 89       	ldd	r22, Y+21	; 0x15
    2e34:	7e 89       	ldd	r23, Y+22	; 0x16
    2e36:	8f 89       	ldd	r24, Y+23	; 0x17
    2e38:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <STEPPER_Rotate_CW_Half_Step+0x888>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9c 8b       	std	Y+20, r25	; 0x14
    2e50:	8b 8b       	std	Y+19, r24	; 0x13
    2e52:	3f c0       	rjmp	.+126    	; 0x2ed2 <STEPPER_Rotate_CW_Half_Step+0x906>
	else if (__tmp > 65535)
    2e54:	6d 89       	ldd	r22, Y+21	; 0x15
    2e56:	7e 89       	ldd	r23, Y+22	; 0x16
    2e58:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	4c f5       	brge	.+82     	; 0x2ebe <STEPPER_Rotate_CW_Half_Step+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9c 8b       	std	Y+20, r25	; 0x14
    2e92:	8b 8b       	std	Y+19, r24	; 0x13
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <STEPPER_Rotate_CW_Half_Step+0x8e8>
    2e96:	88 ec       	ldi	r24, 0xC8	; 200
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9a 8b       	std	Y+18, r25	; 0x12
    2e9c:	89 8b       	std	Y+17, r24	; 0x11
    2e9e:	89 89       	ldd	r24, Y+17	; 0x11
    2ea0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <STEPPER_Rotate_CW_Half_Step+0x8d6>
    2ea6:	9a 8b       	std	Y+18, r25	; 0x12
    2ea8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2eac:	9c 89       	ldd	r25, Y+20	; 0x14
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	9c 8b       	std	Y+20, r25	; 0x14
    2eb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <STEPPER_Rotate_CW_Half_Step+0x8ca>
    2ebc:	14 c0       	rjmp	.+40     	; 0x2ee6 <STEPPER_Rotate_CW_Half_Step+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9c 8b       	std	Y+20, r25	; 0x14
    2ed0:	8b 8b       	std	Y+19, r24	; 0x13
    2ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed6:	98 8b       	std	Y+16, r25	; 0x10
    2ed8:	8f 87       	std	Y+15, r24	; 0x0f
    2eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2edc:	98 89       	ldd	r25, Y+16	; 0x10
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <STEPPER_Rotate_CW_Half_Step+0x912>
    2ee2:	98 8b       	std	Y+16, r25	; 0x10
    2ee4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	63 e0       	ldi	r22, 0x03	; 3
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	64 e0       	ldi	r22, 0x04	; 4
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	65 e0       	ldi	r22, 0x05	; 5
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_SET);
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	66 e0       	ldi	r22, 0x06	; 6
    2f08:	41 e0       	ldi	r20, 0x01	; 1
    2f0a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a0 e0       	ldi	r26, 0x00	; 0
    2f14:	b0 e4       	ldi	r27, 0x40	; 64
    2f16:	8b 87       	std	Y+11, r24	; 0x0b
    2f18:	9c 87       	std	Y+12, r25	; 0x0c
    2f1a:	ad 87       	std	Y+13, r26	; 0x0d
    2f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4a ef       	ldi	r20, 0xFA	; 250
    2f2c:	54 e4       	ldi	r21, 0x44	; 68
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8f 83       	std	Y+7, r24	; 0x07
    2f38:	98 87       	std	Y+8, r25	; 0x08
    2f3a:	a9 87       	std	Y+9, r26	; 0x09
    2f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e8       	ldi	r20, 0x80	; 128
    2f4c:	5f e3       	ldi	r21, 0x3F	; 63
    2f4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f52:	88 23       	and	r24, r24
    2f54:	2c f4       	brge	.+10     	; 0x2f60 <STEPPER_Rotate_CW_Half_Step+0x994>
		__ticks = 1;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <STEPPER_Rotate_CW_Half_Step+0xa12>
	else if (__tmp > 65535)
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	3f ef       	ldi	r19, 0xFF	; 255
    2f6c:	4f e7       	ldi	r20, 0x7F	; 127
    2f6e:	57 e4       	ldi	r21, 0x47	; 71
    2f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f74:	18 16       	cp	r1, r24
    2f76:	4c f5       	brge	.+82     	; 0x2fca <STEPPER_Rotate_CW_Half_Step+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	0f c0       	rjmp	.+30     	; 0x2fc0 <STEPPER_Rotate_CW_Half_Step+0x9f4>
    2fa2:	88 ec       	ldi	r24, 0xC8	; 200
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	9c 81       	ldd	r25, Y+4	; 0x04
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <STEPPER_Rotate_CW_Half_Step+0x9e2>
    2fb2:	9c 83       	std	Y+4, r25	; 0x04
    2fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	00 97       	sbiw	r24, 0x00	; 0
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <STEPPER_Rotate_CW_Half_Step+0x9d6>
    2fc8:	14 c0       	rjmp	.+40     	; 0x2ff2 <STEPPER_Rotate_CW_Half_Step+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <STEPPER_Rotate_CW_Half_Step+0xa1e>
    2fee:	9a 83       	std	Y+2, r25	; 0x02
    2ff0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);


}
    2ff2:	c0 59       	subi	r28, 0x90	; 144
    2ff4:	df 4f       	sbci	r29, 0xFF	; 255
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	08 95       	ret

0000300a <STEPPER_Rotate_ACW_Half_Step>:
void STEPPER_Rotate_ACW_Half_Step(void)
{
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	c0 57       	subi	r28, 0x70	; 112
    3018:	d0 40       	sbci	r29, 0x00	; 0
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	f8 94       	cli
    301e:	de bf       	out	0x3e, r29	; 62
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	cd bf       	out	0x3d, r28	; 61

	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	63 e0       	ldi	r22, 0x03	; 3
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	64 e0       	ldi	r22, 0x04	; 4
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	65 e0       	ldi	r22, 0x05	; 5
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_SET);
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	66 e0       	ldi	r22, 0x06	; 6
    3046:	41 e0       	ldi	r20, 0x01	; 1
    3048:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    304c:	fe 01       	movw	r30, r28
    304e:	e3 59       	subi	r30, 0x93	; 147
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	a0 e0       	ldi	r26, 0x00	; 0
    3058:	b0 e4       	ldi	r27, 0x40	; 64
    305a:	80 83       	st	Z, r24
    305c:	91 83       	std	Z+1, r25	; 0x01
    305e:	a2 83       	std	Z+2, r26	; 0x02
    3060:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3062:	8e 01       	movw	r16, r28
    3064:	07 59       	subi	r16, 0x97	; 151
    3066:	1f 4f       	sbci	r17, 0xFF	; 255
    3068:	fe 01       	movw	r30, r28
    306a:	e3 59       	subi	r30, 0x93	; 147
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	60 81       	ld	r22, Z
    3070:	71 81       	ldd	r23, Z+1	; 0x01
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	4a ef       	ldi	r20, 0xFA	; 250
    307c:	54 e4       	ldi	r21, 0x44	; 68
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	f8 01       	movw	r30, r16
    3088:	80 83       	st	Z, r24
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	a2 83       	std	Z+2, r26	; 0x02
    308e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3090:	fe 01       	movw	r30, r28
    3092:	e7 59       	subi	r30, 0x97	; 151
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	60 81       	ld	r22, Z
    3098:	71 81       	ldd	r23, Z+1	; 0x01
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	93 81       	ldd	r25, Z+3	; 0x03
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e8       	ldi	r20, 0x80	; 128
    30a4:	5f e3       	ldi	r21, 0x3F	; 63
    30a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30aa:	88 23       	and	r24, r24
    30ac:	44 f4       	brge	.+16     	; 0x30be <STEPPER_Rotate_ACW_Half_Step+0xb4>
		__ticks = 1;
    30ae:	fe 01       	movw	r30, r28
    30b0:	e9 59       	subi	r30, 0x99	; 153
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	80 83       	st	Z, r24
    30bc:	64 c0       	rjmp	.+200    	; 0x3186 <STEPPER_Rotate_ACW_Half_Step+0x17c>
	else if (__tmp > 65535)
    30be:	fe 01       	movw	r30, r28
    30c0:	e7 59       	subi	r30, 0x97	; 151
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	3f ef       	ldi	r19, 0xFF	; 255
    30d0:	4f e7       	ldi	r20, 0x7F	; 127
    30d2:	57 e4       	ldi	r21, 0x47	; 71
    30d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30d8:	18 16       	cp	r1, r24
    30da:	0c f0       	brlt	.+2      	; 0x30de <STEPPER_Rotate_ACW_Half_Step+0xd4>
    30dc:	43 c0       	rjmp	.+134    	; 0x3164 <STEPPER_Rotate_ACW_Half_Step+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30de:	fe 01       	movw	r30, r28
    30e0:	e3 59       	subi	r30, 0x93	; 147
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	60 81       	ld	r22, Z
    30e6:	71 81       	ldd	r23, Z+1	; 0x01
    30e8:	82 81       	ldd	r24, Z+2	; 0x02
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e2       	ldi	r20, 0x20	; 32
    30f2:	51 e4       	ldi	r21, 0x41	; 65
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	8e 01       	movw	r16, r28
    30fe:	09 59       	subi	r16, 0x99	; 153
    3100:	1f 4f       	sbci	r17, 0xFF	; 255
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	f8 01       	movw	r30, r16
    3110:	91 83       	std	Z+1, r25	; 0x01
    3112:	80 83       	st	Z, r24
    3114:	1f c0       	rjmp	.+62     	; 0x3154 <STEPPER_Rotate_ACW_Half_Step+0x14a>
    3116:	fe 01       	movw	r30, r28
    3118:	eb 59       	subi	r30, 0x9B	; 155
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	88 ec       	ldi	r24, 0xC8	; 200
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	80 83       	st	Z, r24
    3124:	fe 01       	movw	r30, r28
    3126:	eb 59       	subi	r30, 0x9B	; 155
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	f1 f7       	brne	.-4      	; 0x312e <STEPPER_Rotate_ACW_Half_Step+0x124>
    3132:	fe 01       	movw	r30, r28
    3134:	eb 59       	subi	r30, 0x9B	; 155
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313c:	de 01       	movw	r26, r28
    313e:	a9 59       	subi	r26, 0x99	; 153
    3140:	bf 4f       	sbci	r27, 0xFF	; 255
    3142:	fe 01       	movw	r30, r28
    3144:	e9 59       	subi	r30, 0x99	; 153
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	80 81       	ld	r24, Z
    314a:	91 81       	ldd	r25, Z+1	; 0x01
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	11 96       	adiw	r26, 0x01	; 1
    3150:	9c 93       	st	X, r25
    3152:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3154:	fe 01       	movw	r30, r28
    3156:	e9 59       	subi	r30, 0x99	; 153
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 81       	ld	r24, Z
    315c:	91 81       	ldd	r25, Z+1	; 0x01
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	d1 f6       	brne	.-76     	; 0x3116 <STEPPER_Rotate_ACW_Half_Step+0x10c>
    3162:	27 c0       	rjmp	.+78     	; 0x31b2 <STEPPER_Rotate_ACW_Half_Step+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3164:	8e 01       	movw	r16, r28
    3166:	09 59       	subi	r16, 0x99	; 153
    3168:	1f 4f       	sbci	r17, 0xFF	; 255
    316a:	fe 01       	movw	r30, r28
    316c:	e7 59       	subi	r30, 0x97	; 151
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	f8 01       	movw	r30, r16
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	80 83       	st	Z, r24
    3186:	de 01       	movw	r26, r28
    3188:	ad 59       	subi	r26, 0x9D	; 157
    318a:	bf 4f       	sbci	r27, 0xFF	; 255
    318c:	fe 01       	movw	r30, r28
    318e:	e9 59       	subi	r30, 0x99	; 153
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	8d 93       	st	X+, r24
    3198:	9c 93       	st	X, r25
    319a:	fe 01       	movw	r30, r28
    319c:	ed 59       	subi	r30, 0x9D	; 157
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 81       	ld	r24, Z
    31a2:	91 81       	ldd	r25, Z+1	; 0x01
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <STEPPER_Rotate_ACW_Half_Step+0x19a>
    31a8:	fe 01       	movw	r30, r28
    31aa:	ed 59       	subi	r30, 0x9D	; 157
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	91 83       	std	Z+1, r25	; 0x01
    31b0:	80 83       	st	Z, r24
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	63 e0       	ldi	r22, 0x03	; 3
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	64 e0       	ldi	r22, 0x04	; 4
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_SET);
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	65 e0       	ldi	r22, 0x05	; 5
    31ca:	41 e0       	ldi	r20, 0x01	; 1
    31cc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_SET);
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	66 e0       	ldi	r22, 0x06	; 6
    31d4:	41 e0       	ldi	r20, 0x01	; 1
    31d6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    31da:	fe 01       	movw	r30, r28
    31dc:	e1 5a       	subi	r30, 0xA1	; 161
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a0 e0       	ldi	r26, 0x00	; 0
    31e6:	b0 e4       	ldi	r27, 0x40	; 64
    31e8:	80 83       	st	Z, r24
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	a2 83       	std	Z+2, r26	; 0x02
    31ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f0:	8e 01       	movw	r16, r28
    31f2:	05 5a       	subi	r16, 0xA5	; 165
    31f4:	1f 4f       	sbci	r17, 0xFF	; 255
    31f6:	fe 01       	movw	r30, r28
    31f8:	e1 5a       	subi	r30, 0xA1	; 161
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	60 81       	ld	r22, Z
    31fe:	71 81       	ldd	r23, Z+1	; 0x01
    3200:	82 81       	ldd	r24, Z+2	; 0x02
    3202:	93 81       	ldd	r25, Z+3	; 0x03
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	4a ef       	ldi	r20, 0xFA	; 250
    320a:	54 e4       	ldi	r21, 0x44	; 68
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	f8 01       	movw	r30, r16
    3216:	80 83       	st	Z, r24
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	a2 83       	std	Z+2, r26	; 0x02
    321c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    321e:	fe 01       	movw	r30, r28
    3220:	e5 5a       	subi	r30, 0xA5	; 165
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	44 f4       	brge	.+16     	; 0x324c <STEPPER_Rotate_ACW_Half_Step+0x242>
		__ticks = 1;
    323c:	fe 01       	movw	r30, r28
    323e:	e7 5a       	subi	r30, 0xA7	; 167
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	91 83       	std	Z+1, r25	; 0x01
    3248:	80 83       	st	Z, r24
    324a:	64 c0       	rjmp	.+200    	; 0x3314 <STEPPER_Rotate_ACW_Half_Step+0x30a>
	else if (__tmp > 65535)
    324c:	fe 01       	movw	r30, r28
    324e:	e5 5a       	subi	r30, 0xA5	; 165
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	60 81       	ld	r22, Z
    3254:	71 81       	ldd	r23, Z+1	; 0x01
    3256:	82 81       	ldd	r24, Z+2	; 0x02
    3258:	93 81       	ldd	r25, Z+3	; 0x03
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	3f ef       	ldi	r19, 0xFF	; 255
    325e:	4f e7       	ldi	r20, 0x7F	; 127
    3260:	57 e4       	ldi	r21, 0x47	; 71
    3262:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3266:	18 16       	cp	r1, r24
    3268:	0c f0       	brlt	.+2      	; 0x326c <STEPPER_Rotate_ACW_Half_Step+0x262>
    326a:	43 c0       	rjmp	.+134    	; 0x32f2 <STEPPER_Rotate_ACW_Half_Step+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	fe 01       	movw	r30, r28
    326e:	e1 5a       	subi	r30, 0xA1	; 161
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
    3276:	82 81       	ldd	r24, Z+2	; 0x02
    3278:	93 81       	ldd	r25, Z+3	; 0x03
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	8e 01       	movw	r16, r28
    328c:	07 5a       	subi	r16, 0xA7	; 167
    328e:	1f 4f       	sbci	r17, 0xFF	; 255
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	f8 01       	movw	r30, r16
    329e:	91 83       	std	Z+1, r25	; 0x01
    32a0:	80 83       	st	Z, r24
    32a2:	1f c0       	rjmp	.+62     	; 0x32e2 <STEPPER_Rotate_ACW_Half_Step+0x2d8>
    32a4:	fe 01       	movw	r30, r28
    32a6:	e9 5a       	subi	r30, 0xA9	; 169
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	88 ec       	ldi	r24, 0xC8	; 200
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	91 83       	std	Z+1, r25	; 0x01
    32b0:	80 83       	st	Z, r24
    32b2:	fe 01       	movw	r30, r28
    32b4:	e9 5a       	subi	r30, 0xA9	; 169
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <STEPPER_Rotate_ACW_Half_Step+0x2b2>
    32c0:	fe 01       	movw	r30, r28
    32c2:	e9 5a       	subi	r30, 0xA9	; 169
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ca:	de 01       	movw	r26, r28
    32cc:	a7 5a       	subi	r26, 0xA7	; 167
    32ce:	bf 4f       	sbci	r27, 0xFF	; 255
    32d0:	fe 01       	movw	r30, r28
    32d2:	e7 5a       	subi	r30, 0xA7	; 167
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	11 96       	adiw	r26, 0x01	; 1
    32de:	9c 93       	st	X, r25
    32e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e2:	fe 01       	movw	r30, r28
    32e4:	e7 5a       	subi	r30, 0xA7	; 167
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 81       	ld	r24, Z
    32ea:	91 81       	ldd	r25, Z+1	; 0x01
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	d1 f6       	brne	.-76     	; 0x32a4 <STEPPER_Rotate_ACW_Half_Step+0x29a>
    32f0:	27 c0       	rjmp	.+78     	; 0x3340 <STEPPER_Rotate_ACW_Half_Step+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	8e 01       	movw	r16, r28
    32f4:	07 5a       	subi	r16, 0xA7	; 167
    32f6:	1f 4f       	sbci	r17, 0xFF	; 255
    32f8:	fe 01       	movw	r30, r28
    32fa:	e5 5a       	subi	r30, 0xA5	; 165
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	60 81       	ld	r22, Z
    3300:	71 81       	ldd	r23, Z+1	; 0x01
    3302:	82 81       	ldd	r24, Z+2	; 0x02
    3304:	93 81       	ldd	r25, Z+3	; 0x03
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	f8 01       	movw	r30, r16
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
    3314:	de 01       	movw	r26, r28
    3316:	ab 5a       	subi	r26, 0xAB	; 171
    3318:	bf 4f       	sbci	r27, 0xFF	; 255
    331a:	fe 01       	movw	r30, r28
    331c:	e7 5a       	subi	r30, 0xA7	; 167
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	91 81       	ldd	r25, Z+1	; 0x01
    3324:	8d 93       	st	X+, r24
    3326:	9c 93       	st	X, r25
    3328:	fe 01       	movw	r30, r28
    332a:	eb 5a       	subi	r30, 0xAB	; 171
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	80 81       	ld	r24, Z
    3330:	91 81       	ldd	r25, Z+1	; 0x01
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <STEPPER_Rotate_ACW_Half_Step+0x328>
    3336:	fe 01       	movw	r30, r28
    3338:	eb 5a       	subi	r30, 0xAB	; 171
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	91 83       	std	Z+1, r25	; 0x01
    333e:	80 83       	st	Z, r24
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	63 e0       	ldi	r22, 0x03	; 3
    3344:	40 e0       	ldi	r20, 0x00	; 0
    3346:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	64 e0       	ldi	r22, 0x04	; 4
    334e:	40 e0       	ldi	r20, 0x00	; 0
    3350:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_SET);
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	65 e0       	ldi	r22, 0x05	; 5
    3358:	41 e0       	ldi	r20, 0x01	; 1
    335a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	66 e0       	ldi	r22, 0x06	; 6
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    3368:	fe 01       	movw	r30, r28
    336a:	ef 5a       	subi	r30, 0xAF	; 175
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	a0 e0       	ldi	r26, 0x00	; 0
    3374:	b0 e4       	ldi	r27, 0x40	; 64
    3376:	80 83       	st	Z, r24
    3378:	91 83       	std	Z+1, r25	; 0x01
    337a:	a2 83       	std	Z+2, r26	; 0x02
    337c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337e:	8e 01       	movw	r16, r28
    3380:	03 5b       	subi	r16, 0xB3	; 179
    3382:	1f 4f       	sbci	r17, 0xFF	; 255
    3384:	fe 01       	movw	r30, r28
    3386:	ef 5a       	subi	r30, 0xAF	; 175
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	60 81       	ld	r22, Z
    338c:	71 81       	ldd	r23, Z+1	; 0x01
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	4a ef       	ldi	r20, 0xFA	; 250
    3398:	54 e4       	ldi	r21, 0x44	; 68
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	f8 01       	movw	r30, r16
    33a4:	80 83       	st	Z, r24
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	a2 83       	std	Z+2, r26	; 0x02
    33aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33ac:	fe 01       	movw	r30, r28
    33ae:	e3 5b       	subi	r30, 0xB3	; 179
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	60 81       	ld	r22, Z
    33b4:	71 81       	ldd	r23, Z+1	; 0x01
    33b6:	82 81       	ldd	r24, Z+2	; 0x02
    33b8:	93 81       	ldd	r25, Z+3	; 0x03
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e8       	ldi	r20, 0x80	; 128
    33c0:	5f e3       	ldi	r21, 0x3F	; 63
    33c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c6:	88 23       	and	r24, r24
    33c8:	44 f4       	brge	.+16     	; 0x33da <STEPPER_Rotate_ACW_Half_Step+0x3d0>
		__ticks = 1;
    33ca:	fe 01       	movw	r30, r28
    33cc:	e5 5b       	subi	r30, 0xB5	; 181
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24
    33d8:	64 c0       	rjmp	.+200    	; 0x34a2 <STEPPER_Rotate_ACW_Half_Step+0x498>
	else if (__tmp > 65535)
    33da:	fe 01       	movw	r30, r28
    33dc:	e3 5b       	subi	r30, 0xB3	; 179
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	3f ef       	ldi	r19, 0xFF	; 255
    33ec:	4f e7       	ldi	r20, 0x7F	; 127
    33ee:	57 e4       	ldi	r21, 0x47	; 71
    33f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33f4:	18 16       	cp	r1, r24
    33f6:	0c f0       	brlt	.+2      	; 0x33fa <STEPPER_Rotate_ACW_Half_Step+0x3f0>
    33f8:	43 c0       	rjmp	.+134    	; 0x3480 <STEPPER_Rotate_ACW_Half_Step+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fa:	fe 01       	movw	r30, r28
    33fc:	ef 5a       	subi	r30, 0xAF	; 175
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	60 81       	ld	r22, Z
    3402:	71 81       	ldd	r23, Z+1	; 0x01
    3404:	82 81       	ldd	r24, Z+2	; 0x02
    3406:	93 81       	ldd	r25, Z+3	; 0x03
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	40 e2       	ldi	r20, 0x20	; 32
    340e:	51 e4       	ldi	r21, 0x41	; 65
    3410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	8e 01       	movw	r16, r28
    341a:	05 5b       	subi	r16, 0xB5	; 181
    341c:	1f 4f       	sbci	r17, 0xFF	; 255
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	f8 01       	movw	r30, r16
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	80 83       	st	Z, r24
    3430:	1f c0       	rjmp	.+62     	; 0x3470 <STEPPER_Rotate_ACW_Half_Step+0x466>
    3432:	fe 01       	movw	r30, r28
    3434:	e7 5b       	subi	r30, 0xB7	; 183
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	88 ec       	ldi	r24, 0xC8	; 200
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	80 83       	st	Z, r24
    3440:	fe 01       	movw	r30, r28
    3442:	e7 5b       	subi	r30, 0xB7	; 183
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <STEPPER_Rotate_ACW_Half_Step+0x440>
    344e:	fe 01       	movw	r30, r28
    3450:	e7 5b       	subi	r30, 0xB7	; 183
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3458:	de 01       	movw	r26, r28
    345a:	a5 5b       	subi	r26, 0xB5	; 181
    345c:	bf 4f       	sbci	r27, 0xFF	; 255
    345e:	fe 01       	movw	r30, r28
    3460:	e5 5b       	subi	r30, 0xB5	; 181
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	11 96       	adiw	r26, 0x01	; 1
    346c:	9c 93       	st	X, r25
    346e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3470:	fe 01       	movw	r30, r28
    3472:	e5 5b       	subi	r30, 0xB5	; 181
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	80 81       	ld	r24, Z
    3478:	91 81       	ldd	r25, Z+1	; 0x01
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	d1 f6       	brne	.-76     	; 0x3432 <STEPPER_Rotate_ACW_Half_Step+0x428>
    347e:	27 c0       	rjmp	.+78     	; 0x34ce <STEPPER_Rotate_ACW_Half_Step+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	8e 01       	movw	r16, r28
    3482:	05 5b       	subi	r16, 0xB5	; 181
    3484:	1f 4f       	sbci	r17, 0xFF	; 255
    3486:	fe 01       	movw	r30, r28
    3488:	e3 5b       	subi	r30, 0xB3	; 179
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	60 81       	ld	r22, Z
    348e:	71 81       	ldd	r23, Z+1	; 0x01
    3490:	82 81       	ldd	r24, Z+2	; 0x02
    3492:	93 81       	ldd	r25, Z+3	; 0x03
    3494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	f8 01       	movw	r30, r16
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
    34a2:	de 01       	movw	r26, r28
    34a4:	a9 5b       	subi	r26, 0xB9	; 185
    34a6:	bf 4f       	sbci	r27, 0xFF	; 255
    34a8:	fe 01       	movw	r30, r28
    34aa:	e5 5b       	subi	r30, 0xB5	; 181
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	80 81       	ld	r24, Z
    34b0:	91 81       	ldd	r25, Z+1	; 0x01
    34b2:	8d 93       	st	X+, r24
    34b4:	9c 93       	st	X, r25
    34b6:	fe 01       	movw	r30, r28
    34b8:	e9 5b       	subi	r30, 0xB9	; 185
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	80 81       	ld	r24, Z
    34be:	91 81       	ldd	r25, Z+1	; 0x01
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	f1 f7       	brne	.-4      	; 0x34c0 <STEPPER_Rotate_ACW_Half_Step+0x4b6>
    34c4:	fe 01       	movw	r30, r28
    34c6:	e9 5b       	subi	r30, 0xB9	; 185
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	80 83       	st	Z, r24
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	63 e0       	ldi	r22, 0x03	; 3
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_SET);
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	64 e0       	ldi	r22, 0x04	; 4
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_SET);
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	65 e0       	ldi	r22, 0x05	; 5
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	66 e0       	ldi	r22, 0x06	; 6
    34f0:	40 e0       	ldi	r20, 0x00	; 0
    34f2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    34f6:	fe 01       	movw	r30, r28
    34f8:	ed 5b       	subi	r30, 0xBD	; 189
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	a0 e0       	ldi	r26, 0x00	; 0
    3502:	b0 e4       	ldi	r27, 0x40	; 64
    3504:	80 83       	st	Z, r24
    3506:	91 83       	std	Z+1, r25	; 0x01
    3508:	a2 83       	std	Z+2, r26	; 0x02
    350a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350c:	8e 01       	movw	r16, r28
    350e:	01 5c       	subi	r16, 0xC1	; 193
    3510:	1f 4f       	sbci	r17, 0xFF	; 255
    3512:	fe 01       	movw	r30, r28
    3514:	ed 5b       	subi	r30, 0xBD	; 189
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	60 81       	ld	r22, Z
    351a:	71 81       	ldd	r23, Z+1	; 0x01
    351c:	82 81       	ldd	r24, Z+2	; 0x02
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	4a ef       	ldi	r20, 0xFA	; 250
    3526:	54 e4       	ldi	r21, 0x44	; 68
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	f8 01       	movw	r30, r16
    3532:	80 83       	st	Z, r24
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	a2 83       	std	Z+2, r26	; 0x02
    3538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    353a:	fe 01       	movw	r30, r28
    353c:	ff 96       	adiw	r30, 0x3f	; 63
    353e:	60 81       	ld	r22, Z
    3540:	71 81       	ldd	r23, Z+1	; 0x01
    3542:	82 81       	ldd	r24, Z+2	; 0x02
    3544:	93 81       	ldd	r25, Z+3	; 0x03
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	5f e3       	ldi	r21, 0x3F	; 63
    354e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3552:	88 23       	and	r24, r24
    3554:	2c f4       	brge	.+10     	; 0x3560 <STEPPER_Rotate_ACW_Half_Step+0x556>
		__ticks = 1;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9e af       	std	Y+62, r25	; 0x3e
    355c:	8d af       	std	Y+61, r24	; 0x3d
    355e:	46 c0       	rjmp	.+140    	; 0x35ec <STEPPER_Rotate_ACW_Half_Step+0x5e2>
	else if (__tmp > 65535)
    3560:	fe 01       	movw	r30, r28
    3562:	ff 96       	adiw	r30, 0x3f	; 63
    3564:	60 81       	ld	r22, Z
    3566:	71 81       	ldd	r23, Z+1	; 0x01
    3568:	82 81       	ldd	r24, Z+2	; 0x02
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	3f ef       	ldi	r19, 0xFF	; 255
    3570:	4f e7       	ldi	r20, 0x7F	; 127
    3572:	57 e4       	ldi	r21, 0x47	; 71
    3574:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3578:	18 16       	cp	r1, r24
    357a:	64 f5       	brge	.+88     	; 0x35d4 <STEPPER_Rotate_ACW_Half_Step+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357c:	fe 01       	movw	r30, r28
    357e:	ed 5b       	subi	r30, 0xBD	; 189
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	60 81       	ld	r22, Z
    3584:	71 81       	ldd	r23, Z+1	; 0x01
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e2       	ldi	r20, 0x20	; 32
    3590:	51 e4       	ldi	r21, 0x41	; 65
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9e af       	std	Y+62, r25	; 0x3e
    35a8:	8d af       	std	Y+61, r24	; 0x3d
    35aa:	0f c0       	rjmp	.+30     	; 0x35ca <STEPPER_Rotate_ACW_Half_Step+0x5c0>
    35ac:	88 ec       	ldi	r24, 0xC8	; 200
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9c af       	std	Y+60, r25	; 0x3c
    35b2:	8b af       	std	Y+59, r24	; 0x3b
    35b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    35b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <STEPPER_Rotate_ACW_Half_Step+0x5ae>
    35bc:	9c af       	std	Y+60, r25	; 0x3c
    35be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    35c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	9e af       	std	Y+62, r25	; 0x3e
    35c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    35cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	69 f7       	brne	.-38     	; 0x35ac <STEPPER_Rotate_ACW_Half_Step+0x5a2>
    35d2:	16 c0       	rjmp	.+44     	; 0x3600 <STEPPER_Rotate_ACW_Half_Step+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d4:	fe 01       	movw	r30, r28
    35d6:	ff 96       	adiw	r30, 0x3f	; 63
    35d8:	60 81       	ld	r22, Z
    35da:	71 81       	ldd	r23, Z+1	; 0x01
    35dc:	82 81       	ldd	r24, Z+2	; 0x02
    35de:	93 81       	ldd	r25, Z+3	; 0x03
    35e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	9e af       	std	Y+62, r25	; 0x3e
    35ea:	8d af       	std	Y+61, r24	; 0x3d
    35ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    35ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    35f0:	9a af       	std	Y+58, r25	; 0x3a
    35f2:	89 af       	std	Y+57, r24	; 0x39
    35f4:	89 ad       	ldd	r24, Y+57	; 0x39
    35f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <STEPPER_Rotate_ACW_Half_Step+0x5ee>
    35fc:	9a af       	std	Y+58, r25	; 0x3a
    35fe:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);

	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_RESET);
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	63 e0       	ldi	r22, 0x03	; 3
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_SET);
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	64 e0       	ldi	r22, 0x04	; 4
    360e:	41 e0       	ldi	r20, 0x01	; 1
    3610:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	65 e0       	ldi	r22, 0x05	; 5
    3618:	40 e0       	ldi	r20, 0x00	; 0
    361a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	66 e0       	ldi	r22, 0x06	; 6
    3622:	40 e0       	ldi	r20, 0x00	; 0
    3624:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	a0 e0       	ldi	r26, 0x00	; 0
    362e:	b0 e4       	ldi	r27, 0x40	; 64
    3630:	8d ab       	std	Y+53, r24	; 0x35
    3632:	9e ab       	std	Y+54, r25	; 0x36
    3634:	af ab       	std	Y+55, r26	; 0x37
    3636:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3638:	6d a9       	ldd	r22, Y+53	; 0x35
    363a:	7e a9       	ldd	r23, Y+54	; 0x36
    363c:	8f a9       	ldd	r24, Y+55	; 0x37
    363e:	98 ad       	ldd	r25, Y+56	; 0x38
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	4a ef       	ldi	r20, 0xFA	; 250
    3646:	54 e4       	ldi	r21, 0x44	; 68
    3648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	89 ab       	std	Y+49, r24	; 0x31
    3652:	9a ab       	std	Y+50, r25	; 0x32
    3654:	ab ab       	std	Y+51, r26	; 0x33
    3656:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3658:	69 a9       	ldd	r22, Y+49	; 0x31
    365a:	7a a9       	ldd	r23, Y+50	; 0x32
    365c:	8b a9       	ldd	r24, Y+51	; 0x33
    365e:	9c a9       	ldd	r25, Y+52	; 0x34
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e8       	ldi	r20, 0x80	; 128
    3666:	5f e3       	ldi	r21, 0x3F	; 63
    3668:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    366c:	88 23       	and	r24, r24
    366e:	2c f4       	brge	.+10     	; 0x367a <STEPPER_Rotate_ACW_Half_Step+0x670>
		__ticks = 1;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	98 ab       	std	Y+48, r25	; 0x30
    3676:	8f a7       	std	Y+47, r24	; 0x2f
    3678:	3f c0       	rjmp	.+126    	; 0x36f8 <STEPPER_Rotate_ACW_Half_Step+0x6ee>
	else if (__tmp > 65535)
    367a:	69 a9       	ldd	r22, Y+49	; 0x31
    367c:	7a a9       	ldd	r23, Y+50	; 0x32
    367e:	8b a9       	ldd	r24, Y+51	; 0x33
    3680:	9c a9       	ldd	r25, Y+52	; 0x34
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	3f ef       	ldi	r19, 0xFF	; 255
    3686:	4f e7       	ldi	r20, 0x7F	; 127
    3688:	57 e4       	ldi	r21, 0x47	; 71
    368a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    368e:	18 16       	cp	r1, r24
    3690:	4c f5       	brge	.+82     	; 0x36e4 <STEPPER_Rotate_ACW_Half_Step+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3692:	6d a9       	ldd	r22, Y+53	; 0x35
    3694:	7e a9       	ldd	r23, Y+54	; 0x36
    3696:	8f a9       	ldd	r24, Y+55	; 0x37
    3698:	98 ad       	ldd	r25, Y+56	; 0x38
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e2       	ldi	r20, 0x20	; 32
    36a0:	51 e4       	ldi	r21, 0x41	; 65
    36a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	bc 01       	movw	r22, r24
    36ac:	cd 01       	movw	r24, r26
    36ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	98 ab       	std	Y+48, r25	; 0x30
    36b8:	8f a7       	std	Y+47, r24	; 0x2f
    36ba:	0f c0       	rjmp	.+30     	; 0x36da <STEPPER_Rotate_ACW_Half_Step+0x6d0>
    36bc:	88 ec       	ldi	r24, 0xC8	; 200
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9e a7       	std	Y+46, r25	; 0x2e
    36c2:	8d a7       	std	Y+45, r24	; 0x2d
    36c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    36c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <STEPPER_Rotate_ACW_Half_Step+0x6be>
    36cc:	9e a7       	std	Y+46, r25	; 0x2e
    36ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    36d2:	98 a9       	ldd	r25, Y+48	; 0x30
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	98 ab       	std	Y+48, r25	; 0x30
    36d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36da:	8f a5       	ldd	r24, Y+47	; 0x2f
    36dc:	98 a9       	ldd	r25, Y+48	; 0x30
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	69 f7       	brne	.-38     	; 0x36bc <STEPPER_Rotate_ACW_Half_Step+0x6b2>
    36e2:	14 c0       	rjmp	.+40     	; 0x370c <STEPPER_Rotate_ACW_Half_Step+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e4:	69 a9       	ldd	r22, Y+49	; 0x31
    36e6:	7a a9       	ldd	r23, Y+50	; 0x32
    36e8:	8b a9       	ldd	r24, Y+51	; 0x33
    36ea:	9c a9       	ldd	r25, Y+52	; 0x34
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	98 ab       	std	Y+48, r25	; 0x30
    36f6:	8f a7       	std	Y+47, r24	; 0x2f
    36f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    36fa:	98 a9       	ldd	r25, Y+48	; 0x30
    36fc:	9c a7       	std	Y+44, r25	; 0x2c
    36fe:	8b a7       	std	Y+43, r24	; 0x2b
    3700:	8b a5       	ldd	r24, Y+43	; 0x2b
    3702:	9c a5       	ldd	r25, Y+44	; 0x2c
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <STEPPER_Rotate_ACW_Half_Step+0x6fa>
    3708:	9c a7       	std	Y+44, r25	; 0x2c
    370a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_SET);
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	63 e0       	ldi	r22, 0x03	; 3
    3710:	41 e0       	ldi	r20, 0x01	; 1
    3712:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_SET);
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	64 e0       	ldi	r22, 0x04	; 4
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	65 e0       	ldi	r22, 0x05	; 5
    3724:	40 e0       	ldi	r20, 0x00	; 0
    3726:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	66 e0       	ldi	r22, 0x06	; 6
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	a0 e0       	ldi	r26, 0x00	; 0
    373a:	b0 e4       	ldi	r27, 0x40	; 64
    373c:	8f a3       	std	Y+39, r24	; 0x27
    373e:	98 a7       	std	Y+40, r25	; 0x28
    3740:	a9 a7       	std	Y+41, r26	; 0x29
    3742:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3744:	6f a1       	ldd	r22, Y+39	; 0x27
    3746:	78 a5       	ldd	r23, Y+40	; 0x28
    3748:	89 a5       	ldd	r24, Y+41	; 0x29
    374a:	9a a5       	ldd	r25, Y+42	; 0x2a
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	4a ef       	ldi	r20, 0xFA	; 250
    3752:	54 e4       	ldi	r21, 0x44	; 68
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	8b a3       	std	Y+35, r24	; 0x23
    375e:	9c a3       	std	Y+36, r25	; 0x24
    3760:	ad a3       	std	Y+37, r26	; 0x25
    3762:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3764:	6b a1       	ldd	r22, Y+35	; 0x23
    3766:	7c a1       	ldd	r23, Y+36	; 0x24
    3768:	8d a1       	ldd	r24, Y+37	; 0x25
    376a:	9e a1       	ldd	r25, Y+38	; 0x26
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e8       	ldi	r20, 0x80	; 128
    3772:	5f e3       	ldi	r21, 0x3F	; 63
    3774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3778:	88 23       	and	r24, r24
    377a:	2c f4       	brge	.+10     	; 0x3786 <STEPPER_Rotate_ACW_Half_Step+0x77c>
		__ticks = 1;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	9a a3       	std	Y+34, r25	; 0x22
    3782:	89 a3       	std	Y+33, r24	; 0x21
    3784:	3f c0       	rjmp	.+126    	; 0x3804 <STEPPER_Rotate_ACW_Half_Step+0x7fa>
	else if (__tmp > 65535)
    3786:	6b a1       	ldd	r22, Y+35	; 0x23
    3788:	7c a1       	ldd	r23, Y+36	; 0x24
    378a:	8d a1       	ldd	r24, Y+37	; 0x25
    378c:	9e a1       	ldd	r25, Y+38	; 0x26
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	3f ef       	ldi	r19, 0xFF	; 255
    3792:	4f e7       	ldi	r20, 0x7F	; 127
    3794:	57 e4       	ldi	r21, 0x47	; 71
    3796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    379a:	18 16       	cp	r1, r24
    379c:	4c f5       	brge	.+82     	; 0x37f0 <STEPPER_Rotate_ACW_Half_Step+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379e:	6f a1       	ldd	r22, Y+39	; 0x27
    37a0:	78 a5       	ldd	r23, Y+40	; 0x28
    37a2:	89 a5       	ldd	r24, Y+41	; 0x29
    37a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e2       	ldi	r20, 0x20	; 32
    37ac:	51 e4       	ldi	r21, 0x41	; 65
    37ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	9a a3       	std	Y+34, r25	; 0x22
    37c4:	89 a3       	std	Y+33, r24	; 0x21
    37c6:	0f c0       	rjmp	.+30     	; 0x37e6 <STEPPER_Rotate_ACW_Half_Step+0x7dc>
    37c8:	88 ec       	ldi	r24, 0xC8	; 200
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	98 a3       	std	Y+32, r25	; 0x20
    37ce:	8f 8f       	std	Y+31, r24	; 0x1f
    37d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37d2:	98 a1       	ldd	r25, Y+32	; 0x20
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <STEPPER_Rotate_ACW_Half_Step+0x7ca>
    37d8:	98 a3       	std	Y+32, r25	; 0x20
    37da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37dc:	89 a1       	ldd	r24, Y+33	; 0x21
    37de:	9a a1       	ldd	r25, Y+34	; 0x22
    37e0:	01 97       	sbiw	r24, 0x01	; 1
    37e2:	9a a3       	std	Y+34, r25	; 0x22
    37e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e6:	89 a1       	ldd	r24, Y+33	; 0x21
    37e8:	9a a1       	ldd	r25, Y+34	; 0x22
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	69 f7       	brne	.-38     	; 0x37c8 <STEPPER_Rotate_ACW_Half_Step+0x7be>
    37ee:	14 c0       	rjmp	.+40     	; 0x3818 <STEPPER_Rotate_ACW_Half_Step+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f0:	6b a1       	ldd	r22, Y+35	; 0x23
    37f2:	7c a1       	ldd	r23, Y+36	; 0x24
    37f4:	8d a1       	ldd	r24, Y+37	; 0x25
    37f6:	9e a1       	ldd	r25, Y+38	; 0x26
    37f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	9a a3       	std	Y+34, r25	; 0x22
    3802:	89 a3       	std	Y+33, r24	; 0x21
    3804:	89 a1       	ldd	r24, Y+33	; 0x21
    3806:	9a a1       	ldd	r25, Y+34	; 0x22
    3808:	9e 8f       	std	Y+30, r25	; 0x1e
    380a:	8d 8f       	std	Y+29, r24	; 0x1d
    380c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    380e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <STEPPER_Rotate_ACW_Half_Step+0x806>
    3814:	9e 8f       	std	Y+30, r25	; 0x1e
    3816:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_SET);
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	63 e0       	ldi	r22, 0x03	; 3
    381c:	41 e0       	ldi	r20, 0x01	; 1
    381e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	64 e0       	ldi	r22, 0x04	; 4
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	65 e0       	ldi	r22, 0x05	; 5
    3830:	40 e0       	ldi	r20, 0x00	; 0
    3832:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_RESET);
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	66 e0       	ldi	r22, 0x06	; 6
    383a:	40 e0       	ldi	r20, 0x00	; 0
    383c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	a0 e0       	ldi	r26, 0x00	; 0
    3846:	b0 e4       	ldi	r27, 0x40	; 64
    3848:	89 8f       	std	Y+25, r24	; 0x19
    384a:	9a 8f       	std	Y+26, r25	; 0x1a
    384c:	ab 8f       	std	Y+27, r26	; 0x1b
    384e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3850:	69 8d       	ldd	r22, Y+25	; 0x19
    3852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	4a ef       	ldi	r20, 0xFA	; 250
    385e:	54 e4       	ldi	r21, 0x44	; 68
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	8d 8b       	std	Y+21, r24	; 0x15
    386a:	9e 8b       	std	Y+22, r25	; 0x16
    386c:	af 8b       	std	Y+23, r26	; 0x17
    386e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3870:	6d 89       	ldd	r22, Y+21	; 0x15
    3872:	7e 89       	ldd	r23, Y+22	; 0x16
    3874:	8f 89       	ldd	r24, Y+23	; 0x17
    3876:	98 8d       	ldd	r25, Y+24	; 0x18
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	40 e8       	ldi	r20, 0x80	; 128
    387e:	5f e3       	ldi	r21, 0x3F	; 63
    3880:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3884:	88 23       	and	r24, r24
    3886:	2c f4       	brge	.+10     	; 0x3892 <STEPPER_Rotate_ACW_Half_Step+0x888>
		__ticks = 1;
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	9c 8b       	std	Y+20, r25	; 0x14
    388e:	8b 8b       	std	Y+19, r24	; 0x13
    3890:	3f c0       	rjmp	.+126    	; 0x3910 <STEPPER_Rotate_ACW_Half_Step+0x906>
	else if (__tmp > 65535)
    3892:	6d 89       	ldd	r22, Y+21	; 0x15
    3894:	7e 89       	ldd	r23, Y+22	; 0x16
    3896:	8f 89       	ldd	r24, Y+23	; 0x17
    3898:	98 8d       	ldd	r25, Y+24	; 0x18
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	3f ef       	ldi	r19, 0xFF	; 255
    389e:	4f e7       	ldi	r20, 0x7F	; 127
    38a0:	57 e4       	ldi	r21, 0x47	; 71
    38a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38a6:	18 16       	cp	r1, r24
    38a8:	4c f5       	brge	.+82     	; 0x38fc <STEPPER_Rotate_ACW_Half_Step+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38aa:	69 8d       	ldd	r22, Y+25	; 0x19
    38ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	40 e2       	ldi	r20, 0x20	; 32
    38b8:	51 e4       	ldi	r21, 0x41	; 65
    38ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	bc 01       	movw	r22, r24
    38c4:	cd 01       	movw	r24, r26
    38c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	9c 8b       	std	Y+20, r25	; 0x14
    38d0:	8b 8b       	std	Y+19, r24	; 0x13
    38d2:	0f c0       	rjmp	.+30     	; 0x38f2 <STEPPER_Rotate_ACW_Half_Step+0x8e8>
    38d4:	88 ec       	ldi	r24, 0xC8	; 200
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	9a 8b       	std	Y+18, r25	; 0x12
    38da:	89 8b       	std	Y+17, r24	; 0x11
    38dc:	89 89       	ldd	r24, Y+17	; 0x11
    38de:	9a 89       	ldd	r25, Y+18	; 0x12
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <STEPPER_Rotate_ACW_Half_Step+0x8d6>
    38e4:	9a 8b       	std	Y+18, r25	; 0x12
    38e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e8:	8b 89       	ldd	r24, Y+19	; 0x13
    38ea:	9c 89       	ldd	r25, Y+20	; 0x14
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	9c 8b       	std	Y+20, r25	; 0x14
    38f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f2:	8b 89       	ldd	r24, Y+19	; 0x13
    38f4:	9c 89       	ldd	r25, Y+20	; 0x14
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	69 f7       	brne	.-38     	; 0x38d4 <STEPPER_Rotate_ACW_Half_Step+0x8ca>
    38fa:	14 c0       	rjmp	.+40     	; 0x3924 <STEPPER_Rotate_ACW_Half_Step+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fc:	6d 89       	ldd	r22, Y+21	; 0x15
    38fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3900:	8f 89       	ldd	r24, Y+23	; 0x17
    3902:	98 8d       	ldd	r25, Y+24	; 0x18
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	9c 8b       	std	Y+20, r25	; 0x14
    390e:	8b 8b       	std	Y+19, r24	; 0x13
    3910:	8b 89       	ldd	r24, Y+19	; 0x13
    3912:	9c 89       	ldd	r25, Y+20	; 0x14
    3914:	98 8b       	std	Y+16, r25	; 0x10
    3916:	8f 87       	std	Y+15, r24	; 0x0f
    3918:	8f 85       	ldd	r24, Y+15	; 0x0f
    391a:	98 89       	ldd	r25, Y+16	; 0x10
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	f1 f7       	brne	.-4      	; 0x391c <STEPPER_Rotate_ACW_Half_Step+0x912>
    3920:	98 8b       	std	Y+16, r25	; 0x10
    3922:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_BLUE_PIN,DIO_SET);
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	63 e0       	ldi	r22, 0x03	; 3
    3928:	41 e0       	ldi	r20, 0x01	; 1
    392a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_PINK_PIN,DIO_RESET);
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	64 e0       	ldi	r22, 0x04	; 4
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_YELLOW_PIN,DIO_RESET);
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	65 e0       	ldi	r22, 0x05	; 5
    393c:	40 e0       	ldi	r20, 0x00	; 0
    393e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEP_UP_MOTOR_PORT,COIL_ORANGE_PIN,DIO_SET);
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	66 e0       	ldi	r22, 0x06	; 6
    3946:	41 e0       	ldi	r20, 0x01	; 1
    3948:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MDIO_voidSetPinValue>
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	a0 e0       	ldi	r26, 0x00	; 0
    3952:	b0 e4       	ldi	r27, 0x40	; 64
    3954:	8b 87       	std	Y+11, r24	; 0x0b
    3956:	9c 87       	std	Y+12, r25	; 0x0c
    3958:	ad 87       	std	Y+13, r26	; 0x0d
    395a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395c:	6b 85       	ldd	r22, Y+11	; 0x0b
    395e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3960:	8d 85       	ldd	r24, Y+13	; 0x0d
    3962:	9e 85       	ldd	r25, Y+14	; 0x0e
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	4a ef       	ldi	r20, 0xFA	; 250
    396a:	54 e4       	ldi	r21, 0x44	; 68
    396c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	8f 83       	std	Y+7, r24	; 0x07
    3976:	98 87       	std	Y+8, r25	; 0x08
    3978:	a9 87       	std	Y+9, r26	; 0x09
    397a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    397c:	6f 81       	ldd	r22, Y+7	; 0x07
    397e:	78 85       	ldd	r23, Y+8	; 0x08
    3980:	89 85       	ldd	r24, Y+9	; 0x09
    3982:	9a 85       	ldd	r25, Y+10	; 0x0a
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e8       	ldi	r20, 0x80	; 128
    398a:	5f e3       	ldi	r21, 0x3F	; 63
    398c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3990:	88 23       	and	r24, r24
    3992:	2c f4       	brge	.+10     	; 0x399e <STEPPER_Rotate_ACW_Half_Step+0x994>
		__ticks = 1;
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9e 83       	std	Y+6, r25	; 0x06
    399a:	8d 83       	std	Y+5, r24	; 0x05
    399c:	3f c0       	rjmp	.+126    	; 0x3a1c <STEPPER_Rotate_ACW_Half_Step+0xa12>
	else if (__tmp > 65535)
    399e:	6f 81       	ldd	r22, Y+7	; 0x07
    39a0:	78 85       	ldd	r23, Y+8	; 0x08
    39a2:	89 85       	ldd	r24, Y+9	; 0x09
    39a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	3f ef       	ldi	r19, 0xFF	; 255
    39aa:	4f e7       	ldi	r20, 0x7F	; 127
    39ac:	57 e4       	ldi	r21, 0x47	; 71
    39ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39b2:	18 16       	cp	r1, r24
    39b4:	4c f5       	brge	.+82     	; 0x3a08 <STEPPER_Rotate_ACW_Half_Step+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    39bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	40 e2       	ldi	r20, 0x20	; 32
    39c4:	51 e4       	ldi	r21, 0x41	; 65
    39c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	9e 83       	std	Y+6, r25	; 0x06
    39dc:	8d 83       	std	Y+5, r24	; 0x05
    39de:	0f c0       	rjmp	.+30     	; 0x39fe <STEPPER_Rotate_ACW_Half_Step+0x9f4>
    39e0:	88 ec       	ldi	r24, 0xC8	; 200
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	9c 83       	std	Y+4, r25	; 0x04
    39e6:	8b 83       	std	Y+3, r24	; 0x03
    39e8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ea:	9c 81       	ldd	r25, Y+4	; 0x04
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	f1 f7       	brne	.-4      	; 0x39ec <STEPPER_Rotate_ACW_Half_Step+0x9e2>
    39f0:	9c 83       	std	Y+4, r25	; 0x04
    39f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f4:	8d 81       	ldd	r24, Y+5	; 0x05
    39f6:	9e 81       	ldd	r25, Y+6	; 0x06
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	9e 83       	std	Y+6, r25	; 0x06
    39fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3a00:	9e 81       	ldd	r25, Y+6	; 0x06
    3a02:	00 97       	sbiw	r24, 0x00	; 0
    3a04:	69 f7       	brne	.-38     	; 0x39e0 <STEPPER_Rotate_ACW_Half_Step+0x9d6>
    3a06:	14 c0       	rjmp	.+40     	; 0x3a30 <STEPPER_Rotate_ACW_Half_Step+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a08:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0a:	78 85       	ldd	r23, Y+8	; 0x08
    3a0c:	89 85       	ldd	r24, Y+9	; 0x09
    3a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	8d 83       	std	Y+5, r24	; 0x05
    3a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a20:	9a 83       	std	Y+2, r25	; 0x02
    3a22:	89 83       	std	Y+1, r24	; 0x01
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	9a 81       	ldd	r25, Y+2	; 0x02
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <STEPPER_Rotate_ACW_Half_Step+0xa1e>
    3a2c:	9a 83       	std	Y+2, r25	; 0x02
    3a2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    3a30:	c0 59       	subi	r28, 0x90	; 144
    3a32:	df 4f       	sbci	r29, 0xFF	; 255
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	08 95       	ret

00003a48 <STEPPER_Set_Angle>:


void STEPPER_Set_Angle(u32 angle , u8 direction)
{
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	61 97       	sbiw	r28, 0x11	; 17
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	cd bf       	out	0x3d, r28	; 61
    3a5c:	6d 87       	std	Y+13, r22	; 0x0d
    3a5e:	7e 87       	std	Y+14, r23	; 0x0e
    3a60:	8f 87       	std	Y+15, r24	; 0x0f
    3a62:	98 8b       	std	Y+16, r25	; 0x10
    3a64:	49 8b       	std	Y+17, r20	; 0x11
	u32 steps = (angle * 2048) / 360;
    3a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a6a:	af 85       	ldd	r26, Y+15	; 0x0f
    3a6c:	b8 89       	ldd	r27, Y+16	; 0x10
    3a6e:	07 2e       	mov	r0, r23
    3a70:	7b e0       	ldi	r23, 0x0B	; 11
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	aa 1f       	adc	r26, r26
    3a78:	bb 1f       	adc	r27, r27
    3a7a:	7a 95       	dec	r23
    3a7c:	d1 f7       	brne	.-12     	; 0x3a72 <STEPPER_Set_Angle+0x2a>
    3a7e:	70 2d       	mov	r23, r0
    3a80:	28 e6       	ldi	r18, 0x68	; 104
    3a82:	31 e0       	ldi	r19, 0x01	; 1
    3a84:	40 e0       	ldi	r20, 0x00	; 0
    3a86:	50 e0       	ldi	r21, 0x00	; 0
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <__udivmodsi4>
    3a90:	da 01       	movw	r26, r20
    3a92:	c9 01       	movw	r24, r18
    3a94:	89 87       	std	Y+9, r24	; 0x09
    3a96:	9a 87       	std	Y+10, r25	; 0x0a
    3a98:	ab 87       	std	Y+11, r26	; 0x0b
    3a9a:	bc 87       	std	Y+12, r27	; 0x0c
	u32 loops = steps / 4;
    3a9c:	89 85       	ldd	r24, Y+9	; 0x09
    3a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa0:	ab 85       	ldd	r26, Y+11	; 0x0b
    3aa2:	bc 85       	ldd	r27, Y+12	; 0x0c
    3aa4:	b6 95       	lsr	r27
    3aa6:	a7 95       	ror	r26
    3aa8:	97 95       	ror	r25
    3aaa:	87 95       	ror	r24
    3aac:	b6 95       	lsr	r27
    3aae:	a7 95       	ror	r26
    3ab0:	97 95       	ror	r25
    3ab2:	87 95       	ror	r24
    3ab4:	8d 83       	std	Y+5, r24	; 0x05
    3ab6:	9e 83       	std	Y+6, r25	; 0x06
    3ab8:	af 83       	std	Y+7, r26	; 0x07
    3aba:	b8 87       	std	Y+8, r27	; 0x08
	u32 i;
	if( direction== CW)
    3abc:	89 89       	ldd	r24, Y+17	; 0x11
    3abe:	88 23       	and	r24, r24
    3ac0:	01 f5       	brne	.+64     	; 0x3b02 <STEPPER_Set_Angle+0xba>
	{
		for(i= 0 ; i < loops ; i++)
    3ac2:	19 82       	std	Y+1, r1	; 0x01
    3ac4:	1a 82       	std	Y+2, r1	; 0x02
    3ac6:	1b 82       	std	Y+3, r1	; 0x03
    3ac8:	1c 82       	std	Y+4, r1	; 0x04
    3aca:	0d c0       	rjmp	.+26     	; 0x3ae6 <STEPPER_Set_Angle+0x9e>
		{
			STEPPER_Rotate_CW_Full_Step();
    3acc:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <STEPPER_Rotate_CW_Full_Step>
	u32 steps = (angle * 2048) / 360;
	u32 loops = steps / 4;
	u32 i;
	if( direction== CW)
	{
		for(i= 0 ; i < loops ; i++)
    3ad0:	89 81       	ldd	r24, Y+1	; 0x01
    3ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad4:	ab 81       	ldd	r26, Y+3	; 0x03
    3ad6:	bc 81       	ldd	r27, Y+4	; 0x04
    3ad8:	01 96       	adiw	r24, 0x01	; 1
    3ada:	a1 1d       	adc	r26, r1
    3adc:	b1 1d       	adc	r27, r1
    3ade:	89 83       	std	Y+1, r24	; 0x01
    3ae0:	9a 83       	std	Y+2, r25	; 0x02
    3ae2:	ab 83       	std	Y+3, r26	; 0x03
    3ae4:	bc 83       	std	Y+4, r27	; 0x04
    3ae6:	29 81       	ldd	r18, Y+1	; 0x01
    3ae8:	3a 81       	ldd	r19, Y+2	; 0x02
    3aea:	4b 81       	ldd	r20, Y+3	; 0x03
    3aec:	5c 81       	ldd	r21, Y+4	; 0x04
    3aee:	8d 81       	ldd	r24, Y+5	; 0x05
    3af0:	9e 81       	ldd	r25, Y+6	; 0x06
    3af2:	af 81       	ldd	r26, Y+7	; 0x07
    3af4:	b8 85       	ldd	r27, Y+8	; 0x08
    3af6:	28 17       	cp	r18, r24
    3af8:	39 07       	cpc	r19, r25
    3afa:	4a 07       	cpc	r20, r26
    3afc:	5b 07       	cpc	r21, r27
    3afe:	30 f3       	brcs	.-52     	; 0x3acc <STEPPER_Set_Angle+0x84>
    3b00:	1f c0       	rjmp	.+62     	; 0x3b40 <STEPPER_Set_Angle+0xf8>
			STEPPER_Rotate_CW_Full_Step();
		}
	}
	else
	{
		for(i=0 ; i < loops ; i++)
    3b02:	19 82       	std	Y+1, r1	; 0x01
    3b04:	1a 82       	std	Y+2, r1	; 0x02
    3b06:	1b 82       	std	Y+3, r1	; 0x03
    3b08:	1c 82       	std	Y+4, r1	; 0x04
    3b0a:	0d c0       	rjmp	.+26     	; 0x3b26 <STEPPER_Set_Angle+0xde>
		{
			STEPPER_Rotate_ACW_Full_Step();
    3b0c:	0e 94 bb 10 	call	0x2176	; 0x2176 <STEPPER_Rotate_ACW_Full_Step>
			STEPPER_Rotate_CW_Full_Step();
		}
	}
	else
	{
		for(i=0 ; i < loops ; i++)
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	9a 81       	ldd	r25, Y+2	; 0x02
    3b14:	ab 81       	ldd	r26, Y+3	; 0x03
    3b16:	bc 81       	ldd	r27, Y+4	; 0x04
    3b18:	01 96       	adiw	r24, 0x01	; 1
    3b1a:	a1 1d       	adc	r26, r1
    3b1c:	b1 1d       	adc	r27, r1
    3b1e:	89 83       	std	Y+1, r24	; 0x01
    3b20:	9a 83       	std	Y+2, r25	; 0x02
    3b22:	ab 83       	std	Y+3, r26	; 0x03
    3b24:	bc 83       	std	Y+4, r27	; 0x04
    3b26:	29 81       	ldd	r18, Y+1	; 0x01
    3b28:	3a 81       	ldd	r19, Y+2	; 0x02
    3b2a:	4b 81       	ldd	r20, Y+3	; 0x03
    3b2c:	5c 81       	ldd	r21, Y+4	; 0x04
    3b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b30:	9e 81       	ldd	r25, Y+6	; 0x06
    3b32:	af 81       	ldd	r26, Y+7	; 0x07
    3b34:	b8 85       	ldd	r27, Y+8	; 0x08
    3b36:	28 17       	cp	r18, r24
    3b38:	39 07       	cpc	r19, r25
    3b3a:	4a 07       	cpc	r20, r26
    3b3c:	5b 07       	cpc	r21, r27
    3b3e:	30 f3       	brcs	.-52     	; 0x3b0c <STEPPER_Set_Angle+0xc4>
		{
			STEPPER_Rotate_ACW_Full_Step();
		}
	}
}
    3b40:	61 96       	adiw	r28, 0x11	; 17
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	cf 91       	pop	r28
    3b4e:	df 91       	pop	r29
    3b50:	08 95       	ret

00003b52 <MUART_voidInit>:
#define NULL 0

static void (*FuncPtr[3]) (void) = {NULL,NULL,NULL};

void MUART_voidInit(void)
{
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	00 d0       	rcall	.+0      	; 0x3b58 <MUART_voidInit+0x6>
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;
    3b5c:	83 e3       	ldi	r24, 0x33	; 51
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	9a 83       	std	Y+2, r25	; 0x02
    3b62:	89 83       	std	Y+1, r24	; 0x01

	// Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
    3b64:	e9 e2       	ldi	r30, 0x29	; 41
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	80 83       	st	Z, r24
	UBRRH = (u8) (local_u16BaudRate >> 8);
    3b6c:	e0 e4       	ldi	r30, 0x40	; 64
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	9a 81       	ldd	r25, Y+2	; 0x02
    3b74:	89 2f       	mov	r24, r25
    3b76:	99 27       	eor	r25, r25
    3b78:	80 83       	st	Z, r24

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
    3b7a:	aa e2       	ldi	r26, 0x2A	; 42
    3b7c:	b0 e0       	ldi	r27, 0x00	; 0
    3b7e:	ea e2       	ldi	r30, 0x2A	; 42
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
    3b84:	8b 7f       	andi	r24, 0xFB	; 251
    3b86:	8c 93       	st	X, r24

	// Character Size 8-bit
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
    3b88:	e0 e4       	ldi	r30, 0x40	; 64
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	86 e8       	ldi	r24, 0x86	; 134
    3b8e:	80 83       	st	Z, r24

	// Enable Receiver
	// Enable Transmitter
	SET_BIT(UCSRB,3);
    3b90:	aa e2       	ldi	r26, 0x2A	; 42
    3b92:	b0 e0       	ldi	r27, 0x00	; 0
    3b94:	ea e2       	ldi	r30, 0x2A	; 42
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	88 60       	ori	r24, 0x08	; 8
    3b9c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    3b9e:	aa e2       	ldi	r26, 0x2A	; 42
    3ba0:	b0 e0       	ldi	r27, 0x00	; 0
    3ba2:	ea e2       	ldi	r30, 0x2A	; 42
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 81       	ld	r24, Z
    3ba8:	80 61       	ori	r24, 0x10	; 16
    3baa:	8c 93       	st	X, r24

}
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	cf 91       	pop	r28
    3bb2:	df 91       	pop	r29
    3bb4:	08 95       	ret

00003bb6 <MUART_voidSendByteSyncBlocking>:


void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	0f 92       	push	r0
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0);
    3bc2:	eb e2       	ldi	r30, 0x2B	; 43
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	80 81       	ld	r24, Z
    3bc8:	82 95       	swap	r24
    3bca:	86 95       	lsr	r24
    3bcc:	87 70       	andi	r24, 0x07	; 7
    3bce:	88 2f       	mov	r24, r24
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	81 70       	andi	r24, 0x01	; 1
    3bd4:	90 70       	andi	r25, 0x00	; 0
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	a1 f3       	breq	.-24     	; 0x3bc2 <MUART_voidSendByteSyncBlocking+0xc>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
    3bda:	ec e2       	ldi	r30, 0x2C	; 44
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	80 83       	st	Z, r24

	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0);
    3be2:	eb e2       	ldi	r30, 0x2B	; 43
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	82 95       	swap	r24
    3bea:	86 95       	lsr	r24
    3bec:	87 70       	andi	r24, 0x07	; 7
    3bee:	88 2f       	mov	r24, r24
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	81 70       	andi	r24, 0x01	; 1
    3bf4:	90 70       	andi	r25, 0x00	; 0
    3bf6:	00 97       	sbiw	r24, 0x00	; 0
    3bf8:	a1 f3       	breq	.-24     	; 0x3be2 <MUART_voidSendByteSyncBlocking+0x2c>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
    3bfa:	ab e2       	ldi	r26, 0x2B	; 43
    3bfc:	b0 e0       	ldi	r27, 0x00	; 0
    3bfe:	eb e2       	ldi	r30, 0x2B	; 43
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	80 81       	ld	r24, Z
    3c04:	80 64       	ori	r24, 0x40	; 64
    3c06:	8c 93       	st	X, r24

}
    3c08:	0f 90       	pop	r0
    3c0a:	cf 91       	pop	r28
    3c0c:	df 91       	pop	r29
    3c0e:	08 95       	ret

00003c10 <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	00 d0       	rcall	.+0      	; 0x3c16 <MUART_voidSendByteSyncNonBlocking+0x6>
    3c16:	00 d0       	rcall	.+0      	; 0x3c18 <MUART_voidSendByteSyncNonBlocking+0x8>
    3c18:	0f 92       	push	r0
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    3c1e:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    3c20:	19 82       	std	Y+1, r1	; 0x01
    3c22:	1a 82       	std	Y+2, r1	; 0x02
    3c24:	1b 82       	std	Y+3, r1	; 0x03
    3c26:	1c 82       	std	Y+4, r1	; 0x04
    3c28:	17 c0       	rjmp	.+46     	; 0x3c58 <MUART_voidSendByteSyncNonBlocking+0x48>
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0)
	{
		local_u32Timeout++;
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2e:	ab 81       	ldd	r26, Y+3	; 0x03
    3c30:	bc 81       	ldd	r27, Y+4	; 0x04
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	a1 1d       	adc	r26, r1
    3c36:	b1 1d       	adc	r27, r1
    3c38:	89 83       	std	Y+1, r24	; 0x01
    3c3a:	9a 83       	std	Y+2, r25	; 0x02
    3c3c:	ab 83       	std	Y+3, r26	; 0x03
    3c3e:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	9a 81       	ldd	r25, Y+2	; 0x02
    3c44:	ab 81       	ldd	r26, Y+3	; 0x03
    3c46:	bc 81       	ldd	r27, Y+4	; 0x04
    3c48:	88 38       	cpi	r24, 0x88	; 136
    3c4a:	23 e1       	ldi	r18, 0x13	; 19
    3c4c:	92 07       	cpc	r25, r18
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	a2 07       	cpc	r26, r18
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	b2 07       	cpc	r27, r18
    3c56:	61 f0       	breq	.+24     	; 0x3c70 <MUART_voidSendByteSyncNonBlocking+0x60>

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
	u32 local_u32Timeout=0;
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0)
    3c58:	eb e2       	ldi	r30, 0x2B	; 43
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	82 95       	swap	r24
    3c60:	86 95       	lsr	r24
    3c62:	87 70       	andi	r24, 0x07	; 7
    3c64:	88 2f       	mov	r24, r24
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	81 70       	andi	r24, 0x01	; 1
    3c6a:	90 70       	andi	r25, 0x00	; 0
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	e9 f2       	breq	.-70     	; 0x3c2a <MUART_voidSendByteSyncNonBlocking+0x1a>
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	9a 81       	ldd	r25, Y+2	; 0x02
    3c74:	ab 81       	ldd	r26, Y+3	; 0x03
    3c76:	bc 81       	ldd	r27, Y+4	; 0x04
    3c78:	88 38       	cpi	r24, 0x88	; 136
    3c7a:	23 e1       	ldi	r18, 0x13	; 19
    3c7c:	92 07       	cpc	r25, r18
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	a2 07       	cpc	r26, r18
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	b2 07       	cpc	r27, r18
    3c86:	99 f1       	breq	.+102    	; 0x3cee <MUART_voidSendByteSyncNonBlocking+0xde>
	{
		local_u32Timeout = 0;
    3c88:	19 82       	std	Y+1, r1	; 0x01
    3c8a:	1a 82       	std	Y+2, r1	; 0x02
    3c8c:	1b 82       	std	Y+3, r1	; 0x03
    3c8e:	1c 82       	std	Y+4, r1	; 0x04
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
    3c90:	ec e2       	ldi	r30, 0x2C	; 44
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	8d 81       	ldd	r24, Y+5	; 0x05
    3c96:	80 83       	st	Z, r24
    3c98:	17 c0       	rjmp	.+46     	; 0x3cc8 <MUART_voidSendByteSyncNonBlocking+0xb8>

		// wait until UDR is empty
		while(GET_BIT(UCSRA,5)==0)
		{
			local_u32Timeout++;
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9e:	ab 81       	ldd	r26, Y+3	; 0x03
    3ca0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ca2:	01 96       	adiw	r24, 0x01	; 1
    3ca4:	a1 1d       	adc	r26, r1
    3ca6:	b1 1d       	adc	r27, r1
    3ca8:	89 83       	std	Y+1, r24	; 0x01
    3caa:	9a 83       	std	Y+2, r25	; 0x02
    3cac:	ab 83       	std	Y+3, r26	; 0x03
    3cae:	bc 83       	std	Y+4, r27	; 0x04
			if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb4:	ab 81       	ldd	r26, Y+3	; 0x03
    3cb6:	bc 81       	ldd	r27, Y+4	; 0x04
    3cb8:	88 38       	cpi	r24, 0x88	; 136
    3cba:	23 e1       	ldi	r18, 0x13	; 19
    3cbc:	92 07       	cpc	r25, r18
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	a2 07       	cpc	r26, r18
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	b2 07       	cpc	r27, r18
    3cc6:	61 f0       	breq	.+24     	; 0x3ce0 <MUART_voidSendByteSyncNonBlocking+0xd0>
		local_u32Timeout = 0;
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;

		// wait until UDR is empty
		while(GET_BIT(UCSRA,5)==0)
    3cc8:	eb e2       	ldi	r30, 0x2B	; 43
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	80 81       	ld	r24, Z
    3cce:	82 95       	swap	r24
    3cd0:	86 95       	lsr	r24
    3cd2:	87 70       	andi	r24, 0x07	; 7
    3cd4:	88 2f       	mov	r24, r24
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	81 70       	andi	r24, 0x01	; 1
    3cda:	90 70       	andi	r25, 0x00	; 0
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	e9 f2       	breq	.-70     	; 0x3c9a <MUART_voidSendByteSyncNonBlocking+0x8a>
			{
				break;
			}
		}
		// Clear transmit Interrupt flag
		SET_BIT(UCSRA,6);
    3ce0:	ab e2       	ldi	r26, 0x2B	; 43
    3ce2:	b0 e0       	ldi	r27, 0x00	; 0
    3ce4:	eb e2       	ldi	r30, 0x2B	; 43
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	80 81       	ld	r24, Z
    3cea:	80 64       	ori	r24, 0x40	; 64
    3cec:	8c 93       	st	X, r24
	}
}
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	08 95       	ret

00003cfe <MUART_voidSendStringSyncNonBlocking>:



void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
    3cfe:	df 93       	push	r29
    3d00:	cf 93       	push	r28
    3d02:	00 d0       	rcall	.+0      	; 0x3d04 <MUART_voidSendStringSyncNonBlocking+0x6>
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	9a 83       	std	Y+2, r25	; 0x02
    3d0a:	89 83       	std	Y+1, r24	; 0x01
    3d0c:	0b c0       	rjmp	.+22     	; 0x3d24 <MUART_voidSendStringSyncNonBlocking+0x26>
	while (*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    3d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d10:	fa 81       	ldd	r31, Y+2	; 0x02
    3d12:	20 81       	ld	r18, Z
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
    3d16:	9a 81       	ldd	r25, Y+2	; 0x02
    3d18:	01 96       	adiw	r24, 0x01	; 1
    3d1a:	9a 83       	std	Y+2, r25	; 0x02
    3d1c:	89 83       	std	Y+1, r24	; 0x01
    3d1e:	82 2f       	mov	r24, r18
    3d20:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <MUART_voidSendByteSyncNonBlocking>



void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
	while (*A_pu8String > 0)
    3d24:	e9 81       	ldd	r30, Y+1	; 0x01
    3d26:	fa 81       	ldd	r31, Y+2	; 0x02
    3d28:	80 81       	ld	r24, Z
    3d2a:	88 23       	and	r24, r24
    3d2c:	81 f7       	brne	.-32     	; 0x3d0e <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	cf 91       	pop	r28
    3d34:	df 91       	pop	r29
    3d36:	08 95       	ret

00003d38 <MUART_voidSendByteAsync>:


void MUART_voidSendByteAsync (u8 A_u8DataByte)
{
    3d38:	df 93       	push	r29
    3d3a:	cf 93       	push	r28
    3d3c:	0f 92       	push	r0
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA,5)==0)
    3d44:	eb e2       	ldi	r30, 0x2B	; 43
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	80 81       	ld	r24, Z
    3d4a:	82 95       	swap	r24
    3d4c:	86 95       	lsr	r24
    3d4e:	87 70       	andi	r24, 0x07	; 7
    3d50:	88 2f       	mov	r24, r24
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	81 70       	andi	r24, 0x01	; 1
    3d56:	90 70       	andi	r25, 0x00	; 0
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	21 f4       	brne	.+8      	; 0x3d64 <MUART_voidSendByteAsync+0x2c>
	{
		UDR = A_u8DataByte;
    3d5c:	ec e2       	ldi	r30, 0x2C	; 44
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	80 83       	st	Z, r24
	}
}
    3d64:	0f 90       	pop	r0
    3d66:	cf 91       	pop	r28
    3d68:	df 91       	pop	r29
    3d6a:	08 95       	ret

00003d6c <MUART_u8ReadByteSyncBlocking>:


u8 MUART_u8ReadByteSyncBlocking (void)
{
    3d6c:	df 93       	push	r29
    3d6e:	cf 93       	push	r28
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0);
    3d74:	eb e2       	ldi	r30, 0x2B	; 43
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	80 81       	ld	r24, Z
    3d7a:	88 23       	and	r24, r24
    3d7c:	dc f7       	brge	.-10     	; 0x3d74 <MUART_u8ReadByteSyncBlocking+0x8>

	return UDR;
    3d7e:	ec e2       	ldi	r30, 0x2C	; 44
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	80 81       	ld	r24, Z
}
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	08 95       	ret

00003d8a <MUART_u8ReadByteAsync>:

u8 MUART_u8ReadByteAsync (void)
{
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    3d92:	ec e2       	ldi	r30, 0x2C	; 44
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
}
    3d98:	cf 91       	pop	r28
    3d9a:	df 91       	pop	r29
    3d9c:	08 95       	ret

00003d9e <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking (void)
{
    3d9e:	df 93       	push	r29
    3da0:	cf 93       	push	r28
    3da2:	00 d0       	rcall	.+0      	; 0x3da4 <MUART_u8ReadByteSyncNonBlocking+0x6>
    3da4:	00 d0       	rcall	.+0      	; 0x3da6 <MUART_u8ReadByteSyncNonBlocking+0x8>
    3da6:	0f 92       	push	r0
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
    3dac:	8f ef       	ldi	r24, 0xFF	; 255
    3dae:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    3db0:	19 82       	std	Y+1, r1	; 0x01
    3db2:	1a 82       	std	Y+2, r1	; 0x02
    3db4:	1b 82       	std	Y+3, r1	; 0x03
    3db6:	1c 82       	std	Y+4, r1	; 0x04
    3db8:	17 c0       	rjmp	.+46     	; 0x3de8 <MUART_u8ReadByteSyncNonBlocking+0x4a>
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0)
	{
		local_u32Timeout++;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	ab 81       	ldd	r26, Y+3	; 0x03
    3dc0:	bc 81       	ldd	r27, Y+4	; 0x04
    3dc2:	01 96       	adiw	r24, 0x01	; 1
    3dc4:	a1 1d       	adc	r26, r1
    3dc6:	b1 1d       	adc	r27, r1
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	9a 83       	std	Y+2, r25	; 0x02
    3dcc:	ab 83       	std	Y+3, r26	; 0x03
    3dce:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd4:	ab 81       	ldd	r26, Y+3	; 0x03
    3dd6:	bc 81       	ldd	r27, Y+4	; 0x04
    3dd8:	88 38       	cpi	r24, 0x88	; 136
    3dda:	23 e1       	ldi	r18, 0x13	; 19
    3ddc:	92 07       	cpc	r25, r18
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	a2 07       	cpc	r26, r18
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	b2 07       	cpc	r27, r18
    3de6:	29 f0       	breq	.+10     	; 0x3df2 <MUART_u8ReadByteSyncNonBlocking+0x54>
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
	u32 local_u32Timeout=0;
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0)
    3de8:	eb e2       	ldi	r30, 0x2B	; 43
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	80 81       	ld	r24, Z
    3dee:	88 23       	and	r24, r24
    3df0:	24 f7       	brge	.-56     	; 0x3dba <MUART_u8ReadByteSyncNonBlocking+0x1c>
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	9a 81       	ldd	r25, Y+2	; 0x02
    3df6:	ab 81       	ldd	r26, Y+3	; 0x03
    3df8:	bc 81       	ldd	r27, Y+4	; 0x04
    3dfa:	88 38       	cpi	r24, 0x88	; 136
    3dfc:	23 e1       	ldi	r18, 0x13	; 19
    3dfe:	92 07       	cpc	r25, r18
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	a2 07       	cpc	r26, r18
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	b2 07       	cpc	r27, r18
    3e08:	21 f0       	breq	.+8      	; 0x3e12 <MUART_u8ReadByteSyncNonBlocking+0x74>
	{
		local_u8ReceivedData = UDR;
    3e0a:	ec e2       	ldi	r30, 0x2C	; 44
    3e0c:	f0 e0       	ldi	r31, 0x00	; 0
    3e0e:	80 81       	ld	r24, Z
    3e10:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8ReceivedData;
    3e12:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	cf 91       	pop	r28
    3e20:	df 91       	pop	r29
    3e22:	08 95       	ret

00003e24 <MUART_voidSetCallBack>:



void MUART_voidSetCallBack (UART_INTERRUPTS_e A_InterruptSource , void (*A_PtoFunc)(void))
{
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	00 d0       	rcall	.+0      	; 0x3e2a <MUART_voidSetCallBack+0x6>
    3e2a:	0f 92       	push	r0
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	89 83       	std	Y+1, r24	; 0x01
    3e32:	7b 83       	std	Y+3, r23	; 0x03
    3e34:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_InterruptSource<=UART_TX_INTERRUPT)&&(A_PtoFunc != NULL))
    3e36:	89 81       	ldd	r24, Y+1	; 0x01
    3e38:	83 30       	cpi	r24, 0x03	; 3
    3e3a:	80 f4       	brcc	.+32     	; 0x3e5c <MUART_voidSetCallBack+0x38>
    3e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	61 f0       	breq	.+24     	; 0x3e5c <MUART_voidSetCallBack+0x38>
	{
		FuncPtr [A_InterruptSource] = A_PtoFunc;
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	88 2f       	mov	r24, r24
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	fc 01       	movw	r30, r24
    3e50:	e4 58       	subi	r30, 0x84	; 132
    3e52:	fe 4f       	sbci	r31, 0xFE	; 254
    3e54:	8a 81       	ldd	r24, Y+2	; 0x02
    3e56:	9b 81       	ldd	r25, Y+3	; 0x03
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
	}
}
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <__vector_13>:


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    3e68:	1f 92       	push	r1
    3e6a:	0f 92       	push	r0
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	0f 92       	push	r0
    3e70:	11 24       	eor	r1, r1
    3e72:	2f 93       	push	r18
    3e74:	3f 93       	push	r19
    3e76:	4f 93       	push	r20
    3e78:	5f 93       	push	r21
    3e7a:	6f 93       	push	r22
    3e7c:	7f 93       	push	r23
    3e7e:	8f 93       	push	r24
    3e80:	9f 93       	push	r25
    3e82:	af 93       	push	r26
    3e84:	bf 93       	push	r27
    3e86:	ef 93       	push	r30
    3e88:	ff 93       	push	r31
    3e8a:	df 93       	push	r29
    3e8c:	cf 93       	push	r28
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_RX_INTERRUPT] != NULL)
    3e92:	80 91 7c 01 	lds	r24, 0x017C
    3e96:	90 91 7d 01 	lds	r25, 0x017D
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	29 f0       	breq	.+10     	; 0x3ea8 <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPT]();
    3e9e:	e0 91 7c 01 	lds	r30, 0x017C
    3ea2:	f0 91 7d 01 	lds	r31, 0x017D
    3ea6:	09 95       	icall
	}
}
    3ea8:	cf 91       	pop	r28
    3eaa:	df 91       	pop	r29
    3eac:	ff 91       	pop	r31
    3eae:	ef 91       	pop	r30
    3eb0:	bf 91       	pop	r27
    3eb2:	af 91       	pop	r26
    3eb4:	9f 91       	pop	r25
    3eb6:	8f 91       	pop	r24
    3eb8:	7f 91       	pop	r23
    3eba:	6f 91       	pop	r22
    3ebc:	5f 91       	pop	r21
    3ebe:	4f 91       	pop	r20
    3ec0:	3f 91       	pop	r19
    3ec2:	2f 91       	pop	r18
    3ec4:	0f 90       	pop	r0
    3ec6:	0f be       	out	0x3f, r0	; 63
    3ec8:	0f 90       	pop	r0
    3eca:	1f 90       	pop	r1
    3ecc:	18 95       	reti

00003ece <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    3ece:	1f 92       	push	r1
    3ed0:	0f 92       	push	r0
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	0f 92       	push	r0
    3ed6:	11 24       	eor	r1, r1
    3ed8:	2f 93       	push	r18
    3eda:	3f 93       	push	r19
    3edc:	4f 93       	push	r20
    3ede:	5f 93       	push	r21
    3ee0:	6f 93       	push	r22
    3ee2:	7f 93       	push	r23
    3ee4:	8f 93       	push	r24
    3ee6:	9f 93       	push	r25
    3ee8:	af 93       	push	r26
    3eea:	bf 93       	push	r27
    3eec:	ef 93       	push	r30
    3eee:	ff 93       	push	r31
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_UDRE_INTERRUPT] != NULL)
    3ef8:	80 91 7e 01 	lds	r24, 0x017E
    3efc:	90 91 7f 01 	lds	r25, 0x017F
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	29 f0       	breq	.+10     	; 0x3f0e <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPT]();
    3f04:	e0 91 7e 01 	lds	r30, 0x017E
    3f08:	f0 91 7f 01 	lds	r31, 0x017F
    3f0c:	09 95       	icall
	}
}
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	ff 91       	pop	r31
    3f14:	ef 91       	pop	r30
    3f16:	bf 91       	pop	r27
    3f18:	af 91       	pop	r26
    3f1a:	9f 91       	pop	r25
    3f1c:	8f 91       	pop	r24
    3f1e:	7f 91       	pop	r23
    3f20:	6f 91       	pop	r22
    3f22:	5f 91       	pop	r21
    3f24:	4f 91       	pop	r20
    3f26:	3f 91       	pop	r19
    3f28:	2f 91       	pop	r18
    3f2a:	0f 90       	pop	r0
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	0f 90       	pop	r0
    3f30:	1f 90       	pop	r1
    3f32:	18 95       	reti

00003f34 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    3f34:	1f 92       	push	r1
    3f36:	0f 92       	push	r0
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	0f 92       	push	r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	2f 93       	push	r18
    3f40:	3f 93       	push	r19
    3f42:	4f 93       	push	r20
    3f44:	5f 93       	push	r21
    3f46:	6f 93       	push	r22
    3f48:	7f 93       	push	r23
    3f4a:	8f 93       	push	r24
    3f4c:	9f 93       	push	r25
    3f4e:	af 93       	push	r26
    3f50:	bf 93       	push	r27
    3f52:	ef 93       	push	r30
    3f54:	ff 93       	push	r31
    3f56:	df 93       	push	r29
    3f58:	cf 93       	push	r28
    3f5a:	cd b7       	in	r28, 0x3d	; 61
    3f5c:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_TX_INTERRUPT] != NULL)
    3f5e:	80 91 80 01 	lds	r24, 0x0180
    3f62:	90 91 81 01 	lds	r25, 0x0181
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	29 f0       	breq	.+10     	; 0x3f74 <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPT]();
    3f6a:	e0 91 80 01 	lds	r30, 0x0180
    3f6e:	f0 91 81 01 	lds	r31, 0x0181
    3f72:	09 95       	icall
	}
}
    3f74:	cf 91       	pop	r28
    3f76:	df 91       	pop	r29
    3f78:	ff 91       	pop	r31
    3f7a:	ef 91       	pop	r30
    3f7c:	bf 91       	pop	r27
    3f7e:	af 91       	pop	r26
    3f80:	9f 91       	pop	r25
    3f82:	8f 91       	pop	r24
    3f84:	7f 91       	pop	r23
    3f86:	6f 91       	pop	r22
    3f88:	5f 91       	pop	r21
    3f8a:	4f 91       	pop	r20
    3f8c:	3f 91       	pop	r19
    3f8e:	2f 91       	pop	r18
    3f90:	0f 90       	pop	r0
    3f92:	0f be       	out	0x3f, r0	; 63
    3f94:	0f 90       	pop	r0
    3f96:	1f 90       	pop	r1
    3f98:	18 95       	reti

00003f9a <main>:
    u8 password;
}USERS_s;

USERS_s *USERS_ARRAY[USERS_NUMBER];
int main(void)
{
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	df 93       	push	r29
    3fa0:	cf 93       	push	r28
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	ca 58       	subi	r28, 0x8A	; 138
    3fa8:	d0 40       	sbci	r29, 0x00	; 0
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
    3fb4:	0e 94 77 09 	call	0x12ee	; 0x12ee <MDIO_voidInit>
	MUART_voidInit();
    3fb8:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <MUART_voidInit>
	HLCD_voidInit();
    3fbc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <HLCD_voidInit>

	u8 user_index, keypad_value;
	for(user_index = 0; user_index < USERS_NUMBER; user_index++)
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e8 57       	subi	r30, 0x78	; 120
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	10 82       	st	Z, r1
    3fc8:	56 c0       	rjmp	.+172    	; 0x4076 <main+0xdc>
	{
		USERS_s *user = malloc(sizeof(USERS_s));
    3fca:	83 e0       	ldi	r24, 0x03	; 3
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <malloc>
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	ee 57       	subi	r30, 0x7E	; 126
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
		user->name = malloc(sizeof(u8) * 5);
    3fdc:	85 e0       	ldi	r24, 0x05	; 5
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <malloc>
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	ee 57       	subi	r30, 0x7E	; 126
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	01 90       	ld	r0, Z+
    3fec:	f0 81       	ld	r31, Z
    3fee:	e0 2d       	mov	r30, r0
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	80 83       	st	Z, r24
		user->name = USERS_NAMES[user_index];
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e8 57       	subi	r30, 0x78	; 120
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	80 81       	ld	r24, Z
    3ffc:	88 2f       	mov	r24, r24
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	88 0f       	add	r24, r24
    4002:	99 1f       	adc	r25, r25
    4004:	fc 01       	movw	r30, r24
    4006:	e8 59       	subi	r30, 0x98	; 152
    4008:	fe 4f       	sbci	r31, 0xFE	; 254
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	fe 01       	movw	r30, r28
    4010:	ee 57       	subi	r30, 0x7E	; 126
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	01 90       	ld	r0, Z+
    4016:	f0 81       	ld	r31, Z
    4018:	e0 2d       	mov	r30, r0
    401a:	91 83       	std	Z+1, r25	; 0x01
    401c:	80 83       	st	Z, r24
		user->password = USERS_PASSWORDS[user_index];
    401e:	fe 01       	movw	r30, r28
    4020:	e8 57       	subi	r30, 0x78	; 120
    4022:	ff 4f       	sbci	r31, 0xFF	; 255
    4024:	80 81       	ld	r24, Z
    4026:	88 2f       	mov	r24, r24
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	fc 01       	movw	r30, r24
    402c:	e2 5a       	subi	r30, 0xA2	; 162
    402e:	fe 4f       	sbci	r31, 0xFE	; 254
    4030:	80 81       	ld	r24, Z
    4032:	fe 01       	movw	r30, r28
    4034:	ee 57       	subi	r30, 0x7E	; 126
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	01 90       	ld	r0, Z+
    403a:	f0 81       	ld	r31, Z
    403c:	e0 2d       	mov	r30, r0
    403e:	82 83       	std	Z+2, r24	; 0x02
		USERS_ARRAY[user_index] = user;
    4040:	fe 01       	movw	r30, r28
    4042:	e8 57       	subi	r30, 0x78	; 120
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	80 81       	ld	r24, Z
    4048:	88 2f       	mov	r24, r24
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	88 0f       	add	r24, r24
    404e:	99 1f       	adc	r25, r25
    4050:	dc 01       	movw	r26, r24
    4052:	ae 57       	subi	r26, 0x7E	; 126
    4054:	be 4f       	sbci	r27, 0xFE	; 254
    4056:	fe 01       	movw	r30, r28
    4058:	ee 57       	subi	r30, 0x7E	; 126
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	8d 93       	st	X+, r24
    4062:	9c 93       	st	X, r25
	MDIO_voidInit();
	MUART_voidInit();
	HLCD_voidInit();

	u8 user_index, keypad_value;
	for(user_index = 0; user_index < USERS_NUMBER; user_index++)
    4064:	de 01       	movw	r26, r28
    4066:	a8 57       	subi	r26, 0x78	; 120
    4068:	bf 4f       	sbci	r27, 0xFF	; 255
    406a:	fe 01       	movw	r30, r28
    406c:	e8 57       	subi	r30, 0x78	; 120
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	80 81       	ld	r24, Z
    4072:	8f 5f       	subi	r24, 0xFF	; 255
    4074:	8c 93       	st	X, r24
    4076:	fe 01       	movw	r30, r28
    4078:	e8 57       	subi	r30, 0x78	; 120
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	80 81       	ld	r24, Z
    407e:	8a 30       	cpi	r24, 0x0A	; 10
    4080:	08 f4       	brcc	.+2      	; 0x4084 <main+0xea>
    4082:	a3 cf       	rjmp	.-186    	; 0x3fca <main+0x30>
		user->name = malloc(sizeof(u8) * 5);
		user->name = USERS_NAMES[user_index];
		user->password = USERS_PASSWORDS[user_index];
		USERS_ARRAY[user_index] = user;
	}
	u8 User_Index = 255;
    4084:	fe 01       	movw	r30, r28
    4086:	ea 57       	subi	r30, 0x7A	; 122
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	8f ef       	ldi	r24, 0xFF	; 255
    408c:	80 83       	st	Z, r24
	u8 tmp = 0, trial = 0;
    408e:	fe 01       	movw	r30, r28
    4090:	eb 57       	subi	r30, 0x7B	; 123
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	10 82       	st	Z, r1
    4096:	fe 01       	movw	r30, r28
    4098:	ec 57       	subi	r30, 0x7C	; 124
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	10 82       	st	Z, r1
	HLCD_voidClearDisplay();
    409e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <HLCD_voidClearDisplay>
	MUART_voidSendStringSyncNonBlocking("Enter Appartment Number\r\n");
    40a2:	8c e9       	ldi	r24, 0x9C	; 156
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <MUART_voidSendStringSyncNonBlocking>
	LCD_VOID_WRITE_MESSAGE("Please Enter", ROW1, COL1);
    40aa:	86 eb       	ldi	r24, 0xB6	; 182
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	61 e0       	ldi	r22, 0x01	; 1
    40b0:	41 e0       	ldi	r20, 0x01	; 1
    40b2:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
    40b6:	fe 01       	movw	r30, r28
    40b8:	e5 58       	subi	r30, 0x85	; 133
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	aa ef       	ldi	r26, 0xFA	; 250
    40c2:	b4 e4       	ldi	r27, 0x44	; 68
    40c4:	80 83       	st	Z, r24
    40c6:	91 83       	std	Z+1, r25	; 0x01
    40c8:	a2 83       	std	Z+2, r26	; 0x02
    40ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40cc:	8e 01       	movw	r16, r28
    40ce:	09 58       	subi	r16, 0x89	; 137
    40d0:	1f 4f       	sbci	r17, 0xFF	; 255
    40d2:	fe 01       	movw	r30, r28
    40d4:	e5 58       	subi	r30, 0x85	; 133
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	60 81       	ld	r22, Z
    40da:	71 81       	ldd	r23, Z+1	; 0x01
    40dc:	82 81       	ldd	r24, Z+2	; 0x02
    40de:	93 81       	ldd	r25, Z+3	; 0x03
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	4a ef       	ldi	r20, 0xFA	; 250
    40e6:	54 e4       	ldi	r21, 0x44	; 68
    40e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	f8 01       	movw	r30, r16
    40f2:	80 83       	st	Z, r24
    40f4:	91 83       	std	Z+1, r25	; 0x01
    40f6:	a2 83       	std	Z+2, r26	; 0x02
    40f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40fa:	fe 01       	movw	r30, r28
    40fc:	e9 58       	subi	r30, 0x89	; 137
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	60 81       	ld	r22, Z
    4102:	71 81       	ldd	r23, Z+1	; 0x01
    4104:	82 81       	ldd	r24, Z+2	; 0x02
    4106:	93 81       	ldd	r25, Z+3	; 0x03
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	40 e8       	ldi	r20, 0x80	; 128
    410e:	5f e3       	ldi	r21, 0x3F	; 63
    4110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4114:	88 23       	and	r24, r24
    4116:	44 f4       	brge	.+16     	; 0x4128 <main+0x18e>
		__ticks = 1;
    4118:	fe 01       	movw	r30, r28
    411a:	eb 58       	subi	r30, 0x8B	; 139
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	91 83       	std	Z+1, r25	; 0x01
    4124:	80 83       	st	Z, r24
    4126:	64 c0       	rjmp	.+200    	; 0x41f0 <main+0x256>
	else if (__tmp > 65535)
    4128:	fe 01       	movw	r30, r28
    412a:	e9 58       	subi	r30, 0x89	; 137
    412c:	ff 4f       	sbci	r31, 0xFF	; 255
    412e:	60 81       	ld	r22, Z
    4130:	71 81       	ldd	r23, Z+1	; 0x01
    4132:	82 81       	ldd	r24, Z+2	; 0x02
    4134:	93 81       	ldd	r25, Z+3	; 0x03
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	3f ef       	ldi	r19, 0xFF	; 255
    413a:	4f e7       	ldi	r20, 0x7F	; 127
    413c:	57 e4       	ldi	r21, 0x47	; 71
    413e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4142:	18 16       	cp	r1, r24
    4144:	0c f0       	brlt	.+2      	; 0x4148 <main+0x1ae>
    4146:	43 c0       	rjmp	.+134    	; 0x41ce <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4148:	fe 01       	movw	r30, r28
    414a:	e5 58       	subi	r30, 0x85	; 133
    414c:	ff 4f       	sbci	r31, 0xFF	; 255
    414e:	60 81       	ld	r22, Z
    4150:	71 81       	ldd	r23, Z+1	; 0x01
    4152:	82 81       	ldd	r24, Z+2	; 0x02
    4154:	93 81       	ldd	r25, Z+3	; 0x03
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	40 e2       	ldi	r20, 0x20	; 32
    415c:	51 e4       	ldi	r21, 0x41	; 65
    415e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	8e 01       	movw	r16, r28
    4168:	0b 58       	subi	r16, 0x8B	; 139
    416a:	1f 4f       	sbci	r17, 0xFF	; 255
    416c:	bc 01       	movw	r22, r24
    416e:	cd 01       	movw	r24, r26
    4170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	f8 01       	movw	r30, r16
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	80 83       	st	Z, r24
    417e:	1f c0       	rjmp	.+62     	; 0x41be <main+0x224>
    4180:	fe 01       	movw	r30, r28
    4182:	ed 58       	subi	r30, 0x8D	; 141
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	88 ec       	ldi	r24, 0xC8	; 200
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	91 83       	std	Z+1, r25	; 0x01
    418c:	80 83       	st	Z, r24
    418e:	fe 01       	movw	r30, r28
    4190:	ed 58       	subi	r30, 0x8D	; 141
    4192:	ff 4f       	sbci	r31, 0xFF	; 255
    4194:	80 81       	ld	r24, Z
    4196:	91 81       	ldd	r25, Z+1	; 0x01
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	f1 f7       	brne	.-4      	; 0x4198 <main+0x1fe>
    419c:	fe 01       	movw	r30, r28
    419e:	ed 58       	subi	r30, 0x8D	; 141
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	91 83       	std	Z+1, r25	; 0x01
    41a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a6:	de 01       	movw	r26, r28
    41a8:	ab 58       	subi	r26, 0x8B	; 139
    41aa:	bf 4f       	sbci	r27, 0xFF	; 255
    41ac:	fe 01       	movw	r30, r28
    41ae:	eb 58       	subi	r30, 0x8B	; 139
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	80 81       	ld	r24, Z
    41b4:	91 81       	ldd	r25, Z+1	; 0x01
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	11 96       	adiw	r26, 0x01	; 1
    41ba:	9c 93       	st	X, r25
    41bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41be:	fe 01       	movw	r30, r28
    41c0:	eb 58       	subi	r30, 0x8B	; 139
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	80 81       	ld	r24, Z
    41c6:	91 81       	ldd	r25, Z+1	; 0x01
    41c8:	00 97       	sbiw	r24, 0x00	; 0
    41ca:	d1 f6       	brne	.-76     	; 0x4180 <main+0x1e6>
    41cc:	27 c0       	rjmp	.+78     	; 0x421c <main+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ce:	8e 01       	movw	r16, r28
    41d0:	0b 58       	subi	r16, 0x8B	; 139
    41d2:	1f 4f       	sbci	r17, 0xFF	; 255
    41d4:	fe 01       	movw	r30, r28
    41d6:	e9 58       	subi	r30, 0x89	; 137
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	60 81       	ld	r22, Z
    41dc:	71 81       	ldd	r23, Z+1	; 0x01
    41de:	82 81       	ldd	r24, Z+2	; 0x02
    41e0:	93 81       	ldd	r25, Z+3	; 0x03
    41e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	f8 01       	movw	r30, r16
    41ec:	91 83       	std	Z+1, r25	; 0x01
    41ee:	80 83       	st	Z, r24
    41f0:	de 01       	movw	r26, r28
    41f2:	af 58       	subi	r26, 0x8F	; 143
    41f4:	bf 4f       	sbci	r27, 0xFF	; 255
    41f6:	fe 01       	movw	r30, r28
    41f8:	eb 58       	subi	r30, 0x8B	; 139
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	80 81       	ld	r24, Z
    41fe:	91 81       	ldd	r25, Z+1	; 0x01
    4200:	8d 93       	st	X+, r24
    4202:	9c 93       	st	X, r25
    4204:	fe 01       	movw	r30, r28
    4206:	ef 58       	subi	r30, 0x8F	; 143
    4208:	ff 4f       	sbci	r31, 0xFF	; 255
    420a:	80 81       	ld	r24, Z
    420c:	91 81       	ldd	r25, Z+1	; 0x01
    420e:	01 97       	sbiw	r24, 0x01	; 1
    4210:	f1 f7       	brne	.-4      	; 0x420e <main+0x274>
    4212:	fe 01       	movw	r30, r28
    4214:	ef 58       	subi	r30, 0x8F	; 143
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	91 83       	std	Z+1, r25	; 0x01
    421a:	80 83       	st	Z, r24
	_delay_ms(2000);
	LCD_VOID_WRITE_MESSAGE("House Number", ROW2, COL1);
    421c:	83 ec       	ldi	r24, 0xC3	; 195
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	62 e0       	ldi	r22, 0x02	; 2
    4222:	41 e0       	ldi	r20, 0x01	; 1
    4224:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
    4228:	fe 01       	movw	r30, r28
    422a:	e3 59       	subi	r30, 0x93	; 147
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	aa ef       	ldi	r26, 0xFA	; 250
    4234:	b4 e4       	ldi	r27, 0x44	; 68
    4236:	80 83       	st	Z, r24
    4238:	91 83       	std	Z+1, r25	; 0x01
    423a:	a2 83       	std	Z+2, r26	; 0x02
    423c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    423e:	8e 01       	movw	r16, r28
    4240:	07 59       	subi	r16, 0x97	; 151
    4242:	1f 4f       	sbci	r17, 0xFF	; 255
    4244:	fe 01       	movw	r30, r28
    4246:	e3 59       	subi	r30, 0x93	; 147
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	60 81       	ld	r22, Z
    424c:	71 81       	ldd	r23, Z+1	; 0x01
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	93 81       	ldd	r25, Z+3	; 0x03
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	4a ef       	ldi	r20, 0xFA	; 250
    4258:	54 e4       	ldi	r21, 0x44	; 68
    425a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	f8 01       	movw	r30, r16
    4264:	80 83       	st	Z, r24
    4266:	91 83       	std	Z+1, r25	; 0x01
    4268:	a2 83       	std	Z+2, r26	; 0x02
    426a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    426c:	fe 01       	movw	r30, r28
    426e:	e7 59       	subi	r30, 0x97	; 151
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	60 81       	ld	r22, Z
    4274:	71 81       	ldd	r23, Z+1	; 0x01
    4276:	82 81       	ldd	r24, Z+2	; 0x02
    4278:	93 81       	ldd	r25, Z+3	; 0x03
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e8       	ldi	r20, 0x80	; 128
    4280:	5f e3       	ldi	r21, 0x3F	; 63
    4282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4286:	88 23       	and	r24, r24
    4288:	44 f4       	brge	.+16     	; 0x429a <main+0x300>
		__ticks = 1;
    428a:	fe 01       	movw	r30, r28
    428c:	e9 59       	subi	r30, 0x99	; 153
    428e:	ff 4f       	sbci	r31, 0xFF	; 255
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	91 83       	std	Z+1, r25	; 0x01
    4296:	80 83       	st	Z, r24
    4298:	64 c0       	rjmp	.+200    	; 0x4362 <main+0x3c8>
	else if (__tmp > 65535)
    429a:	fe 01       	movw	r30, r28
    429c:	e7 59       	subi	r30, 0x97	; 151
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	60 81       	ld	r22, Z
    42a2:	71 81       	ldd	r23, Z+1	; 0x01
    42a4:	82 81       	ldd	r24, Z+2	; 0x02
    42a6:	93 81       	ldd	r25, Z+3	; 0x03
    42a8:	20 e0       	ldi	r18, 0x00	; 0
    42aa:	3f ef       	ldi	r19, 0xFF	; 255
    42ac:	4f e7       	ldi	r20, 0x7F	; 127
    42ae:	57 e4       	ldi	r21, 0x47	; 71
    42b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42b4:	18 16       	cp	r1, r24
    42b6:	0c f0       	brlt	.+2      	; 0x42ba <main+0x320>
    42b8:	43 c0       	rjmp	.+134    	; 0x4340 <main+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ba:	fe 01       	movw	r30, r28
    42bc:	e3 59       	subi	r30, 0x93	; 147
    42be:	ff 4f       	sbci	r31, 0xFF	; 255
    42c0:	60 81       	ld	r22, Z
    42c2:	71 81       	ldd	r23, Z+1	; 0x01
    42c4:	82 81       	ldd	r24, Z+2	; 0x02
    42c6:	93 81       	ldd	r25, Z+3	; 0x03
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e2       	ldi	r20, 0x20	; 32
    42ce:	51 e4       	ldi	r21, 0x41	; 65
    42d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	8e 01       	movw	r16, r28
    42da:	09 59       	subi	r16, 0x99	; 153
    42dc:	1f 4f       	sbci	r17, 0xFF	; 255
    42de:	bc 01       	movw	r22, r24
    42e0:	cd 01       	movw	r24, r26
    42e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	f8 01       	movw	r30, r16
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	80 83       	st	Z, r24
    42f0:	1f c0       	rjmp	.+62     	; 0x4330 <main+0x396>
    42f2:	fe 01       	movw	r30, r28
    42f4:	eb 59       	subi	r30, 0x9B	; 155
    42f6:	ff 4f       	sbci	r31, 0xFF	; 255
    42f8:	88 ec       	ldi	r24, 0xC8	; 200
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	91 83       	std	Z+1, r25	; 0x01
    42fe:	80 83       	st	Z, r24
    4300:	fe 01       	movw	r30, r28
    4302:	eb 59       	subi	r30, 0x9B	; 155
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	80 81       	ld	r24, Z
    4308:	91 81       	ldd	r25, Z+1	; 0x01
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	f1 f7       	brne	.-4      	; 0x430a <main+0x370>
    430e:	fe 01       	movw	r30, r28
    4310:	eb 59       	subi	r30, 0x9B	; 155
    4312:	ff 4f       	sbci	r31, 0xFF	; 255
    4314:	91 83       	std	Z+1, r25	; 0x01
    4316:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4318:	de 01       	movw	r26, r28
    431a:	a9 59       	subi	r26, 0x99	; 153
    431c:	bf 4f       	sbci	r27, 0xFF	; 255
    431e:	fe 01       	movw	r30, r28
    4320:	e9 59       	subi	r30, 0x99	; 153
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	80 81       	ld	r24, Z
    4326:	91 81       	ldd	r25, Z+1	; 0x01
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	11 96       	adiw	r26, 0x01	; 1
    432c:	9c 93       	st	X, r25
    432e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4330:	fe 01       	movw	r30, r28
    4332:	e9 59       	subi	r30, 0x99	; 153
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	80 81       	ld	r24, Z
    4338:	91 81       	ldd	r25, Z+1	; 0x01
    433a:	00 97       	sbiw	r24, 0x00	; 0
    433c:	d1 f6       	brne	.-76     	; 0x42f2 <main+0x358>
    433e:	27 c0       	rjmp	.+78     	; 0x438e <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4340:	8e 01       	movw	r16, r28
    4342:	09 59       	subi	r16, 0x99	; 153
    4344:	1f 4f       	sbci	r17, 0xFF	; 255
    4346:	fe 01       	movw	r30, r28
    4348:	e7 59       	subi	r30, 0x97	; 151
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	60 81       	ld	r22, Z
    434e:	71 81       	ldd	r23, Z+1	; 0x01
    4350:	82 81       	ldd	r24, Z+2	; 0x02
    4352:	93 81       	ldd	r25, Z+3	; 0x03
    4354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	f8 01       	movw	r30, r16
    435e:	91 83       	std	Z+1, r25	; 0x01
    4360:	80 83       	st	Z, r24
    4362:	de 01       	movw	r26, r28
    4364:	ad 59       	subi	r26, 0x9D	; 157
    4366:	bf 4f       	sbci	r27, 0xFF	; 255
    4368:	fe 01       	movw	r30, r28
    436a:	e9 59       	subi	r30, 0x99	; 153
    436c:	ff 4f       	sbci	r31, 0xFF	; 255
    436e:	80 81       	ld	r24, Z
    4370:	91 81       	ldd	r25, Z+1	; 0x01
    4372:	8d 93       	st	X+, r24
    4374:	9c 93       	st	X, r25
    4376:	fe 01       	movw	r30, r28
    4378:	ed 59       	subi	r30, 0x9D	; 157
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	80 81       	ld	r24, Z
    437e:	91 81       	ldd	r25, Z+1	; 0x01
    4380:	01 97       	sbiw	r24, 0x01	; 1
    4382:	f1 f7       	brne	.-4      	; 0x4380 <main+0x3e6>
    4384:	fe 01       	movw	r30, r28
    4386:	ed 59       	subi	r30, 0x9D	; 157
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	91 83       	std	Z+1, r25	; 0x01
    438c:	80 83       	st	Z, r24
	_delay_ms(2000);
	HLCD_voidClearDisplay();
    438e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <HLCD_voidClearDisplay>
    4392:	0f c0       	rjmp	.+30     	; 0x43b2 <main+0x418>
	while (User_Index < '0' || User_Index > '9')
	{
		User_Index = MUART_u8ReadByteSyncBlocking();
    4394:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <MUART_u8ReadByteSyncBlocking>
    4398:	fe 01       	movw	r30, r28
    439a:	ea 57       	subi	r30, 0x7A	; 122
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	80 83       	st	Z, r24
		MUART_voidSendByteSyncBlocking(User_Index);
    43a0:	fe 01       	movw	r30, r28
    43a2:	ea 57       	subi	r30, 0x7A	; 122
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	80 81       	ld	r24, Z
    43a8:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendByteSyncBlocking('\n');
    43ac:	8a e0       	ldi	r24, 0x0A	; 10
    43ae:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <MUART_voidSendByteSyncBlocking>
	LCD_VOID_WRITE_MESSAGE("Please Enter", ROW1, COL1);
	_delay_ms(2000);
	LCD_VOID_WRITE_MESSAGE("House Number", ROW2, COL1);
	_delay_ms(2000);
	HLCD_voidClearDisplay();
	while (User_Index < '0' || User_Index > '9')
    43b2:	fe 01       	movw	r30, r28
    43b4:	ea 57       	subi	r30, 0x7A	; 122
    43b6:	ff 4f       	sbci	r31, 0xFF	; 255
    43b8:	80 81       	ld	r24, Z
    43ba:	80 33       	cpi	r24, 0x30	; 48
    43bc:	58 f3       	brcs	.-42     	; 0x4394 <main+0x3fa>
    43be:	fe 01       	movw	r30, r28
    43c0:	ea 57       	subi	r30, 0x7A	; 122
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	80 81       	ld	r24, Z
    43c6:	8a 33       	cpi	r24, 0x3A	; 58
    43c8:	28 f7       	brcc	.-54     	; 0x4394 <main+0x3fa>
	{
		User_Index = MUART_u8ReadByteSyncBlocking();
		MUART_voidSendByteSyncBlocking(User_Index);
		MUART_voidSendByteSyncBlocking('\n');
	}
	MUART_voidSendStringSyncNonBlocking("\r\nEnter Password\r\n");
    43ca:	80 ed       	ldi	r24, 0xD0	; 208
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <MUART_voidSendStringSyncNonBlocking>
	User_Index -= '0';
    43d2:	de 01       	movw	r26, r28
    43d4:	aa 57       	subi	r26, 0x7A	; 122
    43d6:	bf 4f       	sbci	r27, 0xFF	; 255
    43d8:	fe 01       	movw	r30, r28
    43da:	ea 57       	subi	r30, 0x7A	; 122
    43dc:	ff 4f       	sbci	r31, 0xFF	; 255
    43de:	80 81       	ld	r24, Z
    43e0:	80 53       	subi	r24, 0x30	; 48
    43e2:	8c 93       	st	X, r24

	while(1)
	{
		u8 mul = 100, pass = 0;
    43e4:	fe 01       	movw	r30, r28
    43e6:	ef 57       	subi	r30, 0x7F	; 127
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	84 e6       	ldi	r24, 0x64	; 100
    43ec:	80 83       	st	Z, r24
    43ee:	fe 01       	movw	r30, r28
    43f0:	e0 58       	subi	r30, 0x80	; 128
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	10 82       	st	Z, r1
		LCD_VOID_WRITE_MESSAGE("Enter Password: ", ROW1, COL1);
    43f6:	83 ee       	ldi	r24, 0xE3	; 227
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	61 e0       	ldi	r22, 0x01	; 1
    43fc:	41 e0       	ldi	r20, 0x01	; 1
    43fe:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
		HLCD_voidGoToPos(ROW2, COL1);
    4402:	82 e0       	ldi	r24, 0x02	; 2
    4404:	61 e0       	ldi	r22, 0x01	; 1
    4406:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <HLCD_voidGoToPos>
		for(u8 i = 0; i < 3; i++)
    440a:	fe 01       	movw	r30, r28
    440c:	e1 58       	subi	r30, 0x81	; 129
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	10 82       	st	Z, r1
    4412:	46 c0       	rjmp	.+140    	; 0x44a0 <main+0x506>
		{
			tmp = MUART_u8ReadByteSyncBlocking();
    4414:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <MUART_u8ReadByteSyncBlocking>
    4418:	fe 01       	movw	r30, r28
    441a:	eb 57       	subi	r30, 0x7B	; 123
    441c:	ff 4f       	sbci	r31, 0xFF	; 255
    441e:	80 83       	st	Z, r24
			MUART_voidSendByteSyncBlocking(tmp);
    4420:	fe 01       	movw	r30, r28
    4422:	eb 57       	subi	r30, 0x7B	; 123
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	80 81       	ld	r24, Z
    4428:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <MUART_voidSendByteSyncBlocking>
			HLCD_voidSendData(tmp);
    442c:	fe 01       	movw	r30, r28
    442e:	eb 57       	subi	r30, 0x7B	; 123
    4430:	ff 4f       	sbci	r31, 0xFF	; 255
    4432:	80 81       	ld	r24, Z
    4434:	0e 94 3a 0a 	call	0x1474	; 0x1474 <HLCD_voidSendData>
			pass += mul * (tmp - '0');
    4438:	fe 01       	movw	r30, r28
    443a:	ef 57       	subi	r30, 0x7F	; 127
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	80 81       	ld	r24, Z
    4440:	28 2f       	mov	r18, r24
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	fe 01       	movw	r30, r28
    4446:	eb 57       	subi	r30, 0x7B	; 123
    4448:	ff 4f       	sbci	r31, 0xFF	; 255
    444a:	80 81       	ld	r24, Z
    444c:	88 2f       	mov	r24, r24
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	c0 97       	sbiw	r24, 0x30	; 48
    4452:	ac 01       	movw	r20, r24
    4454:	24 9f       	mul	r18, r20
    4456:	c0 01       	movw	r24, r0
    4458:	25 9f       	mul	r18, r21
    445a:	90 0d       	add	r25, r0
    445c:	34 9f       	mul	r19, r20
    445e:	90 0d       	add	r25, r0
    4460:	11 24       	eor	r1, r1
    4462:	98 2f       	mov	r25, r24
    4464:	de 01       	movw	r26, r28
    4466:	a0 58       	subi	r26, 0x80	; 128
    4468:	bf 4f       	sbci	r27, 0xFF	; 255
    446a:	fe 01       	movw	r30, r28
    446c:	e0 58       	subi	r30, 0x80	; 128
    446e:	ff 4f       	sbci	r31, 0xFF	; 255
    4470:	80 81       	ld	r24, Z
    4472:	89 0f       	add	r24, r25
    4474:	8c 93       	st	X, r24
			mul /= 10;
    4476:	de 01       	movw	r26, r28
    4478:	af 57       	subi	r26, 0x7F	; 127
    447a:	bf 4f       	sbci	r27, 0xFF	; 255
    447c:	fe 01       	movw	r30, r28
    447e:	ef 57       	subi	r30, 0x7F	; 127
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	80 81       	ld	r24, Z
    4484:	9a e0       	ldi	r25, 0x0A	; 10
    4486:	69 2f       	mov	r22, r25
    4488:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__udivmodqi4>
    448c:	8c 93       	st	X, r24
	while(1)
	{
		u8 mul = 100, pass = 0;
		LCD_VOID_WRITE_MESSAGE("Enter Password: ", ROW1, COL1);
		HLCD_voidGoToPos(ROW2, COL1);
		for(u8 i = 0; i < 3; i++)
    448e:	de 01       	movw	r26, r28
    4490:	a1 58       	subi	r26, 0x81	; 129
    4492:	bf 4f       	sbci	r27, 0xFF	; 255
    4494:	fe 01       	movw	r30, r28
    4496:	e1 58       	subi	r30, 0x81	; 129
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	80 81       	ld	r24, Z
    449c:	8f 5f       	subi	r24, 0xFF	; 255
    449e:	8c 93       	st	X, r24
    44a0:	fe 01       	movw	r30, r28
    44a2:	e1 58       	subi	r30, 0x81	; 129
    44a4:	ff 4f       	sbci	r31, 0xFF	; 255
    44a6:	80 81       	ld	r24, Z
    44a8:	83 30       	cpi	r24, 0x03	; 3
    44aa:	08 f4       	brcc	.+2      	; 0x44ae <main+0x514>
    44ac:	b3 cf       	rjmp	.-154    	; 0x4414 <main+0x47a>
			MUART_voidSendByteSyncBlocking(tmp);
			HLCD_voidSendData(tmp);
			pass += mul * (tmp - '0');
			mul /= 10;
		}
		MUART_voidSendStringSyncNonBlocking("\r\n");
    44ae:	84 ef       	ldi	r24, 0xF4	; 244
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <MUART_voidSendStringSyncNonBlocking>
		if (pass == USERS_ARRAY[User_Index]->password)
    44b6:	fe 01       	movw	r30, r28
    44b8:	ea 57       	subi	r30, 0x7A	; 122
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	88 2f       	mov	r24, r24
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	fc 01       	movw	r30, r24
    44c8:	ee 57       	subi	r30, 0x7E	; 126
    44ca:	fe 4f       	sbci	r31, 0xFE	; 254
    44cc:	01 90       	ld	r0, Z+
    44ce:	f0 81       	ld	r31, Z
    44d0:	e0 2d       	mov	r30, r0
    44d2:	92 81       	ldd	r25, Z+2	; 0x02
    44d4:	fe 01       	movw	r30, r28
    44d6:	e0 58       	subi	r30, 0x80	; 128
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	80 81       	ld	r24, Z
    44dc:	98 17       	cp	r25, r24
    44de:	09 f0       	breq	.+2      	; 0x44e2 <main+0x548>
    44e0:	ad c2       	rjmp	.+1370   	; 0x4a3c <main+0xaa2>
		{
			LCD_VOID_WRITE_MESSAGE("House Number: ", ROW1, COL1);
    44e2:	87 ef       	ldi	r24, 0xF7	; 247
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	61 e0       	ldi	r22, 0x01	; 1
    44e8:	41 e0       	ldi	r20, 0x01	; 1
    44ea:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
			HLCD_voidSendData(User_Index + '0');
    44ee:	fe 01       	movw	r30, r28
    44f0:	ea 57       	subi	r30, 0x7A	; 122
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 81       	ld	r24, Z
    44f6:	80 5d       	subi	r24, 0xD0	; 208
    44f8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <HLCD_voidSendData>
    44fc:	fe 01       	movw	r30, r28
    44fe:	e1 5a       	subi	r30, 0xA1	; 161
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	aa ef       	ldi	r26, 0xFA	; 250
    4508:	b4 e4       	ldi	r27, 0x44	; 68
    450a:	80 83       	st	Z, r24
    450c:	91 83       	std	Z+1, r25	; 0x01
    450e:	a2 83       	std	Z+2, r26	; 0x02
    4510:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4512:	8e 01       	movw	r16, r28
    4514:	05 5a       	subi	r16, 0xA5	; 165
    4516:	1f 4f       	sbci	r17, 0xFF	; 255
    4518:	fe 01       	movw	r30, r28
    451a:	e1 5a       	subi	r30, 0xA1	; 161
    451c:	ff 4f       	sbci	r31, 0xFF	; 255
    451e:	60 81       	ld	r22, Z
    4520:	71 81       	ldd	r23, Z+1	; 0x01
    4522:	82 81       	ldd	r24, Z+2	; 0x02
    4524:	93 81       	ldd	r25, Z+3	; 0x03
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	4a ef       	ldi	r20, 0xFA	; 250
    452c:	54 e4       	ldi	r21, 0x44	; 68
    452e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4532:	dc 01       	movw	r26, r24
    4534:	cb 01       	movw	r24, r22
    4536:	f8 01       	movw	r30, r16
    4538:	80 83       	st	Z, r24
    453a:	91 83       	std	Z+1, r25	; 0x01
    453c:	a2 83       	std	Z+2, r26	; 0x02
    453e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4540:	fe 01       	movw	r30, r28
    4542:	e5 5a       	subi	r30, 0xA5	; 165
    4544:	ff 4f       	sbci	r31, 0xFF	; 255
    4546:	60 81       	ld	r22, Z
    4548:	71 81       	ldd	r23, Z+1	; 0x01
    454a:	82 81       	ldd	r24, Z+2	; 0x02
    454c:	93 81       	ldd	r25, Z+3	; 0x03
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	40 e8       	ldi	r20, 0x80	; 128
    4554:	5f e3       	ldi	r21, 0x3F	; 63
    4556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    455a:	88 23       	and	r24, r24
    455c:	44 f4       	brge	.+16     	; 0x456e <main+0x5d4>
		__ticks = 1;
    455e:	fe 01       	movw	r30, r28
    4560:	e7 5a       	subi	r30, 0xA7	; 167
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	80 83       	st	Z, r24
    456c:	64 c0       	rjmp	.+200    	; 0x4636 <main+0x69c>
	else if (__tmp > 65535)
    456e:	fe 01       	movw	r30, r28
    4570:	e5 5a       	subi	r30, 0xA5	; 165
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	60 81       	ld	r22, Z
    4576:	71 81       	ldd	r23, Z+1	; 0x01
    4578:	82 81       	ldd	r24, Z+2	; 0x02
    457a:	93 81       	ldd	r25, Z+3	; 0x03
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	3f ef       	ldi	r19, 0xFF	; 255
    4580:	4f e7       	ldi	r20, 0x7F	; 127
    4582:	57 e4       	ldi	r21, 0x47	; 71
    4584:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4588:	18 16       	cp	r1, r24
    458a:	0c f0       	brlt	.+2      	; 0x458e <main+0x5f4>
    458c:	43 c0       	rjmp	.+134    	; 0x4614 <main+0x67a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    458e:	fe 01       	movw	r30, r28
    4590:	e1 5a       	subi	r30, 0xA1	; 161
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	60 81       	ld	r22, Z
    4596:	71 81       	ldd	r23, Z+1	; 0x01
    4598:	82 81       	ldd	r24, Z+2	; 0x02
    459a:	93 81       	ldd	r25, Z+3	; 0x03
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	40 e2       	ldi	r20, 0x20	; 32
    45a2:	51 e4       	ldi	r21, 0x41	; 65
    45a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	8e 01       	movw	r16, r28
    45ae:	07 5a       	subi	r16, 0xA7	; 167
    45b0:	1f 4f       	sbci	r17, 0xFF	; 255
    45b2:	bc 01       	movw	r22, r24
    45b4:	cd 01       	movw	r24, r26
    45b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ba:	dc 01       	movw	r26, r24
    45bc:	cb 01       	movw	r24, r22
    45be:	f8 01       	movw	r30, r16
    45c0:	91 83       	std	Z+1, r25	; 0x01
    45c2:	80 83       	st	Z, r24
    45c4:	1f c0       	rjmp	.+62     	; 0x4604 <main+0x66a>
    45c6:	fe 01       	movw	r30, r28
    45c8:	e9 5a       	subi	r30, 0xA9	; 169
    45ca:	ff 4f       	sbci	r31, 0xFF	; 255
    45cc:	88 ec       	ldi	r24, 0xC8	; 200
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	91 83       	std	Z+1, r25	; 0x01
    45d2:	80 83       	st	Z, r24
    45d4:	fe 01       	movw	r30, r28
    45d6:	e9 5a       	subi	r30, 0xA9	; 169
    45d8:	ff 4f       	sbci	r31, 0xFF	; 255
    45da:	80 81       	ld	r24, Z
    45dc:	91 81       	ldd	r25, Z+1	; 0x01
    45de:	01 97       	sbiw	r24, 0x01	; 1
    45e0:	f1 f7       	brne	.-4      	; 0x45de <main+0x644>
    45e2:	fe 01       	movw	r30, r28
    45e4:	e9 5a       	subi	r30, 0xA9	; 169
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	91 83       	std	Z+1, r25	; 0x01
    45ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ec:	de 01       	movw	r26, r28
    45ee:	a7 5a       	subi	r26, 0xA7	; 167
    45f0:	bf 4f       	sbci	r27, 0xFF	; 255
    45f2:	fe 01       	movw	r30, r28
    45f4:	e7 5a       	subi	r30, 0xA7	; 167
    45f6:	ff 4f       	sbci	r31, 0xFF	; 255
    45f8:	80 81       	ld	r24, Z
    45fa:	91 81       	ldd	r25, Z+1	; 0x01
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	11 96       	adiw	r26, 0x01	; 1
    4600:	9c 93       	st	X, r25
    4602:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4604:	fe 01       	movw	r30, r28
    4606:	e7 5a       	subi	r30, 0xA7	; 167
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	80 81       	ld	r24, Z
    460c:	91 81       	ldd	r25, Z+1	; 0x01
    460e:	00 97       	sbiw	r24, 0x00	; 0
    4610:	d1 f6       	brne	.-76     	; 0x45c6 <main+0x62c>
    4612:	27 c0       	rjmp	.+78     	; 0x4662 <main+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4614:	8e 01       	movw	r16, r28
    4616:	07 5a       	subi	r16, 0xA7	; 167
    4618:	1f 4f       	sbci	r17, 0xFF	; 255
    461a:	fe 01       	movw	r30, r28
    461c:	e5 5a       	subi	r30, 0xA5	; 165
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	60 81       	ld	r22, Z
    4622:	71 81       	ldd	r23, Z+1	; 0x01
    4624:	82 81       	ldd	r24, Z+2	; 0x02
    4626:	93 81       	ldd	r25, Z+3	; 0x03
    4628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	f8 01       	movw	r30, r16
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
    4636:	de 01       	movw	r26, r28
    4638:	ab 5a       	subi	r26, 0xAB	; 171
    463a:	bf 4f       	sbci	r27, 0xFF	; 255
    463c:	fe 01       	movw	r30, r28
    463e:	e7 5a       	subi	r30, 0xA7	; 167
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	80 81       	ld	r24, Z
    4644:	91 81       	ldd	r25, Z+1	; 0x01
    4646:	8d 93       	st	X+, r24
    4648:	9c 93       	st	X, r25
    464a:	fe 01       	movw	r30, r28
    464c:	eb 5a       	subi	r30, 0xAB	; 171
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	80 81       	ld	r24, Z
    4652:	91 81       	ldd	r25, Z+1	; 0x01
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	f1 f7       	brne	.-4      	; 0x4654 <main+0x6ba>
    4658:	fe 01       	movw	r30, r28
    465a:	eb 5a       	subi	r30, 0xAB	; 171
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	91 83       	std	Z+1, r25	; 0x01
    4660:	80 83       	st	Z, r24
			_delay_ms(2000);
			LCD_VOID_WRITE_MESSAGE("WELCOME ", ROW1, COL1);
    4662:	86 e0       	ldi	r24, 0x06	; 6
    4664:	91 e0       	ldi	r25, 0x01	; 1
    4666:	61 e0       	ldi	r22, 0x01	; 1
    4668:	41 e0       	ldi	r20, 0x01	; 1
    466a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
    466e:	fe 01       	movw	r30, r28
    4670:	ef 5a       	subi	r30, 0xAF	; 175
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	aa e7       	ldi	r26, 0x7A	; 122
    467a:	b4 e4       	ldi	r27, 0x44	; 68
    467c:	80 83       	st	Z, r24
    467e:	91 83       	std	Z+1, r25	; 0x01
    4680:	a2 83       	std	Z+2, r26	; 0x02
    4682:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4684:	8e 01       	movw	r16, r28
    4686:	03 5b       	subi	r16, 0xB3	; 179
    4688:	1f 4f       	sbci	r17, 0xFF	; 255
    468a:	fe 01       	movw	r30, r28
    468c:	ef 5a       	subi	r30, 0xAF	; 175
    468e:	ff 4f       	sbci	r31, 0xFF	; 255
    4690:	60 81       	ld	r22, Z
    4692:	71 81       	ldd	r23, Z+1	; 0x01
    4694:	82 81       	ldd	r24, Z+2	; 0x02
    4696:	93 81       	ldd	r25, Z+3	; 0x03
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	4a ef       	ldi	r20, 0xFA	; 250
    469e:	54 e4       	ldi	r21, 0x44	; 68
    46a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	f8 01       	movw	r30, r16
    46aa:	80 83       	st	Z, r24
    46ac:	91 83       	std	Z+1, r25	; 0x01
    46ae:	a2 83       	std	Z+2, r26	; 0x02
    46b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46b2:	fe 01       	movw	r30, r28
    46b4:	e3 5b       	subi	r30, 0xB3	; 179
    46b6:	ff 4f       	sbci	r31, 0xFF	; 255
    46b8:	60 81       	ld	r22, Z
    46ba:	71 81       	ldd	r23, Z+1	; 0x01
    46bc:	82 81       	ldd	r24, Z+2	; 0x02
    46be:	93 81       	ldd	r25, Z+3	; 0x03
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	40 e8       	ldi	r20, 0x80	; 128
    46c6:	5f e3       	ldi	r21, 0x3F	; 63
    46c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46cc:	88 23       	and	r24, r24
    46ce:	44 f4       	brge	.+16     	; 0x46e0 <main+0x746>
		__ticks = 1;
    46d0:	fe 01       	movw	r30, r28
    46d2:	e5 5b       	subi	r30, 0xB5	; 181
    46d4:	ff 4f       	sbci	r31, 0xFF	; 255
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	91 83       	std	Z+1, r25	; 0x01
    46dc:	80 83       	st	Z, r24
    46de:	64 c0       	rjmp	.+200    	; 0x47a8 <main+0x80e>
	else if (__tmp > 65535)
    46e0:	fe 01       	movw	r30, r28
    46e2:	e3 5b       	subi	r30, 0xB3	; 179
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	60 81       	ld	r22, Z
    46e8:	71 81       	ldd	r23, Z+1	; 0x01
    46ea:	82 81       	ldd	r24, Z+2	; 0x02
    46ec:	93 81       	ldd	r25, Z+3	; 0x03
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	3f ef       	ldi	r19, 0xFF	; 255
    46f2:	4f e7       	ldi	r20, 0x7F	; 127
    46f4:	57 e4       	ldi	r21, 0x47	; 71
    46f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46fa:	18 16       	cp	r1, r24
    46fc:	0c f0       	brlt	.+2      	; 0x4700 <main+0x766>
    46fe:	43 c0       	rjmp	.+134    	; 0x4786 <main+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4700:	fe 01       	movw	r30, r28
    4702:	ef 5a       	subi	r30, 0xAF	; 175
    4704:	ff 4f       	sbci	r31, 0xFF	; 255
    4706:	60 81       	ld	r22, Z
    4708:	71 81       	ldd	r23, Z+1	; 0x01
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	93 81       	ldd	r25, Z+3	; 0x03
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	40 e2       	ldi	r20, 0x20	; 32
    4714:	51 e4       	ldi	r21, 0x41	; 65
    4716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	8e 01       	movw	r16, r28
    4720:	05 5b       	subi	r16, 0xB5	; 181
    4722:	1f 4f       	sbci	r17, 0xFF	; 255
    4724:	bc 01       	movw	r22, r24
    4726:	cd 01       	movw	r24, r26
    4728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472c:	dc 01       	movw	r26, r24
    472e:	cb 01       	movw	r24, r22
    4730:	f8 01       	movw	r30, r16
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	80 83       	st	Z, r24
    4736:	1f c0       	rjmp	.+62     	; 0x4776 <main+0x7dc>
    4738:	fe 01       	movw	r30, r28
    473a:	e7 5b       	subi	r30, 0xB7	; 183
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	88 ec       	ldi	r24, 0xC8	; 200
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	91 83       	std	Z+1, r25	; 0x01
    4744:	80 83       	st	Z, r24
    4746:	fe 01       	movw	r30, r28
    4748:	e7 5b       	subi	r30, 0xB7	; 183
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	80 81       	ld	r24, Z
    474e:	91 81       	ldd	r25, Z+1	; 0x01
    4750:	01 97       	sbiw	r24, 0x01	; 1
    4752:	f1 f7       	brne	.-4      	; 0x4750 <main+0x7b6>
    4754:	fe 01       	movw	r30, r28
    4756:	e7 5b       	subi	r30, 0xB7	; 183
    4758:	ff 4f       	sbci	r31, 0xFF	; 255
    475a:	91 83       	std	Z+1, r25	; 0x01
    475c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475e:	de 01       	movw	r26, r28
    4760:	a5 5b       	subi	r26, 0xB5	; 181
    4762:	bf 4f       	sbci	r27, 0xFF	; 255
    4764:	fe 01       	movw	r30, r28
    4766:	e5 5b       	subi	r30, 0xB5	; 181
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	80 81       	ld	r24, Z
    476c:	91 81       	ldd	r25, Z+1	; 0x01
    476e:	01 97       	sbiw	r24, 0x01	; 1
    4770:	11 96       	adiw	r26, 0x01	; 1
    4772:	9c 93       	st	X, r25
    4774:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4776:	fe 01       	movw	r30, r28
    4778:	e5 5b       	subi	r30, 0xB5	; 181
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	80 81       	ld	r24, Z
    477e:	91 81       	ldd	r25, Z+1	; 0x01
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	d1 f6       	brne	.-76     	; 0x4738 <main+0x79e>
    4784:	27 c0       	rjmp	.+78     	; 0x47d4 <main+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4786:	8e 01       	movw	r16, r28
    4788:	05 5b       	subi	r16, 0xB5	; 181
    478a:	1f 4f       	sbci	r17, 0xFF	; 255
    478c:	fe 01       	movw	r30, r28
    478e:	e3 5b       	subi	r30, 0xB3	; 179
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	60 81       	ld	r22, Z
    4794:	71 81       	ldd	r23, Z+1	; 0x01
    4796:	82 81       	ldd	r24, Z+2	; 0x02
    4798:	93 81       	ldd	r25, Z+3	; 0x03
    479a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	f8 01       	movw	r30, r16
    47a4:	91 83       	std	Z+1, r25	; 0x01
    47a6:	80 83       	st	Z, r24
    47a8:	de 01       	movw	r26, r28
    47aa:	a9 5b       	subi	r26, 0xB9	; 185
    47ac:	bf 4f       	sbci	r27, 0xFF	; 255
    47ae:	fe 01       	movw	r30, r28
    47b0:	e5 5b       	subi	r30, 0xB5	; 181
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	80 81       	ld	r24, Z
    47b6:	91 81       	ldd	r25, Z+1	; 0x01
    47b8:	8d 93       	st	X+, r24
    47ba:	9c 93       	st	X, r25
    47bc:	fe 01       	movw	r30, r28
    47be:	e9 5b       	subi	r30, 0xB9	; 185
    47c0:	ff 4f       	sbci	r31, 0xFF	; 255
    47c2:	80 81       	ld	r24, Z
    47c4:	91 81       	ldd	r25, Z+1	; 0x01
    47c6:	01 97       	sbiw	r24, 0x01	; 1
    47c8:	f1 f7       	brne	.-4      	; 0x47c6 <main+0x82c>
    47ca:	fe 01       	movw	r30, r28
    47cc:	e9 5b       	subi	r30, 0xB9	; 185
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_VOID_WRITE_MESSAGE(USERS_ARRAY[User_Index]->name, ROW2, COL1);
    47d4:	fe 01       	movw	r30, r28
    47d6:	ea 57       	subi	r30, 0x7A	; 122
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	80 81       	ld	r24, Z
    47dc:	88 2f       	mov	r24, r24
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	88 0f       	add	r24, r24
    47e2:	99 1f       	adc	r25, r25
    47e4:	fc 01       	movw	r30, r24
    47e6:	ee 57       	subi	r30, 0x7E	; 126
    47e8:	fe 4f       	sbci	r31, 0xFE	; 254
    47ea:	01 90       	ld	r0, Z+
    47ec:	f0 81       	ld	r31, Z
    47ee:	e0 2d       	mov	r30, r0
    47f0:	80 81       	ld	r24, Z
    47f2:	91 81       	ldd	r25, Z+1	; 0x01
    47f4:	62 e0       	ldi	r22, 0x02	; 2
    47f6:	41 e0       	ldi	r20, 0x01	; 1
    47f8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
    47fc:	fe 01       	movw	r30, r28
    47fe:	ed 5b       	subi	r30, 0xBD	; 189
    4800:	ff 4f       	sbci	r31, 0xFF	; 255
    4802:	80 e0       	ldi	r24, 0x00	; 0
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	aa e7       	ldi	r26, 0x7A	; 122
    4808:	b4 e4       	ldi	r27, 0x44	; 68
    480a:	80 83       	st	Z, r24
    480c:	91 83       	std	Z+1, r25	; 0x01
    480e:	a2 83       	std	Z+2, r26	; 0x02
    4810:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4812:	8e 01       	movw	r16, r28
    4814:	01 5c       	subi	r16, 0xC1	; 193
    4816:	1f 4f       	sbci	r17, 0xFF	; 255
    4818:	fe 01       	movw	r30, r28
    481a:	ed 5b       	subi	r30, 0xBD	; 189
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	60 81       	ld	r22, Z
    4820:	71 81       	ldd	r23, Z+1	; 0x01
    4822:	82 81       	ldd	r24, Z+2	; 0x02
    4824:	93 81       	ldd	r25, Z+3	; 0x03
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	4a ef       	ldi	r20, 0xFA	; 250
    482c:	54 e4       	ldi	r21, 0x44	; 68
    482e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	f8 01       	movw	r30, r16
    4838:	80 83       	st	Z, r24
    483a:	91 83       	std	Z+1, r25	; 0x01
    483c:	a2 83       	std	Z+2, r26	; 0x02
    483e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4840:	fe 01       	movw	r30, r28
    4842:	ff 96       	adiw	r30, 0x3f	; 63
    4844:	60 81       	ld	r22, Z
    4846:	71 81       	ldd	r23, Z+1	; 0x01
    4848:	82 81       	ldd	r24, Z+2	; 0x02
    484a:	93 81       	ldd	r25, Z+3	; 0x03
    484c:	20 e0       	ldi	r18, 0x00	; 0
    484e:	30 e0       	ldi	r19, 0x00	; 0
    4850:	40 e8       	ldi	r20, 0x80	; 128
    4852:	5f e3       	ldi	r21, 0x3F	; 63
    4854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4858:	88 23       	and	r24, r24
    485a:	2c f4       	brge	.+10     	; 0x4866 <main+0x8cc>
		__ticks = 1;
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	9e af       	std	Y+62, r25	; 0x3e
    4862:	8d af       	std	Y+61, r24	; 0x3d
    4864:	46 c0       	rjmp	.+140    	; 0x48f2 <main+0x958>
	else if (__tmp > 65535)
    4866:	fe 01       	movw	r30, r28
    4868:	ff 96       	adiw	r30, 0x3f	; 63
    486a:	60 81       	ld	r22, Z
    486c:	71 81       	ldd	r23, Z+1	; 0x01
    486e:	82 81       	ldd	r24, Z+2	; 0x02
    4870:	93 81       	ldd	r25, Z+3	; 0x03
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	3f ef       	ldi	r19, 0xFF	; 255
    4876:	4f e7       	ldi	r20, 0x7F	; 127
    4878:	57 e4       	ldi	r21, 0x47	; 71
    487a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    487e:	18 16       	cp	r1, r24
    4880:	64 f5       	brge	.+88     	; 0x48da <main+0x940>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4882:	fe 01       	movw	r30, r28
    4884:	ed 5b       	subi	r30, 0xBD	; 189
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	60 81       	ld	r22, Z
    488a:	71 81       	ldd	r23, Z+1	; 0x01
    488c:	82 81       	ldd	r24, Z+2	; 0x02
    488e:	93 81       	ldd	r25, Z+3	; 0x03
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	40 e2       	ldi	r20, 0x20	; 32
    4896:	51 e4       	ldi	r21, 0x41	; 65
    4898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489c:	dc 01       	movw	r26, r24
    489e:	cb 01       	movw	r24, r22
    48a0:	bc 01       	movw	r22, r24
    48a2:	cd 01       	movw	r24, r26
    48a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a8:	dc 01       	movw	r26, r24
    48aa:	cb 01       	movw	r24, r22
    48ac:	9e af       	std	Y+62, r25	; 0x3e
    48ae:	8d af       	std	Y+61, r24	; 0x3d
    48b0:	0f c0       	rjmp	.+30     	; 0x48d0 <main+0x936>
    48b2:	88 ec       	ldi	r24, 0xC8	; 200
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	9c af       	std	Y+60, r25	; 0x3c
    48b8:	8b af       	std	Y+59, r24	; 0x3b
    48ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    48bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    48be:	01 97       	sbiw	r24, 0x01	; 1
    48c0:	f1 f7       	brne	.-4      	; 0x48be <main+0x924>
    48c2:	9c af       	std	Y+60, r25	; 0x3c
    48c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    48c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    48ca:	01 97       	sbiw	r24, 0x01	; 1
    48cc:	9e af       	std	Y+62, r25	; 0x3e
    48ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    48d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    48d4:	00 97       	sbiw	r24, 0x00	; 0
    48d6:	69 f7       	brne	.-38     	; 0x48b2 <main+0x918>
    48d8:	16 c0       	rjmp	.+44     	; 0x4906 <main+0x96c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48da:	fe 01       	movw	r30, r28
    48dc:	ff 96       	adiw	r30, 0x3f	; 63
    48de:	60 81       	ld	r22, Z
    48e0:	71 81       	ldd	r23, Z+1	; 0x01
    48e2:	82 81       	ldd	r24, Z+2	; 0x02
    48e4:	93 81       	ldd	r25, Z+3	; 0x03
    48e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	9e af       	std	Y+62, r25	; 0x3e
    48f0:	8d af       	std	Y+61, r24	; 0x3d
    48f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    48f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    48f6:	9a af       	std	Y+58, r25	; 0x3a
    48f8:	89 af       	std	Y+57, r24	; 0x39
    48fa:	89 ad       	ldd	r24, Y+57	; 0x39
    48fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    48fe:	01 97       	sbiw	r24, 0x01	; 1
    4900:	f1 f7       	brne	.-4      	; 0x48fe <main+0x964>
    4902:	9a af       	std	Y+58, r25	; 0x3a
    4904:	89 af       	std	Y+57, r24	; 0x39
			trial++;
			_delay_ms(2000);
			continue;
		}
	}
	TURNON_LOCK_LEDS();
    4906:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <TURNON_LOCK_LEDS>
	LCD_VOID_WRITE_MESSAGE("Opening Door", ROW1, COL1);
    490a:	8f e0       	ldi	r24, 0x0F	; 15
    490c:	91 e0       	ldi	r25, 0x01	; 1
    490e:	61 e0       	ldi	r22, 0x01	; 1
    4910:	41 e0       	ldi	r20, 0x01	; 1
    4912:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
	STEPPER_Set_Angle(90, CW);
    4916:	6a e5       	ldi	r22, 0x5A	; 90
    4918:	70 e0       	ldi	r23, 0x00	; 0
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	40 e0       	ldi	r20, 0x00	; 0
    4920:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <STEPPER_Set_Angle>
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	aa e7       	ldi	r26, 0x7A	; 122
    492a:	b5 e4       	ldi	r27, 0x45	; 69
    492c:	8d ab       	std	Y+53, r24	; 0x35
    492e:	9e ab       	std	Y+54, r25	; 0x36
    4930:	af ab       	std	Y+55, r26	; 0x37
    4932:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4934:	6d a9       	ldd	r22, Y+53	; 0x35
    4936:	7e a9       	ldd	r23, Y+54	; 0x36
    4938:	8f a9       	ldd	r24, Y+55	; 0x37
    493a:	98 ad       	ldd	r25, Y+56	; 0x38
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	4a ef       	ldi	r20, 0xFA	; 250
    4942:	54 e4       	ldi	r21, 0x44	; 68
    4944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	89 ab       	std	Y+49, r24	; 0x31
    494e:	9a ab       	std	Y+50, r25	; 0x32
    4950:	ab ab       	std	Y+51, r26	; 0x33
    4952:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4954:	69 a9       	ldd	r22, Y+49	; 0x31
    4956:	7a a9       	ldd	r23, Y+50	; 0x32
    4958:	8b a9       	ldd	r24, Y+51	; 0x33
    495a:	9c a9       	ldd	r25, Y+52	; 0x34
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	40 e8       	ldi	r20, 0x80	; 128
    4962:	5f e3       	ldi	r21, 0x3F	; 63
    4964:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4968:	88 23       	and	r24, r24
    496a:	2c f4       	brge	.+10     	; 0x4976 <main+0x9dc>
		__ticks = 1;
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	98 ab       	std	Y+48, r25	; 0x30
    4972:	8f a7       	std	Y+47, r24	; 0x2f
    4974:	3f c0       	rjmp	.+126    	; 0x49f4 <main+0xa5a>
	else if (__tmp > 65535)
    4976:	69 a9       	ldd	r22, Y+49	; 0x31
    4978:	7a a9       	ldd	r23, Y+50	; 0x32
    497a:	8b a9       	ldd	r24, Y+51	; 0x33
    497c:	9c a9       	ldd	r25, Y+52	; 0x34
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	3f ef       	ldi	r19, 0xFF	; 255
    4982:	4f e7       	ldi	r20, 0x7F	; 127
    4984:	57 e4       	ldi	r21, 0x47	; 71
    4986:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    498a:	18 16       	cp	r1, r24
    498c:	4c f5       	brge	.+82     	; 0x49e0 <main+0xa46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    498e:	6d a9       	ldd	r22, Y+53	; 0x35
    4990:	7e a9       	ldd	r23, Y+54	; 0x36
    4992:	8f a9       	ldd	r24, Y+55	; 0x37
    4994:	98 ad       	ldd	r25, Y+56	; 0x38
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	40 e2       	ldi	r20, 0x20	; 32
    499c:	51 e4       	ldi	r21, 0x41	; 65
    499e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	bc 01       	movw	r22, r24
    49a8:	cd 01       	movw	r24, r26
    49aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	98 ab       	std	Y+48, r25	; 0x30
    49b4:	8f a7       	std	Y+47, r24	; 0x2f
    49b6:	0f c0       	rjmp	.+30     	; 0x49d6 <main+0xa3c>
    49b8:	88 ec       	ldi	r24, 0xC8	; 200
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	9e a7       	std	Y+46, r25	; 0x2e
    49be:	8d a7       	std	Y+45, r24	; 0x2d
    49c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    49c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    49c4:	01 97       	sbiw	r24, 0x01	; 1
    49c6:	f1 f7       	brne	.-4      	; 0x49c4 <main+0xa2a>
    49c8:	9e a7       	std	Y+46, r25	; 0x2e
    49ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    49ce:	98 a9       	ldd	r25, Y+48	; 0x30
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	98 ab       	std	Y+48, r25	; 0x30
    49d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    49d8:	98 a9       	ldd	r25, Y+48	; 0x30
    49da:	00 97       	sbiw	r24, 0x00	; 0
    49dc:	69 f7       	brne	.-38     	; 0x49b8 <main+0xa1e>
    49de:	14 c0       	rjmp	.+40     	; 0x4a08 <main+0xa6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e0:	69 a9       	ldd	r22, Y+49	; 0x31
    49e2:	7a a9       	ldd	r23, Y+50	; 0x32
    49e4:	8b a9       	ldd	r24, Y+51	; 0x33
    49e6:	9c a9       	ldd	r25, Y+52	; 0x34
    49e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	98 ab       	std	Y+48, r25	; 0x30
    49f2:	8f a7       	std	Y+47, r24	; 0x2f
    49f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    49f6:	98 a9       	ldd	r25, Y+48	; 0x30
    49f8:	9c a7       	std	Y+44, r25	; 0x2c
    49fa:	8b a7       	std	Y+43, r24	; 0x2b
    49fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    49fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	f1 f7       	brne	.-4      	; 0x4a00 <main+0xa66>
    4a04:	9c a7       	std	Y+44, r25	; 0x2c
    4a06:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(4000);
	LCD_VOID_WRITE_MESSAGE("Closing Door", ROW1, COL1);
    4a08:	8c e1       	ldi	r24, 0x1C	; 28
    4a0a:	91 e0       	ldi	r25, 0x01	; 1
    4a0c:	61 e0       	ldi	r22, 0x01	; 1
    4a0e:	41 e0       	ldi	r20, 0x01	; 1
    4a10:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
	TURNOFF_LOCK_LEDS();
    4a14:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <TURNOFF_LOCK_LEDS>
	STEPPER_Set_Angle(90, ACW);
    4a18:	6a e5       	ldi	r22, 0x5A	; 90
    4a1a:	70 e0       	ldi	r23, 0x00	; 0
    4a1c:	80 e0       	ldi	r24, 0x00	; 0
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	41 e0       	ldi	r20, 0x01	; 1
    4a22:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <STEPPER_Set_Angle>
	TURNON_LIGHTING_LEDS();
    4a26:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <TURNON_LIGHTING_LEDS>
	HLCD_voidClearDisplay();
    4a2a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <HLCD_voidClearDisplay>
	return (0);
    4a2e:	c7 57       	subi	r28, 0x77	; 119
    4a30:	df 4f       	sbci	r29, 0xFF	; 255
    4a32:	19 82       	std	Y+1, r1	; 0x01
    4a34:	18 82       	st	Y, r1
    4a36:	c9 58       	subi	r28, 0x89	; 137
    4a38:	d0 40       	sbci	r29, 0x00	; 0
    4a3a:	82 c1       	rjmp	.+772    	; 0x4d40 <main+0xda6>
			_delay_ms(1000);
			break;
		}
		else
		{
			if (trial == 2)
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	ec 57       	subi	r30, 0x7C	; 124
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	80 81       	ld	r24, Z
    4a44:	82 30       	cpi	r24, 0x02	; 2
    4a46:	09 f0       	breq	.+2      	; 0x4a4a <main+0xab0>
    4a48:	f9 c0       	rjmp	.+498    	; 0x4c3c <main+0xca2>
			{
				TURNON_FIRING_LEDS();
    4a4a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <TURNON_FIRING_LEDS>
				LCD_VOID_WRITE_MESSAGE("Access Denied", ROW1, COL1);
    4a4e:	89 e2       	ldi	r24, 0x29	; 41
    4a50:	91 e0       	ldi	r25, 0x01	; 1
    4a52:	61 e0       	ldi	r22, 0x01	; 1
    4a54:	41 e0       	ldi	r20, 0x01	; 1
    4a56:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
    4a5a:	80 e0       	ldi	r24, 0x00	; 0
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	aa ef       	ldi	r26, 0xFA	; 250
    4a60:	b4 e4       	ldi	r27, 0x44	; 68
    4a62:	8f a3       	std	Y+39, r24	; 0x27
    4a64:	98 a7       	std	Y+40, r25	; 0x28
    4a66:	a9 a7       	std	Y+41, r26	; 0x29
    4a68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a6a:	6f a1       	ldd	r22, Y+39	; 0x27
    4a6c:	78 a5       	ldd	r23, Y+40	; 0x28
    4a6e:	89 a5       	ldd	r24, Y+41	; 0x29
    4a70:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	4a ef       	ldi	r20, 0xFA	; 250
    4a78:	54 e4       	ldi	r21, 0x44	; 68
    4a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	8b a3       	std	Y+35, r24	; 0x23
    4a84:	9c a3       	std	Y+36, r25	; 0x24
    4a86:	ad a3       	std	Y+37, r26	; 0x25
    4a88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    4a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    4a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    4a90:	9e a1       	ldd	r25, Y+38	; 0x26
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e8       	ldi	r20, 0x80	; 128
    4a98:	5f e3       	ldi	r21, 0x3F	; 63
    4a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a9e:	88 23       	and	r24, r24
    4aa0:	2c f4       	brge	.+10     	; 0x4aac <main+0xb12>
		__ticks = 1;
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	9a a3       	std	Y+34, r25	; 0x22
    4aa8:	89 a3       	std	Y+33, r24	; 0x21
    4aaa:	3f c0       	rjmp	.+126    	; 0x4b2a <main+0xb90>
	else if (__tmp > 65535)
    4aac:	6b a1       	ldd	r22, Y+35	; 0x23
    4aae:	7c a1       	ldd	r23, Y+36	; 0x24
    4ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    4ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	3f ef       	ldi	r19, 0xFF	; 255
    4ab8:	4f e7       	ldi	r20, 0x7F	; 127
    4aba:	57 e4       	ldi	r21, 0x47	; 71
    4abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ac0:	18 16       	cp	r1, r24
    4ac2:	4c f5       	brge	.+82     	; 0x4b16 <main+0xb7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ac4:	6f a1       	ldd	r22, Y+39	; 0x27
    4ac6:	78 a5       	ldd	r23, Y+40	; 0x28
    4ac8:	89 a5       	ldd	r24, Y+41	; 0x29
    4aca:	9a a5       	ldd	r25, Y+42	; 0x2a
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	40 e2       	ldi	r20, 0x20	; 32
    4ad2:	51 e4       	ldi	r21, 0x41	; 65
    4ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	bc 01       	movw	r22, r24
    4ade:	cd 01       	movw	r24, r26
    4ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae4:	dc 01       	movw	r26, r24
    4ae6:	cb 01       	movw	r24, r22
    4ae8:	9a a3       	std	Y+34, r25	; 0x22
    4aea:	89 a3       	std	Y+33, r24	; 0x21
    4aec:	0f c0       	rjmp	.+30     	; 0x4b0c <main+0xb72>
    4aee:	88 ec       	ldi	r24, 0xC8	; 200
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	98 a3       	std	Y+32, r25	; 0x20
    4af4:	8f 8f       	std	Y+31, r24	; 0x1f
    4af6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4af8:	98 a1       	ldd	r25, Y+32	; 0x20
    4afa:	01 97       	sbiw	r24, 0x01	; 1
    4afc:	f1 f7       	brne	.-4      	; 0x4afa <main+0xb60>
    4afe:	98 a3       	std	Y+32, r25	; 0x20
    4b00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b02:	89 a1       	ldd	r24, Y+33	; 0x21
    4b04:	9a a1       	ldd	r25, Y+34	; 0x22
    4b06:	01 97       	sbiw	r24, 0x01	; 1
    4b08:	9a a3       	std	Y+34, r25	; 0x22
    4b0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b0c:	89 a1       	ldd	r24, Y+33	; 0x21
    4b0e:	9a a1       	ldd	r25, Y+34	; 0x22
    4b10:	00 97       	sbiw	r24, 0x00	; 0
    4b12:	69 f7       	brne	.-38     	; 0x4aee <main+0xb54>
    4b14:	14 c0       	rjmp	.+40     	; 0x4b3e <main+0xba4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b16:	6b a1       	ldd	r22, Y+35	; 0x23
    4b18:	7c a1       	ldd	r23, Y+36	; 0x24
    4b1a:	8d a1       	ldd	r24, Y+37	; 0x25
    4b1c:	9e a1       	ldd	r25, Y+38	; 0x26
    4b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b22:	dc 01       	movw	r26, r24
    4b24:	cb 01       	movw	r24, r22
    4b26:	9a a3       	std	Y+34, r25	; 0x22
    4b28:	89 a3       	std	Y+33, r24	; 0x21
    4b2a:	89 a1       	ldd	r24, Y+33	; 0x21
    4b2c:	9a a1       	ldd	r25, Y+34	; 0x22
    4b2e:	9e 8f       	std	Y+30, r25	; 0x1e
    4b30:	8d 8f       	std	Y+29, r24	; 0x1d
    4b32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b36:	01 97       	sbiw	r24, 0x01	; 1
    4b38:	f1 f7       	brne	.-4      	; 0x4b36 <main+0xb9c>
    4b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    4b3c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2000);
				LCD_VOID_WRITE_MESSAGE("QUITING System", ROW1, COL1);
    4b3e:	87 e3       	ldi	r24, 0x37	; 55
    4b40:	91 e0       	ldi	r25, 0x01	; 1
    4b42:	61 e0       	ldi	r22, 0x01	; 1
    4b44:	41 e0       	ldi	r20, 0x01	; 1
    4b46:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
    4b4a:	80 e0       	ldi	r24, 0x00	; 0
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	aa e7       	ldi	r26, 0x7A	; 122
    4b50:	b4 e4       	ldi	r27, 0x44	; 68
    4b52:	89 8f       	std	Y+25, r24	; 0x19
    4b54:	9a 8f       	std	Y+26, r25	; 0x1a
    4b56:	ab 8f       	std	Y+27, r26	; 0x1b
    4b58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    4b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	4a ef       	ldi	r20, 0xFA	; 250
    4b68:	54 e4       	ldi	r21, 0x44	; 68
    4b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6e:	dc 01       	movw	r26, r24
    4b70:	cb 01       	movw	r24, r22
    4b72:	8d 8b       	std	Y+21, r24	; 0x15
    4b74:	9e 8b       	std	Y+22, r25	; 0x16
    4b76:	af 8b       	std	Y+23, r26	; 0x17
    4b78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b80:	98 8d       	ldd	r25, Y+24	; 0x18
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	40 e8       	ldi	r20, 0x80	; 128
    4b88:	5f e3       	ldi	r21, 0x3F	; 63
    4b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b8e:	88 23       	and	r24, r24
    4b90:	2c f4       	brge	.+10     	; 0x4b9c <main+0xc02>
		__ticks = 1;
    4b92:	81 e0       	ldi	r24, 0x01	; 1
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	9c 8b       	std	Y+20, r25	; 0x14
    4b98:	8b 8b       	std	Y+19, r24	; 0x13
    4b9a:	3f c0       	rjmp	.+126    	; 0x4c1a <main+0xc80>
	else if (__tmp > 65535)
    4b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    4ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	3f ef       	ldi	r19, 0xFF	; 255
    4ba8:	4f e7       	ldi	r20, 0x7F	; 127
    4baa:	57 e4       	ldi	r21, 0x47	; 71
    4bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bb0:	18 16       	cp	r1, r24
    4bb2:	4c f5       	brge	.+82     	; 0x4c06 <main+0xc6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb4:	69 8d       	ldd	r22, Y+25	; 0x19
    4bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bbc:	20 e0       	ldi	r18, 0x00	; 0
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	40 e2       	ldi	r20, 0x20	; 32
    4bc2:	51 e4       	ldi	r21, 0x41	; 65
    4bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	bc 01       	movw	r22, r24
    4bce:	cd 01       	movw	r24, r26
    4bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	cb 01       	movw	r24, r22
    4bd8:	9c 8b       	std	Y+20, r25	; 0x14
    4bda:	8b 8b       	std	Y+19, r24	; 0x13
    4bdc:	0f c0       	rjmp	.+30     	; 0x4bfc <main+0xc62>
    4bde:	88 ec       	ldi	r24, 0xC8	; 200
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	9a 8b       	std	Y+18, r25	; 0x12
    4be4:	89 8b       	std	Y+17, r24	; 0x11
    4be6:	89 89       	ldd	r24, Y+17	; 0x11
    4be8:	9a 89       	ldd	r25, Y+18	; 0x12
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	f1 f7       	brne	.-4      	; 0x4bea <main+0xc50>
    4bee:	9a 8b       	std	Y+18, r25	; 0x12
    4bf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    4bf6:	01 97       	sbiw	r24, 0x01	; 1
    4bf8:	9c 8b       	std	Y+20, r25	; 0x14
    4bfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    4c00:	00 97       	sbiw	r24, 0x00	; 0
    4c02:	69 f7       	brne	.-38     	; 0x4bde <main+0xc44>
    4c04:	14 c0       	rjmp	.+40     	; 0x4c2e <main+0xc94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c06:	6d 89       	ldd	r22, Y+21	; 0x15
    4c08:	7e 89       	ldd	r23, Y+22	; 0x16
    4c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	9c 8b       	std	Y+20, r25	; 0x14
    4c18:	8b 8b       	std	Y+19, r24	; 0x13
    4c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4c1e:	98 8b       	std	Y+16, r25	; 0x10
    4c20:	8f 87       	std	Y+15, r24	; 0x0f
    4c22:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c24:	98 89       	ldd	r25, Y+16	; 0x10
    4c26:	01 97       	sbiw	r24, 0x01	; 1
    4c28:	f1 f7       	brne	.-4      	; 0x4c26 <main+0xc8c>
    4c2a:	98 8b       	std	Y+16, r25	; 0x10
    4c2c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				return (0);
    4c2e:	c7 57       	subi	r28, 0x77	; 119
    4c30:	df 4f       	sbci	r29, 0xFF	; 255
    4c32:	19 82       	std	Y+1, r1	; 0x01
    4c34:	18 82       	st	Y, r1
    4c36:	c9 58       	subi	r28, 0x89	; 137
    4c38:	d0 40       	sbci	r29, 0x00	; 0
    4c3a:	82 c0       	rjmp	.+260    	; 0x4d40 <main+0xda6>
			}
			LCD_VOID_WRITE_MESSAGE("Incorrect", ROW1, COL1);
    4c3c:	86 e4       	ldi	r24, 0x46	; 70
    4c3e:	91 e0       	ldi	r25, 0x01	; 1
    4c40:	61 e0       	ldi	r22, 0x01	; 1
    4c42:	41 e0       	ldi	r20, 0x01	; 1
    4c44:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_VOID_WRITE_MESSAGE>
			trial++;
    4c48:	de 01       	movw	r26, r28
    4c4a:	ac 57       	subi	r26, 0x7C	; 124
    4c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c4e:	fe 01       	movw	r30, r28
    4c50:	ec 57       	subi	r30, 0x7C	; 124
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	80 81       	ld	r24, Z
    4c56:	8f 5f       	subi	r24, 0xFF	; 255
    4c58:	8c 93       	st	X, r24
    4c5a:	80 e0       	ldi	r24, 0x00	; 0
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	aa ef       	ldi	r26, 0xFA	; 250
    4c60:	b4 e4       	ldi	r27, 0x44	; 68
    4c62:	8b 87       	std	Y+11, r24	; 0x0b
    4c64:	9c 87       	std	Y+12, r25	; 0x0c
    4c66:	ad 87       	std	Y+13, r26	; 0x0d
    4c68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	4a ef       	ldi	r20, 0xFA	; 250
    4c78:	54 e4       	ldi	r21, 0x44	; 68
    4c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7e:	dc 01       	movw	r26, r24
    4c80:	cb 01       	movw	r24, r22
    4c82:	8f 83       	std	Y+7, r24	; 0x07
    4c84:	98 87       	std	Y+8, r25	; 0x08
    4c86:	a9 87       	std	Y+9, r26	; 0x09
    4c88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c8c:	78 85       	ldd	r23, Y+8	; 0x08
    4c8e:	89 85       	ldd	r24, Y+9	; 0x09
    4c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c92:	20 e0       	ldi	r18, 0x00	; 0
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	40 e8       	ldi	r20, 0x80	; 128
    4c98:	5f e3       	ldi	r21, 0x3F	; 63
    4c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c9e:	88 23       	and	r24, r24
    4ca0:	2c f4       	brge	.+10     	; 0x4cac <main+0xd12>
		__ticks = 1;
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	9e 83       	std	Y+6, r25	; 0x06
    4ca8:	8d 83       	std	Y+5, r24	; 0x05
    4caa:	3f c0       	rjmp	.+126    	; 0x4d2a <main+0xd90>
	else if (__tmp > 65535)
    4cac:	6f 81       	ldd	r22, Y+7	; 0x07
    4cae:	78 85       	ldd	r23, Y+8	; 0x08
    4cb0:	89 85       	ldd	r24, Y+9	; 0x09
    4cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	3f ef       	ldi	r19, 0xFF	; 255
    4cb8:	4f e7       	ldi	r20, 0x7F	; 127
    4cba:	57 e4       	ldi	r21, 0x47	; 71
    4cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cc0:	18 16       	cp	r1, r24
    4cc2:	4c f5       	brge	.+82     	; 0x4d16 <main+0xd7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	40 e2       	ldi	r20, 0x20	; 32
    4cd2:	51 e4       	ldi	r21, 0x41	; 65
    4cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	bc 01       	movw	r22, r24
    4cde:	cd 01       	movw	r24, r26
    4ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce4:	dc 01       	movw	r26, r24
    4ce6:	cb 01       	movw	r24, r22
    4ce8:	9e 83       	std	Y+6, r25	; 0x06
    4cea:	8d 83       	std	Y+5, r24	; 0x05
    4cec:	0f c0       	rjmp	.+30     	; 0x4d0c <main+0xd72>
    4cee:	88 ec       	ldi	r24, 0xC8	; 200
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	9c 83       	std	Y+4, r25	; 0x04
    4cf4:	8b 83       	std	Y+3, r24	; 0x03
    4cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    4cfa:	01 97       	sbiw	r24, 0x01	; 1
    4cfc:	f1 f7       	brne	.-4      	; 0x4cfa <main+0xd60>
    4cfe:	9c 83       	std	Y+4, r25	; 0x04
    4d00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d02:	8d 81       	ldd	r24, Y+5	; 0x05
    4d04:	9e 81       	ldd	r25, Y+6	; 0x06
    4d06:	01 97       	sbiw	r24, 0x01	; 1
    4d08:	9e 83       	std	Y+6, r25	; 0x06
    4d0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d10:	00 97       	sbiw	r24, 0x00	; 0
    4d12:	69 f7       	brne	.-38     	; 0x4cee <main+0xd54>
    4d14:	67 cb       	rjmp	.-2354   	; 0x43e4 <main+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d16:	6f 81       	ldd	r22, Y+7	; 0x07
    4d18:	78 85       	ldd	r23, Y+8	; 0x08
    4d1a:	89 85       	ldd	r24, Y+9	; 0x09
    4d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d22:	dc 01       	movw	r26, r24
    4d24:	cb 01       	movw	r24, r22
    4d26:	9e 83       	std	Y+6, r25	; 0x06
    4d28:	8d 83       	std	Y+5, r24	; 0x05
    4d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d2e:	9a 83       	std	Y+2, r25	; 0x02
    4d30:	89 83       	std	Y+1, r24	; 0x01
    4d32:	89 81       	ldd	r24, Y+1	; 0x01
    4d34:	9a 81       	ldd	r25, Y+2	; 0x02
    4d36:	01 97       	sbiw	r24, 0x01	; 1
    4d38:	f1 f7       	brne	.-4      	; 0x4d36 <main+0xd9c>
    4d3a:	9a 83       	std	Y+2, r25	; 0x02
    4d3c:	89 83       	std	Y+1, r24	; 0x01
    4d3e:	52 cb       	rjmp	.-2396   	; 0x43e4 <main+0x44a>
			_delay_ms(2000);
			continue;
		}
	}
    4d40:	c7 57       	subi	r28, 0x77	; 119
    4d42:	df 4f       	sbci	r29, 0xFF	; 255
    4d44:	88 81       	ld	r24, Y
    4d46:	99 81       	ldd	r25, Y+1	; 0x01
    4d48:	c9 58       	subi	r28, 0x89	; 137
    4d4a:	d0 40       	sbci	r29, 0x00	; 0
	TURNOFF_LOCK_LEDS();
	STEPPER_Set_Angle(90, ACW);
	TURNON_LIGHTING_LEDS();
	HLCD_voidClearDisplay();
	return (0);
}
    4d4c:	c6 57       	subi	r28, 0x76	; 118
    4d4e:	df 4f       	sbci	r29, 0xFF	; 255
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	f8 94       	cli
    4d54:	de bf       	out	0x3e, r29	; 62
    4d56:	0f be       	out	0x3f, r0	; 63
    4d58:	cd bf       	out	0x3d, r28	; 61
    4d5a:	cf 91       	pop	r28
    4d5c:	df 91       	pop	r29
    4d5e:	1f 91       	pop	r17
    4d60:	0f 91       	pop	r16
    4d62:	08 95       	ret

00004d64 <__udivmodqi4>:
    4d64:	99 1b       	sub	r25, r25
    4d66:	79 e0       	ldi	r23, 0x09	; 9
    4d68:	04 c0       	rjmp	.+8      	; 0x4d72 <__udivmodqi4_ep>

00004d6a <__udivmodqi4_loop>:
    4d6a:	99 1f       	adc	r25, r25
    4d6c:	96 17       	cp	r25, r22
    4d6e:	08 f0       	brcs	.+2      	; 0x4d72 <__udivmodqi4_ep>
    4d70:	96 1b       	sub	r25, r22

00004d72 <__udivmodqi4_ep>:
    4d72:	88 1f       	adc	r24, r24
    4d74:	7a 95       	dec	r23
    4d76:	c9 f7       	brne	.-14     	; 0x4d6a <__udivmodqi4_loop>
    4d78:	80 95       	com	r24
    4d7a:	08 95       	ret

00004d7c <__udivmodsi4>:
    4d7c:	a1 e2       	ldi	r26, 0x21	; 33
    4d7e:	1a 2e       	mov	r1, r26
    4d80:	aa 1b       	sub	r26, r26
    4d82:	bb 1b       	sub	r27, r27
    4d84:	fd 01       	movw	r30, r26
    4d86:	0d c0       	rjmp	.+26     	; 0x4da2 <__udivmodsi4_ep>

00004d88 <__udivmodsi4_loop>:
    4d88:	aa 1f       	adc	r26, r26
    4d8a:	bb 1f       	adc	r27, r27
    4d8c:	ee 1f       	adc	r30, r30
    4d8e:	ff 1f       	adc	r31, r31
    4d90:	a2 17       	cp	r26, r18
    4d92:	b3 07       	cpc	r27, r19
    4d94:	e4 07       	cpc	r30, r20
    4d96:	f5 07       	cpc	r31, r21
    4d98:	20 f0       	brcs	.+8      	; 0x4da2 <__udivmodsi4_ep>
    4d9a:	a2 1b       	sub	r26, r18
    4d9c:	b3 0b       	sbc	r27, r19
    4d9e:	e4 0b       	sbc	r30, r20
    4da0:	f5 0b       	sbc	r31, r21

00004da2 <__udivmodsi4_ep>:
    4da2:	66 1f       	adc	r22, r22
    4da4:	77 1f       	adc	r23, r23
    4da6:	88 1f       	adc	r24, r24
    4da8:	99 1f       	adc	r25, r25
    4daa:	1a 94       	dec	r1
    4dac:	69 f7       	brne	.-38     	; 0x4d88 <__udivmodsi4_loop>
    4dae:	60 95       	com	r22
    4db0:	70 95       	com	r23
    4db2:	80 95       	com	r24
    4db4:	90 95       	com	r25
    4db6:	9b 01       	movw	r18, r22
    4db8:	ac 01       	movw	r20, r24
    4dba:	bd 01       	movw	r22, r26
    4dbc:	cf 01       	movw	r24, r30
    4dbe:	08 95       	ret

00004dc0 <__prologue_saves__>:
    4dc0:	2f 92       	push	r2
    4dc2:	3f 92       	push	r3
    4dc4:	4f 92       	push	r4
    4dc6:	5f 92       	push	r5
    4dc8:	6f 92       	push	r6
    4dca:	7f 92       	push	r7
    4dcc:	8f 92       	push	r8
    4dce:	9f 92       	push	r9
    4dd0:	af 92       	push	r10
    4dd2:	bf 92       	push	r11
    4dd4:	cf 92       	push	r12
    4dd6:	df 92       	push	r13
    4dd8:	ef 92       	push	r14
    4dda:	ff 92       	push	r15
    4ddc:	0f 93       	push	r16
    4dde:	1f 93       	push	r17
    4de0:	cf 93       	push	r28
    4de2:	df 93       	push	r29
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
    4de8:	ca 1b       	sub	r28, r26
    4dea:	db 0b       	sbc	r29, r27
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	09 94       	ijmp

00004df8 <__epilogue_restores__>:
    4df8:	2a 88       	ldd	r2, Y+18	; 0x12
    4dfa:	39 88       	ldd	r3, Y+17	; 0x11
    4dfc:	48 88       	ldd	r4, Y+16	; 0x10
    4dfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e00:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e02:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e04:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e06:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e08:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e0a:	b9 84       	ldd	r11, Y+9	; 0x09
    4e0c:	c8 84       	ldd	r12, Y+8	; 0x08
    4e0e:	df 80       	ldd	r13, Y+7	; 0x07
    4e10:	ee 80       	ldd	r14, Y+6	; 0x06
    4e12:	fd 80       	ldd	r15, Y+5	; 0x05
    4e14:	0c 81       	ldd	r16, Y+4	; 0x04
    4e16:	1b 81       	ldd	r17, Y+3	; 0x03
    4e18:	aa 81       	ldd	r26, Y+2	; 0x02
    4e1a:	b9 81       	ldd	r27, Y+1	; 0x01
    4e1c:	ce 0f       	add	r28, r30
    4e1e:	d1 1d       	adc	r29, r1
    4e20:	0f b6       	in	r0, 0x3f	; 63
    4e22:	f8 94       	cli
    4e24:	de bf       	out	0x3e, r29	; 62
    4e26:	0f be       	out	0x3f, r0	; 63
    4e28:	cd bf       	out	0x3d, r28	; 61
    4e2a:	ed 01       	movw	r28, r26
    4e2c:	08 95       	ret

00004e2e <malloc>:
    4e2e:	cf 93       	push	r28
    4e30:	df 93       	push	r29
    4e32:	bc 01       	movw	r22, r24
    4e34:	82 30       	cpi	r24, 0x02	; 2
    4e36:	91 05       	cpc	r25, r1
    4e38:	10 f4       	brcc	.+4      	; 0x4e3e <malloc+0x10>
    4e3a:	62 e0       	ldi	r22, 0x02	; 2
    4e3c:	70 e0       	ldi	r23, 0x00	; 0
    4e3e:	a0 91 98 01 	lds	r26, 0x0198
    4e42:	b0 91 99 01 	lds	r27, 0x0199
    4e46:	ed 01       	movw	r28, r26
    4e48:	e0 e0       	ldi	r30, 0x00	; 0
    4e4a:	f0 e0       	ldi	r31, 0x00	; 0
    4e4c:	40 e0       	ldi	r20, 0x00	; 0
    4e4e:	50 e0       	ldi	r21, 0x00	; 0
    4e50:	21 c0       	rjmp	.+66     	; 0x4e94 <malloc+0x66>
    4e52:	88 81       	ld	r24, Y
    4e54:	99 81       	ldd	r25, Y+1	; 0x01
    4e56:	86 17       	cp	r24, r22
    4e58:	97 07       	cpc	r25, r23
    4e5a:	69 f4       	brne	.+26     	; 0x4e76 <malloc+0x48>
    4e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e60:	30 97       	sbiw	r30, 0x00	; 0
    4e62:	19 f0       	breq	.+6      	; 0x4e6a <malloc+0x3c>
    4e64:	93 83       	std	Z+3, r25	; 0x03
    4e66:	82 83       	std	Z+2, r24	; 0x02
    4e68:	04 c0       	rjmp	.+8      	; 0x4e72 <malloc+0x44>
    4e6a:	90 93 99 01 	sts	0x0199, r25
    4e6e:	80 93 98 01 	sts	0x0198, r24
    4e72:	fe 01       	movw	r30, r28
    4e74:	34 c0       	rjmp	.+104    	; 0x4ede <malloc+0xb0>
    4e76:	68 17       	cp	r22, r24
    4e78:	79 07       	cpc	r23, r25
    4e7a:	38 f4       	brcc	.+14     	; 0x4e8a <malloc+0x5c>
    4e7c:	41 15       	cp	r20, r1
    4e7e:	51 05       	cpc	r21, r1
    4e80:	19 f0       	breq	.+6      	; 0x4e88 <malloc+0x5a>
    4e82:	84 17       	cp	r24, r20
    4e84:	95 07       	cpc	r25, r21
    4e86:	08 f4       	brcc	.+2      	; 0x4e8a <malloc+0x5c>
    4e88:	ac 01       	movw	r20, r24
    4e8a:	fe 01       	movw	r30, r28
    4e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e90:	9c 01       	movw	r18, r24
    4e92:	e9 01       	movw	r28, r18
    4e94:	20 97       	sbiw	r28, 0x00	; 0
    4e96:	e9 f6       	brne	.-70     	; 0x4e52 <malloc+0x24>
    4e98:	41 15       	cp	r20, r1
    4e9a:	51 05       	cpc	r21, r1
    4e9c:	a9 f1       	breq	.+106    	; 0x4f08 <malloc+0xda>
    4e9e:	ca 01       	movw	r24, r20
    4ea0:	86 1b       	sub	r24, r22
    4ea2:	97 0b       	sbc	r25, r23
    4ea4:	04 97       	sbiw	r24, 0x04	; 4
    4ea6:	08 f4       	brcc	.+2      	; 0x4eaa <malloc+0x7c>
    4ea8:	ba 01       	movw	r22, r20
    4eaa:	e0 e0       	ldi	r30, 0x00	; 0
    4eac:	f0 e0       	ldi	r31, 0x00	; 0
    4eae:	2a c0       	rjmp	.+84     	; 0x4f04 <malloc+0xd6>
    4eb0:	8d 91       	ld	r24, X+
    4eb2:	9c 91       	ld	r25, X
    4eb4:	11 97       	sbiw	r26, 0x01	; 1
    4eb6:	84 17       	cp	r24, r20
    4eb8:	95 07       	cpc	r25, r21
    4eba:	f9 f4       	brne	.+62     	; 0x4efa <malloc+0xcc>
    4ebc:	64 17       	cp	r22, r20
    4ebe:	75 07       	cpc	r23, r21
    4ec0:	81 f4       	brne	.+32     	; 0x4ee2 <malloc+0xb4>
    4ec2:	12 96       	adiw	r26, 0x02	; 2
    4ec4:	8d 91       	ld	r24, X+
    4ec6:	9c 91       	ld	r25, X
    4ec8:	13 97       	sbiw	r26, 0x03	; 3
    4eca:	30 97       	sbiw	r30, 0x00	; 0
    4ecc:	19 f0       	breq	.+6      	; 0x4ed4 <malloc+0xa6>
    4ece:	93 83       	std	Z+3, r25	; 0x03
    4ed0:	82 83       	std	Z+2, r24	; 0x02
    4ed2:	04 c0       	rjmp	.+8      	; 0x4edc <malloc+0xae>
    4ed4:	90 93 99 01 	sts	0x0199, r25
    4ed8:	80 93 98 01 	sts	0x0198, r24
    4edc:	fd 01       	movw	r30, r26
    4ede:	32 96       	adiw	r30, 0x02	; 2
    4ee0:	4f c0       	rjmp	.+158    	; 0x4f80 <malloc+0x152>
    4ee2:	ca 01       	movw	r24, r20
    4ee4:	86 1b       	sub	r24, r22
    4ee6:	97 0b       	sbc	r25, r23
    4ee8:	fd 01       	movw	r30, r26
    4eea:	e8 0f       	add	r30, r24
    4eec:	f9 1f       	adc	r31, r25
    4eee:	61 93       	st	Z+, r22
    4ef0:	71 93       	st	Z+, r23
    4ef2:	02 97       	sbiw	r24, 0x02	; 2
    4ef4:	8d 93       	st	X+, r24
    4ef6:	9c 93       	st	X, r25
    4ef8:	43 c0       	rjmp	.+134    	; 0x4f80 <malloc+0x152>
    4efa:	fd 01       	movw	r30, r26
    4efc:	82 81       	ldd	r24, Z+2	; 0x02
    4efe:	93 81       	ldd	r25, Z+3	; 0x03
    4f00:	9c 01       	movw	r18, r24
    4f02:	d9 01       	movw	r26, r18
    4f04:	10 97       	sbiw	r26, 0x00	; 0
    4f06:	a1 f6       	brne	.-88     	; 0x4eb0 <malloc+0x82>
    4f08:	80 91 96 01 	lds	r24, 0x0196
    4f0c:	90 91 97 01 	lds	r25, 0x0197
    4f10:	89 2b       	or	r24, r25
    4f12:	41 f4       	brne	.+16     	; 0x4f24 <malloc+0xf6>
    4f14:	80 91 5a 01 	lds	r24, 0x015A
    4f18:	90 91 5b 01 	lds	r25, 0x015B
    4f1c:	90 93 97 01 	sts	0x0197, r25
    4f20:	80 93 96 01 	sts	0x0196, r24
    4f24:	40 91 5c 01 	lds	r20, 0x015C
    4f28:	50 91 5d 01 	lds	r21, 0x015D
    4f2c:	41 15       	cp	r20, r1
    4f2e:	51 05       	cpc	r21, r1
    4f30:	41 f4       	brne	.+16     	; 0x4f42 <malloc+0x114>
    4f32:	4d b7       	in	r20, 0x3d	; 61
    4f34:	5e b7       	in	r21, 0x3e	; 62
    4f36:	80 91 58 01 	lds	r24, 0x0158
    4f3a:	90 91 59 01 	lds	r25, 0x0159
    4f3e:	48 1b       	sub	r20, r24
    4f40:	59 0b       	sbc	r21, r25
    4f42:	20 91 96 01 	lds	r18, 0x0196
    4f46:	30 91 97 01 	lds	r19, 0x0197
    4f4a:	24 17       	cp	r18, r20
    4f4c:	35 07       	cpc	r19, r21
    4f4e:	b0 f4       	brcc	.+44     	; 0x4f7c <malloc+0x14e>
    4f50:	ca 01       	movw	r24, r20
    4f52:	82 1b       	sub	r24, r18
    4f54:	93 0b       	sbc	r25, r19
    4f56:	86 17       	cp	r24, r22
    4f58:	97 07       	cpc	r25, r23
    4f5a:	80 f0       	brcs	.+32     	; 0x4f7c <malloc+0x14e>
    4f5c:	ab 01       	movw	r20, r22
    4f5e:	4e 5f       	subi	r20, 0xFE	; 254
    4f60:	5f 4f       	sbci	r21, 0xFF	; 255
    4f62:	84 17       	cp	r24, r20
    4f64:	95 07       	cpc	r25, r21
    4f66:	50 f0       	brcs	.+20     	; 0x4f7c <malloc+0x14e>
    4f68:	42 0f       	add	r20, r18
    4f6a:	53 1f       	adc	r21, r19
    4f6c:	50 93 97 01 	sts	0x0197, r21
    4f70:	40 93 96 01 	sts	0x0196, r20
    4f74:	f9 01       	movw	r30, r18
    4f76:	61 93       	st	Z+, r22
    4f78:	71 93       	st	Z+, r23
    4f7a:	02 c0       	rjmp	.+4      	; 0x4f80 <malloc+0x152>
    4f7c:	e0 e0       	ldi	r30, 0x00	; 0
    4f7e:	f0 e0       	ldi	r31, 0x00	; 0
    4f80:	cf 01       	movw	r24, r30
    4f82:	df 91       	pop	r29
    4f84:	cf 91       	pop	r28
    4f86:	08 95       	ret

00004f88 <free>:
    4f88:	cf 93       	push	r28
    4f8a:	df 93       	push	r29
    4f8c:	00 97       	sbiw	r24, 0x00	; 0
    4f8e:	09 f4       	brne	.+2      	; 0x4f92 <free+0xa>
    4f90:	50 c0       	rjmp	.+160    	; 0x5032 <free+0xaa>
    4f92:	ec 01       	movw	r28, r24
    4f94:	22 97       	sbiw	r28, 0x02	; 2
    4f96:	1b 82       	std	Y+3, r1	; 0x03
    4f98:	1a 82       	std	Y+2, r1	; 0x02
    4f9a:	a0 91 98 01 	lds	r26, 0x0198
    4f9e:	b0 91 99 01 	lds	r27, 0x0199
    4fa2:	10 97       	sbiw	r26, 0x00	; 0
    4fa4:	09 f1       	breq	.+66     	; 0x4fe8 <free+0x60>
    4fa6:	40 e0       	ldi	r20, 0x00	; 0
    4fa8:	50 e0       	ldi	r21, 0x00	; 0
    4faa:	ac 17       	cp	r26, r28
    4fac:	bd 07       	cpc	r27, r29
    4fae:	08 f1       	brcs	.+66     	; 0x4ff2 <free+0x6a>
    4fb0:	bb 83       	std	Y+3, r27	; 0x03
    4fb2:	aa 83       	std	Y+2, r26	; 0x02
    4fb4:	fe 01       	movw	r30, r28
    4fb6:	21 91       	ld	r18, Z+
    4fb8:	31 91       	ld	r19, Z+
    4fba:	e2 0f       	add	r30, r18
    4fbc:	f3 1f       	adc	r31, r19
    4fbe:	ae 17       	cp	r26, r30
    4fc0:	bf 07       	cpc	r27, r31
    4fc2:	79 f4       	brne	.+30     	; 0x4fe2 <free+0x5a>
    4fc4:	8d 91       	ld	r24, X+
    4fc6:	9c 91       	ld	r25, X
    4fc8:	11 97       	sbiw	r26, 0x01	; 1
    4fca:	28 0f       	add	r18, r24
    4fcc:	39 1f       	adc	r19, r25
    4fce:	2e 5f       	subi	r18, 0xFE	; 254
    4fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd2:	39 83       	std	Y+1, r19	; 0x01
    4fd4:	28 83       	st	Y, r18
    4fd6:	12 96       	adiw	r26, 0x02	; 2
    4fd8:	8d 91       	ld	r24, X+
    4fda:	9c 91       	ld	r25, X
    4fdc:	13 97       	sbiw	r26, 0x03	; 3
    4fde:	9b 83       	std	Y+3, r25	; 0x03
    4fe0:	8a 83       	std	Y+2, r24	; 0x02
    4fe2:	41 15       	cp	r20, r1
    4fe4:	51 05       	cpc	r21, r1
    4fe6:	71 f4       	brne	.+28     	; 0x5004 <free+0x7c>
    4fe8:	d0 93 99 01 	sts	0x0199, r29
    4fec:	c0 93 98 01 	sts	0x0198, r28
    4ff0:	20 c0       	rjmp	.+64     	; 0x5032 <free+0xaa>
    4ff2:	12 96       	adiw	r26, 0x02	; 2
    4ff4:	8d 91       	ld	r24, X+
    4ff6:	9c 91       	ld	r25, X
    4ff8:	13 97       	sbiw	r26, 0x03	; 3
    4ffa:	ad 01       	movw	r20, r26
    4ffc:	00 97       	sbiw	r24, 0x00	; 0
    4ffe:	11 f0       	breq	.+4      	; 0x5004 <free+0x7c>
    5000:	dc 01       	movw	r26, r24
    5002:	d3 cf       	rjmp	.-90     	; 0x4faa <free+0x22>
    5004:	fa 01       	movw	r30, r20
    5006:	d3 83       	std	Z+3, r29	; 0x03
    5008:	c2 83       	std	Z+2, r28	; 0x02
    500a:	21 91       	ld	r18, Z+
    500c:	31 91       	ld	r19, Z+
    500e:	e2 0f       	add	r30, r18
    5010:	f3 1f       	adc	r31, r19
    5012:	ce 17       	cp	r28, r30
    5014:	df 07       	cpc	r29, r31
    5016:	69 f4       	brne	.+26     	; 0x5032 <free+0xaa>
    5018:	88 81       	ld	r24, Y
    501a:	99 81       	ldd	r25, Y+1	; 0x01
    501c:	28 0f       	add	r18, r24
    501e:	39 1f       	adc	r19, r25
    5020:	2e 5f       	subi	r18, 0xFE	; 254
    5022:	3f 4f       	sbci	r19, 0xFF	; 255
    5024:	fa 01       	movw	r30, r20
    5026:	31 83       	std	Z+1, r19	; 0x01
    5028:	20 83       	st	Z, r18
    502a:	8a 81       	ldd	r24, Y+2	; 0x02
    502c:	9b 81       	ldd	r25, Y+3	; 0x03
    502e:	93 83       	std	Z+3, r25	; 0x03
    5030:	82 83       	std	Z+2, r24	; 0x02
    5032:	df 91       	pop	r29
    5034:	cf 91       	pop	r28
    5036:	08 95       	ret

00005038 <_exit>:
    5038:	f8 94       	cli

0000503a <__stop_program>:
    503a:	ff cf       	rjmp	.-2      	; 0x503a <__stop_program>
